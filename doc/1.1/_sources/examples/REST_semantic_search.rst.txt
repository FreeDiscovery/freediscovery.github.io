

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = a57e3a19925942c9

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/a57e3a19925942c9

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 8f7c69bc76a14cb4
      => SVD decomposition with 100 dimensions explaining 76.43 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.425
    4116841      0.391
    21316        0.376
    2152089      0.372
    1454436      0.368
    1572516      0.334
    1550025      0.320
    69169        0.317
    649636       0.316
    648025       0.315
    68644        0.315
    674041       0.313
    3545689      0.307
    4923961      0.307
    1276900      0.306
    1274641      0.306
    3748096      0.302
    49729        0.302
    202500       0.302
    1976836      0.298
    1682209      0.281
    776161       0.281
    3225616      0.279
    21609        0.273
    48841        0.272
    4765489      0.270
    1048576      0.270
    774400       0.267
    777924       0.264
    1684804      0.263
    ...            ...
    898704      -0.199
    2025        -0.199
    4704561     -0.200
    1763584     -0.202
    2280100     -0.206
    4239481     -0.207
    4410000     -0.209
    1044484     -0.210
    4571044     -0.211
    4214809     -0.212
    3214849     -0.212
    2277081     -0.218
    1288225     -0.223
    3751969     -0.223
    304704      -0.224
    122500      -0.225
    114921      -0.235
    1085764     -0.238
    3312400     -0.242
    614656      -0.243
    1510441     -0.243
    1311025     -0.249
    1083681     -0.251
    495616      -0.265
    1607824     -0.273
    5143824     -0.278
    2268036     -0.279
    708964      -0.279
    1610361     -0.279
    2271049     -0.291

    [2465 rows x 1 columns]
    0.425305708298

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/a57e3a19925942c9




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.440 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
