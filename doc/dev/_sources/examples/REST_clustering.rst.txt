

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 0e26bdecee034c11

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/0e26bdecee034c11

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/0e26bdecee034c11
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 526a530769684fb9
      => SVD decomposition with 100 dimensions explaining 53.27 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = 846e301eba274b90

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/846e301eba274b90
        .. computed in 1.6s
       cluster_id                     cluster_label  cluster_similarity  cluster_size  n_documents
    0           0                 tue teneo sanders               0.337           421          421
    1           1                  enron tana jones               0.337           433          433
    2           2                  nemec doc gallup               0.400           174          174
    3           3             dasovich enron market               0.404           277          277
    4           4   ricafrente ricafrente_david nov               0.391           202          202
    5           5                     tenet wed oct               0.390           239          239
    6           6            rewrite server address               1.000            56           56
    7           7                  ect haedicke hou               0.354           358          358
    8           8           shall party transaction               0.534           109          109
    9           9  fri enron_development conference               0.396           196          196

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 2b15ba80bc274f4d

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/2b15ba80bc274f4d
        .. computed in 2.7s
                                                 children  cluster_depth  cluster_id                        cluster_label  cluster_similarity  cluster_size  n_documents
    0                                 [1, 22, 25, 27, 41]              0           0                         test ect oct               0.294          2465         2465
    1   [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1...              1           1         enron_development tana jones               0.306          1252         1252
    2                                                  []              2           2  confirmation catalytica transaction               0.504            52           52
    3                                                  []              2           3                        tenet tue thu               0.466            50           50
    4                                                  []              2           4              shall party transaction               0.455           130          130
    5                                                  []              2           5        enron_development cone issues               0.460            90           90
    6                                                  []              2           6                  alias berkeley haas               0.477            68           68
    7                                                  []              2           7                   tana jones lambert               0.545            35           35
    8                                                  []              2           8               rewrite server address               0.582           120          120
    9                                                  []              2           9          energy services enrononline               0.484            81           81
    10                                                 []              2          10                mtg migration outlook               0.493            36           36
    11                                                 []              2          11                foreign tax brazilian               0.524            48           48
    12                                                 []              2          12                harris dead brokerage               0.450            63           63
    13                                                 []              2          13                  dasovich new mexico               0.458            67           67
    14                                                 []              2          14               tiger guaranty sanders               0.416            84           84
    15                                                 []              2          15                      kean tana jones               0.457            63           63
    16                                                 []              2          16               migration outlook team               0.473            38           38
    17                                                 []              2          17                   ellis eb3325 class               0.457            55           55
    18                                                 []              2          18                    tana jones credit               0.436            56           56
    19                                                 []              2          19                enron shults canadian               0.482            33           33
    20                                                 []              2          20                   murray sample conf               0.428            43           43
    21                                                 []              2          21        hendry enron_development cini               0.512            40           40
    22                                           [23, 24]              1          22                        load test fri               0.496            64           64
    23                                                 []              2          23                         tue nov load               0.598             8            8
    24                                                 []              2          24                         load oct fri               0.507            56           56
    25                                               [26]              1          25                     haedicke nov thu               0.589            60           60
    26                                                 []              2          26                     haedicke nov thu               0.589            60           60
    27  [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 3...              1          27                  wed test shackleton               0.330           507          507
    28                                                 []              2          28              test nicolay recipients               0.496            80           80
    29                                                 []              2          29                     lunch lafuze wed               0.520            46           46
    30                                                 []              2          30                        nov tenet wed               0.492            37           37
    31                                                 []              2          31              ruppert exxon gillaspie               0.471            61           61
    32                                                 []              2          32                      nemec sheet doc               0.553            40           40
    33                                                 []              2          33              simons shackleton south               0.546            22           22
    34                                                 []              2          34               calo shackleton dinner               0.571            18           18
    35                                                 []              2          35                enron project meeting               0.457            24           24
    36                                                 []              2          36                 mtg deseret etringer               0.478            40           40
    37                                                 []              2          37                    sanders lunch nov               0.491            36           36
    38                                                 []              2          38                        tue tenet mtg               0.464            37           37
    39                                                 []              2          39                wed migration outlook               0.500            33           33
    40                                                 []              2          40          dupre shackleton catalytica               0.543            33           33
    41  [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 5...              1          41                        ect teneo hou               0.328           582          582
    42                                                 []              2          42                mon migration outlook               0.533            14           14
    43                                                 []              2          43                       ect hou master               0.534            90           90
    44                                                 []              2          44                 advice lessee mexico               0.423            70           70
    45                                                 []              2          45                      thu sanders nov               0.555            23           23
    46                                                 []              2          46                      sanders lay tue               0.546            29           29
    47                                                 []              2          47                       nemec lon bump               0.532            14           14
    48                                                 []              2          48      mon ricafrente_david ricafrente               0.522            30           30
    49                                                 []              2          49                      pier usvi gpier               0.631            30           30
    50                                                 []              2          50                  tenet oct migration               0.469            48           48
    51                                                 []              2          51              kincannon meeting sager               0.423            65           65
    52                                                 []              2          52                teneo taylor_mark mon               0.645             7            7
    53                                                 []              2          53                     doc teneo gallup               0.571            25           25
    54                                                 []              2          54     teneo shackleton_sara recipients               0.535            38           38
    55                                                 []              2          55      fri ricafrente ricafrente_david               0.494            38           38
    56                                                 []              2          56                      eb3325 meet mon               0.429            61           61

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/2b15ba80bc274f4d
        .. computed in 0.6s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.455           130  [{'document_id': 599076, 'similarity': 0.45485...
    1            1               0.582           120  [{'document_id': 5041, 'similarity': 0.5819823...
    2            2               0.460            90  [{'document_id': 900, 'similarity': 0.46017110...
    3            3               0.534            90  [{'document_id': 2030625, 'similarity': 0.5340...
    4            4               0.416            84  [{'document_id': 4541161, 'similarity': 0.4155...
    5            5               0.484            81  [{'document_id': 1745041, 'similarity': 0.4843...
    6            6               0.496            80  [{'document_id': 156025, 'similarity': 0.49580...
    7            7               0.423            70  [{'document_id': 2016400, 'similarity': 0.4225...
    8            8               0.477            68  [{'document_id': 401956, 'similarity': 0.47735...
    9            9               0.458            67  [{'document_id': 399424, 'similarity': 0.45757...
    10          10               0.423            65  [{'document_id': 2999824, 'similarity': 0.4228...
    11          11               0.450            63  [{'document_id': 27889, 'similarity': 0.450071...
    12          12               0.457            63  [{'document_id': 5564881, 'similarity': 0.4567...
    13          13               0.471            61  [{'document_id': 703921, 'similarity': 0.47050...
    14          14               0.429            61  [{'document_id': 2676496, 'similarity': 0.4285...
    15          15               0.589            60  [{'document_id': 2992900, 'similarity': 0.5885...
    16          16               0.436            56  [{'document_id': 1976836, 'similarity': 0.4361...
    17          17               0.507            56  [{'document_id': 350464, 'similarity': 0.50675...
    18          18               0.457            55  [{'document_id': 39204, 'similarity': 0.456913...
    19          19               0.504            52  [{'document_id': 97969, 'similarity': 0.503900...
    20          20               0.466            50  [{'document_id': 2223081, 'similarity': 0.4658...
    21          21               0.524            48  [{'document_id': 4624, 'similarity': 0.5244410...
    22          22               0.469            48  [{'document_id': 3097600, 'similarity': 0.4689...
    23          23               0.520            46  [{'document_id': 2560000, 'similarity': 0.5200...
    24          24               0.428            43  [{'document_id': 3861225, 'similarity': 0.4282...
    25          25               0.512            40  [{'document_id': 96721, 'similarity': 0.512072...
    26          26               0.553            40  [{'document_id': 790321, 'similarity': 0.55333...
    27          27               0.478            40  [{'document_id': 12769, 'similarity': 0.478128...
    28          28               0.473            38  [{'document_id': 5560164, 'similarity': 0.4732...
    29          29               0.535            38  [{'document_id': 3418801, 'similarity': 0.5346...
    30          30               0.494            38  [{'document_id': 2455489, 'similarity': 0.4942...
    31          31               0.492            37  [{'document_id': 2334784, 'similarity': 0.4921...
    32          32               0.464            37  [{'document_id': 3171961, 'similarity': 0.4635...
    33          33               0.493            36  [{'document_id': 5447556, 'similarity': 0.4927...
    34          34               0.491            36  [{'document_id': 4028049, 'similarity': 0.4909...
    35          35               0.545            35  [{'document_id': 277729, 'similarity': 0.54477...
    36          36               0.482            33  [{'document_id': 1960000, 'similarity': 0.4823...
    37          37               0.500            33  [{'document_id': 2310400, 'similarity': 0.5003...
    38          38               0.543            33  [{'document_id': 119025, 'similarity': 0.54329...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/0e26bdecee034c11




|


.. code-block:: python


    import os.path
    import numpy as np
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])} \
                                   for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75 # filter out unfrequent / too frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                      if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                            n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              #'min_similarity': 0.95,
                              'branching_factor': 20 
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.730 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
