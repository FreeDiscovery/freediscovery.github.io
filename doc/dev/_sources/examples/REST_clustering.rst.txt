

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 2f162e0156c6445e

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/2f162e0156c6445e

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/2f162e0156c6445e
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 5d71441af08d4183
      => SVD decomposition with 100 dimensions explaining 53.28 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = 750886acbf9a4e97

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/750886acbf9a4e97
        .. computed in 1.8s
       cluster_id                        cluster_label  cluster_similarity  cluster_size  n_documents
    0           0                       wed tana jones               0.362           315          315
    1           1               migration outlook team               0.403           206          206
    2           2               rewrite server address               1.000            56           56
    3           3                        mon tenet oct               0.402           185          185
    4           4                    berkeley haas edu               0.377           370          370
    5           5                        ect hou sager               0.455           146          146
    6           6                          mtg tue doc               0.350           346          346
    7           7                     fri test ruppert               0.381           246          246
    8           8                        thu teneo nov               0.335           464          464
    9           9  enron_development brazil shackleton               0.434           131          131

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = b2979baf55c14b8b

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/b2979baf55c14b8b
        .. computed in 3.0s
                                                 children  cluster_depth  cluster_id                     cluster_label  cluster_similarity  cluster_size  n_documents
    0                       [1, 3, 6, 26, 29, 50, 55, 57]              0           0                      test ect oct               0.294          2465         2465
    1                                                 [2]              1           1            attorney south project               0.970             8            8
    2                                                  []              2           2            attorney south project               0.970             8            8
    3                                              [4, 5]              1           3                  jones tana enron               0.499            77           77
    4                                                  []              2           4                   jones tana load               0.535            46           46
    5                                                  []              2           5                  tana jones enron               0.582            31           31
    6   [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...              1           6                    nov tenet test               0.314           920          920
    7                                                  []              2           7                lunch lafuze flynn               0.435            73           73
    8                                                  []              2           8     enron_development cone issues               0.542            61           61
    9                                                  []              2           9           shall party transaction               0.528            94           94
    10                                                 []              2          10       deseret etringer shackleton               0.499            52           52
    11                                                 []              2          11                  haedicke nov thu               0.583            59           59
    12                                                 []              2          12                    cat urine odor               0.487            19           19
    13                                                 []              2          13                   meeting tue nov               0.481            45           45
    14                                                 []              2          14              dasovich calo lessee               0.463            36           36
    15                                                 []              2          15                     load nov meet               0.512            45           45
    16                                                 []              2          16               shackleton load nov               0.497            31           31
    17                                                 []              2          17              tiger enron guaranty               0.538            41           41
    18                                                 []              2          18                     thu tenet oct               0.544            45           45
    19                                                 []              2          19        wed tenet ricafrente_david               0.503            58           58
    20                                                 []              2          20          dasovich message milbank               0.470            54           54
    21                                                 []              2          21                     mon tenet nov               0.519            38           38
    22                                                 []              2          22            eb3325 meet ricafrente               0.548            41           41
    23                                                 []              2          23              conference nov tenet               0.456            41           41
    24                                                 []              2          24            migration outlook team               0.550            56           56
    25                                                 []              2          25                     fri tenet oct               0.481            31           31
    26                                           [27, 28]              1          26         kincannon meeting trading               0.406            80           80
    27                                                 []              2          27         kincannon meeting trading               0.409            70           70
    28                                                 []              2          28          financial shults trading               0.601            10           10
    29  [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 4...              1          29                   ect hou rewrite               0.312          1089         1089
    ..                                                ...            ...         ...                               ...                 ...           ...          ...
    31                                                 []              2          31        enron_development cini lon               0.449            69           69
    32                                                 []              2          32                 master dead teneo               0.421            61           61
    33                                                 []              2          33                   ect hou sanders               0.548            78           78
    34                                                 []              2          34  performance password enrononline               0.439            51           51
    35                                                 []              2          35                  ect muni aquilla               0.521            31           31
    36                                                 []              2          36             shall agreement party               0.534            34           34
    37                                                 []              2          37           nicolay serc recipients               0.463            57           57
    38                                                 []              2          38                   enron meet cftc               0.454            39           39
    39                                                 []              2          39          davidson brazil sampling               0.534            52           52
    40                                                 []              2          40               ruppert nemec exxon               0.553            50           50
    41                                                 []              2          41   recipients administrative group               0.497            56           56
    42                                                 []              2          42                     tue mtg tenet               0.494            35           35
    43                                                 []              2          43               berkeley alias haas               0.538            44           44
    44                                                 []              2          44                  calo kean advice               0.415            73           73
    45                                                 []              2          45          energy services customer               0.541            70           70
    46                                                 []              2          46              foreign sampling tax               0.508            43           43
    47                                                 []              2          47                simons teneo deals               0.453            35           35
    48                                                 []              2          48                     ena enron rmt               0.444            54           54
    49                                                 []              2          49             mtg migration outlook               0.474            42           42
    50                                   [51, 52, 53, 54]              1          50                   sanders oct mon               0.411           140          140
    51                                                 []              2          51            conference sanders oct               0.502            21           21
    52                                                 []              2          52                   hyvl bump enron               0.572            29           29
    53                                                 []              2          53                      mon oct lyco               0.450            37           37
    54                                                 []              2          54                 sanders nov lunch               0.592            53           53
    55                                               [56]              1          55               hendry week houston               0.671            15           15
    56                                                 []              2          56               hendry week houston               0.671            15           15
    57                                       [58, 59, 60]              1          57                 nemec teneo dupre               0.387           136          136
    58                                                 []              2          58            nemec dupre catalytica               0.453            67           67
    59                                                 []              2          59      teneo taylor_mark recipients               0.494            47           47
    60                                                 []              2          60                   usvi pier gpier               0.618            22           22

    [61 rows x 7 columns]

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/b2979baf55c14b8b
        .. computed in 0.7s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.593           115  [{'document_id': 5041, 'similarity': 0.5932637...
    1            1               0.528            94  [{'document_id': 4946176, 'similarity': 0.5278...
    2            2               0.548            78  [{'document_id': 2030625, 'similarity': 0.5480...
    3            3               0.435            73  [{'document_id': 4536900, 'similarity': 0.4354...
    4            4               0.415            73  [{'document_id': 3283344, 'similarity': 0.4150...
    5            5               0.409            70  [{'document_id': 2446096, 'similarity': 0.4089...
    6            6               0.541            70  [{'document_id': 142884, 'similarity': 0.54128...
    7            7               0.449            69  [{'document_id': 86436, 'similarity': 0.448914...
    8            8               0.453            67  [{'document_id': 753424, 'similarity': 0.45260...
    9            9               0.542            61  [{'document_id': 900, 'similarity': 0.54182250...
    10          10               0.421            61  [{'document_id': 3225616, 'similarity': 0.4208...
    11          11               0.583            59  [{'document_id': 2930944, 'similarity': 0.5828...
    12          12               0.503            58  [{'document_id': 1768900, 'similarity': 0.5025...
    13          13               0.463            57  [{'document_id': 154449, 'similarity': 0.46344...
    14          14               0.550            56  [{'document_id': 3940225, 'similarity': 0.5499...
    15          15               0.497            56  [{'document_id': 855625, 'similarity': 0.49661...
    16          16               0.470            54  [{'document_id': 583696, 'similarity': 0.47022...
    17          17               0.444            54  [{'document_id': 109561, 'similarity': 0.44397...
    18          18               0.592            53  [{'document_id': 4028049, 'similarity': 0.5919...
    19          19               0.499            52  [{'document_id': 12769, 'similarity': 0.499405...
    20          20               0.534            52  [{'document_id': 552049, 'similarity': 0.53381...
    21          21               0.439            51  [{'document_id': 1846881, 'similarity': 0.4392...
    22          22               0.553            50  [{'document_id': 795664, 'similarity': 0.55327...
    23          23               0.494            47  [{'document_id': 3352561, 'similarity': 0.4941...
    24          24               0.535            46  [{'document_id': 215296, 'similarity': 0.53458...
    25          25               0.481            45  [{'document_id': 2402500, 'similarity': 0.4805...
    26          26               0.512            45  [{'document_id': 844561, 'similarity': 0.51225...
    27          27               0.544            45  [{'document_id': 1871424, 'similarity': 0.5437...
    28          28               0.538            44  [{'document_id': 463761, 'similarity': 0.53846...
    29          29               0.508            43  [{'document_id': 4624, 'similarity': 0.5082322...
    30          30               0.474            42  [{'document_id': 5452225, 'similarity': 0.4742...
    31          31               0.538            41  [{'document_id': 22500, 'similarity': 0.537510...
    32          32               0.548            41  [{'document_id': 2669956, 'similarity': 0.5481...
    33          33               0.456            41  [{'document_id': 4104676, 'similarity': 0.4560...
    34          34               0.454            39  [{'document_id': 3381921, 'similarity': 0.4536...
    35          35               0.519            38  [{'document_id': 2396304, 'similarity': 0.5194...
    36          36               0.450            37  [{'document_id': 322624, 'similarity': 0.45018...
    37          37               0.463            36  [{'document_id': 430336, 'similarity': 0.46321...
    38          38               0.494            35  [{'document_id': 2286144, 'similarity': 0.4942...
    39          39               0.453            35  [{'document_id': 4730625, 'similarity': 0.4527...
    40          40               0.534            34  [{'document_id': 680625, 'similarity': 0.53389...
    41          41               0.582            31  [{'document_id': 2096704, 'similarity': 0.5818...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/2f162e0156c6445e




|


.. code-block:: python


    import os.path
    import numpy as np
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])} \
                                   for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75 # filter out unfrequent / too frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                      if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                            n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              #'min_similarity': 0.95,
                              'branching_factor': 20 
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  10.509 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
