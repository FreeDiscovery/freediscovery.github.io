

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 825cb56f5fdc494b

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/825cb56f5fdc494b

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/825cb56f5fdc494b
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - parse_email_headers: False
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = ad0b2904df7142c6
      => SVD decomposition with 100 dimensions explaining 53.27 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = 40992260e17e42bb

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/40992260e17e42bb
        .. computed in 1.6s
       cluster_id                          cluster_label  cluster_similarity  cluster_size  n_documents
    0           0              conference ruppert hendry               0.371           225          225
    1           1                          nov fri enron               0.338           383          383
    2           2  enron_development transmission lessee               0.397           287          287
    3           3                 rewrite server address               1.000            56           56
    4           4                          sager tue nov               0.382           216          216
    5           5              dasovich deseret etringer               0.383           220          220
    6           6                  tana recipients group               0.340           469          469
    7           7                          wed oct tenet               0.382           242          242
    8           8               transaction price period               0.645            62           62
    9           9                        tue meeting ect               0.362           305          305

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 9c913063b54d4320

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/9c913063b54d4320
        .. computed in 2.7s
                                                 children  cluster_depth  cluster_id                      cluster_label  cluster_similarity  cluster_size  n_documents
    0               [1, 4, 6, 10, 14, 16, 33, 37, 39, 56]              0           0                       test ect oct               0.294          2465         2465
    1                                              [2, 3]              1           1           tiger deseret shackleton               0.439            88           88
    2                                                  []              2           2               lunch shackleton gdr               0.518            43           43
    3                                                  []              2           3             tiger deseret etringer               0.556            45           45
    4                                                 [5]              1           4             rewrite server address               0.864            68           68
    5                                                  []              2           5             rewrite server address               0.864            68           68
    6                                           [7, 8, 9]              1           6              party shall agreement               0.469           129          129
    7                                                  []              2           7                 hendry duke sample               0.490            21           21
    8                                                  []              2           8            party transaction shall               0.617            61           61
    9                                                  []              2           9           shall agreement customer               0.634            47           47
    10                                       [11, 12, 13]              1          10         energy transmission market               0.475           142          142
    11                                                 []              2          11           customer energy services               0.641            13           13
    12                                                 []              2          12                   serc tva foreign               0.512            64           64
    13                                                 []              2          13             energy services market               0.547            65           65
    14                                               [15]              1          14           townsend nemec gtownsend               0.732            15           15
    15                                                 []              2          15           townsend nemec gtownsend               0.732            15           15
    16  [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 2...              1          16                 sanders test teneo               0.317           785          785
    17                                                 []              2          17               marcelo tozzini week               0.539            52           52
    18                                                 []              2          18                    harris calo mtg               0.420            83           83
    19                                                 []              2          19         shackleton davidson brazil               0.478            38           38
    20                                                 []              2          20      enron_development cone advice               0.414            85           85
    21                                                 []              2          21                 load meet yosemite               0.529            39           39
    22                                                 []              2          22                 kean ruppert exxon               0.492            60           60
    23                                                 []              2          23                    lon forster ect               0.522            44           44
    24                                                 []              2          24    recipients administrative group               0.467            66           66
    25                                                 []              2          25             shackleton hendry duke               0.568             8            8
    26                                                 []              2          26                    tana jones load               0.480            35           35
    27                                                 []              2          27                   haedicke thu nov               0.591            60           60
    28                                                 []              2          28           catalytica dupre message               0.552            37           37
    29                                                 []              2          29                  sanders nov lunch               0.558            83           83
    ..                                                ...            ...         ...                                ...                 ...           ...          ...
    33                                       [34, 35, 36]              1          33                  nemec doc nicolay               0.439           121          121
    34                                                 []              2          34         nicolay sager interconnect               0.476            47           47
    35                                                 []              2          35                   nemec doc gallup               0.575            62           62
    36                                                 []              2          36                   thu neuner alias               0.524            12           12
    37                                               [38]              1          37  enron_development esa serralheiro               0.812            19           19
    38                                                 []              2          38  enron_development esa serralheiro               0.812            19           19
    39  [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 5...              1          39                        ect wed oct               0.311           886          886
    40                                                 []              2          40                      gtc ena enron               0.426            81           81
    41                                                 []              2          41                   tana jones enron               0.474            66           66
    42                                                 []              2          42                  berkeley haas edu               0.627            38           38
    43                                                 []              2          43            dasovich bruno gaillard               0.483            91           91
    44                                                 []              2          44           enrononline trade online               0.454            33           33
    45                                                 []              2          45                  shall lessee hyvl               0.431            94           94
    46                                                 []              2          46         wed tenet ricafrente_david               0.491            59           59
    47                                                 []              2          47                    dead horse pier               0.429            71           71
    48                                                 []              2          48                 wed oct conference               0.527            18           18
    49                                                 []              2          49             migration outlook team               0.512            48           48
    50                                                 []              2          50                      thu tenet nov               0.498            52           52
    51                                                 []              2          51                       load nov sun               0.590            12           12
    52                                                 []              2          52               ellis library doctor               0.618            24           24
    53                                                 []              2          53          ect hou enron_development               0.506            99           99
    54                                                 []              2          54        midamerican meeting roberts               0.431            32           32
    55                                                 []              2          55                  fri oct migration               0.486            68           68
    56                           [57, 58, 59, 60, 61, 62]              1          56                      tenet mon tue               0.387           212          212
    57                                                 []              2          57          conference ricafrente tue               0.478            24           24
    58                                                 []              2          58                      tue tenet oct               0.583            29           29
    59                                                 []              2          59              meeting kincannon mon               0.488            52           52
    60                                                 []              2          60                      mon tenet nov               0.527            47           47
    61                                                 []              2          61             eb3325 meet ricafrente               0.590            26           26
    62                                                 []              2          62                      tue tenet nov               0.513            34           34

    [63 rows x 7 columns]

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/9c913063b54d4320
        .. computed in 0.6s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.506            99  [{'document_id': 2030625, 'similarity': 0.5061...
    1            1               0.431            94  [{'document_id': 652864, 'similarity': 0.43146...
    2            2               0.483            91  [{'document_id': 511225, 'similarity': 0.48295...
    3            3               0.414            85  [{'document_id': 4145296, 'similarity': 0.4137...
    4            4               0.420            83  [{'document_id': 28561, 'similarity': 0.420115...
    5            5               0.558            83  [{'document_id': 3814209, 'similarity': 0.5576...
    6            6               0.426            81  [{'document_id': 168100, 'similarity': 0.42550...
    7            7               0.429            71  [{'document_id': 3496900, 'similarity': 0.4290...
    8            8               0.864            68  [{'document_id': 5041, 'similarity': 0.8637826...
    9            9               0.486            68  [{'document_id': 3069504, 'similarity': 0.4856...
    10          10               0.467            66  [{'document_id': 855625, 'similarity': 0.46726...
    11          11               0.474            66  [{'document_id': 2067844, 'similarity': 0.4741...
    12          12               0.547            65  [{'document_id': 207025, 'similarity': 0.54730...
    13          13               0.512            64  [{'document_id': 574564, 'similarity': 0.51203...
    14          14               0.575            62  [{'document_id': 616225, 'similarity': 0.57513...
    15          15               0.617            61  [{'document_id': 599076, 'similarity': 0.61700...
    16          16               0.492            60  [{'document_id': 1664100, 'similarity': 0.4924...
    17          17               0.591            60  [{'document_id': 2992900, 'similarity': 0.5908...
    18          18               0.491            59  [{'document_id': 2340900, 'similarity': 0.4914...
    19          19               0.539            52  [{'document_id': 99856, 'similarity': 0.538979...
    20          20               0.463            52  [{'document_id': 4879681, 'similarity': 0.4633...
    21          21               0.498            52  [{'document_id': 3587236, 'similarity': 0.4979...
    22          22               0.488            52  [{'document_id': 2634129, 'similarity': 0.4884...
    23          23               0.512            48  [{'document_id': 5499025, 'similarity': 0.5117...
    24          24               0.634            47  [{'document_id': 1495729, 'similarity': 0.6335...
    25          25               0.476            47  [{'document_id': 5764801, 'similarity': 0.4756...
    26          26               0.527            47  [{'document_id': 3080025, 'similarity': 0.5268...
    27          27               0.556            45  [{'document_id': 17424, 'similarity': 0.556436...
    28          28               0.522            44  [{'document_id': 3678724, 'similarity': 0.5219...
    29          29               0.518            43  [{'document_id': 123201, 'similarity': 0.51781...
    30          30               0.529            39  [{'document_id': 844561, 'similarity': 0.52903...
    31          31               0.478            38  [{'document_id': 42436, 'similarity': 0.478118...
    32          32               0.627            38  [{'document_id': 403225, 'similarity': 0.62705...
    33          33               0.552            37  [{'document_id': 4955076, 'similarity': 0.5515...
    34          34               0.480            35  [{'document_id': 237169, 'similarity': 0.47986...
    35          35               0.513            34  [{'document_id': 3171961, 'similarity': 0.5133...
    36          36               0.454            33  [{'document_id': 781456, 'similarity': 0.45359...
    37          37               0.431            32  [{'document_id': 1435204, 'similarity': 0.4308...
    38          38               0.583            29  [{'document_id': 6031936, 'similarity': 0.5825...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/825cb56f5fdc494b




|


.. code-block:: python


    import os.path
    import numpy as np
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])} \
                                   for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75 # filter out unfrequent / too frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                      if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                            n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              #'min_similarity': 0.95,
                              'branching_factor': 20 
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.461 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
