

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 4c1c007327034ef7

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/4c1c007327034ef7

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/4c1c007327034ef7
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: /home/ubuntu/freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - parse_email_headers: False
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 6f610d0f765c40a0
      => SVD decomposition with 100 dimensions explaining 53.27 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = a8aa3fb82f504601

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/a8aa3fb82f504601
        .. computed in 1.1s
       cluster_id                    cluster_label  cluster_similarity  cluster_size  n_documents
    0           0  teneo recipients administrative               0.302           241          241
    1           1             fri conference tenet               0.236           322          322
    2           2                     mon oct lyco               0.230           296          296
    3           3                ect hou kincannon               0.274           260          260
    4           4                thu lunch sanders               0.300           210          210
    5           5           rewrite server address               1.000            56           56
    6           6            tue eb3325 ricafrente               0.258           275          275
    7           7              berkeley haas alias               0.274           377          377
    8           8             shall agreement test               0.243           320          320
    9           9           migration outlook team               0.471           108          108

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 823faeb9def94b00

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/823faeb9def94b00
        .. computed in 2.2s
                                                 children  cluster_depth  cluster_id                      cluster_label  cluster_similarity  cluster_size  n_documents
    0                                       [1, 3, 9, 16]              0           0                       test ect oct               0.109          2465         2465
    1                                                 [2]              1           1             rewrite server address               0.934            60           60
    2                                                  []              2           2             rewrite server address               0.934            60           60
    3                                     [4, 5, 6, 7, 8]              1           3          enrononline tenet meeting               0.246           326          326
    4                                                  []              2           4                 foreign brazil tax               0.545            60           60
    5                                                  []              2           5             dasovich davidson dead               0.357            51           51
    6                                                  []              2           6               lessee meeting shall               0.320            93           93
    7                                                  []              2           7           enrononline enron online               0.426            54           54
    8                                                  []              2           8         energy transmission market               0.438            68           68
    9                            [10, 11, 12, 13, 14, 15]              1           9  enron_development test shackleton               0.220           350          350
    10                                                 []              2          10     test recipients administrative               0.408            91           91
    11                                                 []              2          11      enron_development cone issues               0.544            60           60
    12                                                 []              2          12               marcelo tozzini afac               0.561            56           56
    13                                                 []              2          13              shackleton load south               0.480            37           37
    14                                                 []              2          14                   load room budget               0.363            65           65
    15                                                 []              2          15                   cini isda freyre               0.442            41           41
    16  [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 2...              1          16                       ect test oct               0.118          1729         1729
    17                                                 []              2          17                   kean mtg deseret               0.327           129          129
    18                                                 []              2          18              party shall agreement               0.460           104          104
    19                                                 []              2          19                   nemec doc gallup               0.510            57           57
    20                                                 []              2          20              dasovich nemec master               0.320           106          106
    21                                                 []              2          21                   jones tana enron               0.417           107          107
    22                                                 []              2          22              midamerican nov sweet               0.343            73           73
    23                                                 []              2          23                       thu test oct               0.368            58           58
    24                                                 []              2          24              tiger neuner guaranty               0.317           106          106
    25                                                 []              2          25                    lunch thu tenet               0.381            85           85
    26                                                 []              2          26                     ect hou harris               0.408           121          121
    27                                                 []              2          27           ellis ruppert catalytica               0.342           102          102
    28                                                 []              2          28               haedicke power class               0.425            81           81
    29                                                 []              2          29                    sanders nov tue               0.525            92           92
    30                                                 []              2          30      enron_development gdr bennett               0.393            57           57
    31                                                 []              2          31                    bump hyvl yates               0.522            49           49
    32                                                 []              2          32                    eb3325 meet tue               0.327           128          128
    33                                                 []              2          33                        wed mon oct               0.342           121          121
    34                                                 []              2          34           kincannon shults meeting               0.438            42           42
    35                                                 []              2          35              fri migration outlook               0.377           111          111

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/823faeb9def94b00
        .. computed in 0.4s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.327           129  [{'document_id': 5285401, 'similarity': 0.3273...
    1            1               0.327           128  [{'document_id': 2464900, 'similarity': 0.3270...
    2            2               0.408           121  [{'document_id': 233289, 'similarity': 0.40776...
    3            3               0.342           121  [{'document_id': 2319529, 'similarity': 0.3415...
    4            4               0.377           111  [{'document_id': 5798464, 'similarity': 0.3765...
    5            5               0.417           107  [{'document_id': 1993744, 'similarity': 0.4169...
    6            6               0.320           106  [{'document_id': 446224, 'similarity': 0.31989...
    7            7               0.317           106  [{'document_id': 4473225, 'similarity': 0.3166...
    8            8               0.460           104  [{'document_id': 599076, 'similarity': 0.46012...
    9            9               0.342           102  [{'document_id': 1713481, 'similarity': 0.3418...
    10          10               0.320            93  [{'document_id': 295936, 'similarity': 0.32014...
    11          11               0.525            92  [{'document_id': 3814209, 'similarity': 0.5248...
    12          12               0.408            91  [{'document_id': 855625, 'similarity': 0.40819...
    13          13               0.381            85  [{'document_id': 1605289, 'similarity': 0.3812...
    14          14               0.425            81  [{'document_id': 2842596, 'similarity': 0.4249...
    15          15               0.343            73  [{'document_id': 3861225, 'similarity': 0.3430...
    16          16               0.438            68  [{'document_id': 207025, 'similarity': 0.43791...
    17          17               0.363            65  [{'document_id': 1179396, 'similarity': 0.3629...
    18          18               0.934            60  [{'document_id': 5041, 'similarity': 0.9343021...
    19          19               0.545            60  [{'document_id': 4624, 'similarity': 0.5453090...
    20          20               0.544            60  [{'document_id': 900, 'similarity': 0.54425432...
    21          21               0.368            58  [{'document_id': 1752976, 'similarity': 0.3675...
    22          22               0.510            57  [{'document_id': 790321, 'similarity': 0.50978...
    23          23               0.393            57  [{'document_id': 5053504, 'similarity': 0.3934...
    24          24               0.561            56  [{'document_id': 99856, 'similarity': 0.560965...
    25          25               0.426            54  [{'document_id': 3579664, 'similarity': 0.4260...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/4c1c007327034ef7




|


.. code-block:: python


    import os.path
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])}
                          for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75  # filter out (too)/(un)frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items()
                     if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print(('  => SVD decomposition with {} dimensions '
           'explaining {:.2f} % variabilty of the data')
          .format(n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              'min_similarity': 0.7,
                              'branching_factor': 20
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  6.963 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
