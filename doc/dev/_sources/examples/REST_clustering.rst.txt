

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 4e44bec340b84101

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/4e44bec340b84101

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/4e44bec340b84101
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 96a0f31afaea4fff
      => SVD decomposition with 100 dimensions explaining 53.26 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = 5571fab0bf954db0

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/5571fab0bf954db0
        .. computed in 1.6s
       cluster_id                       cluster_label  cluster_similarity  cluster_size  n_documents
    0           0    thu enron_development shackleton               0.330           484          484
    1           1               wed migration outlook               0.362           346          346
    2           2               berkeley deseret haas               0.346           399          399
    3           3                   meeting tue tenet               0.390           233          233
    4           4              rewrite server address               1.000            56           56
    5           5             transaction party price               0.591            79           79
    6           6                       ect hou ellis               0.578            81           81
    7           7                 energy services mon               0.348           363          363
    8           8  eb3325 ricafrente ricafrente_david               0.483           112          112
    9           9               jones tana recipients               0.365           312          312

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 6a17bf3abafa49e0

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/6a17bf3abafa49e0
        .. computed in 2.8s
                                                 children  cluster_depth  cluster_id                       cluster_label  cluster_similarity  cluster_size  n_documents
    0                                  [1, 3, 15, 21, 42]              0           0                        test ect oct               0.294          2465         2465
    1                                                 [2]              1           1              rewrite server address               0.700            91           91
    2                                                  []              2           2              rewrite server address               0.700            91           91
    3              [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]              1           3                  load haedicke test               0.337           458          458
    4                                                  []              2           4                  haedicke ellis ect               0.432            61           61
    5                                                  []              2           5      test recipients administrative               0.521            64           64
    6                                                  []              2           6                   ellis gtc library               0.562            22           22
    7                                                  []              2           7                  tana jones nicolay               0.518            22           22
    8                                                  []              2           8               kean deseret etringer               0.495            39           39
    9                                                  []              2           9                  tana jones trading               0.452            71           71
    10                                                 []              2          10                    haedicke thu nov               0.541            39           39
    11                                                 []              2          11                  load yosemite meet               0.532            25           25
    12                                                 []              2          12           class forster taylor_mark               0.462            45           45
    13                                                 []              2          13                   fri load haedicke               0.459            38           38
    14                                                 []              2          14                        calo nov mon               0.417            32           32
    15                               [16, 17, 18, 19, 20]              1          15               tiger conference test               0.370           145          145
    16                                                 []              2          16                rcr dernehl dasovich               0.461            60           60
    17                                                 []              2          17           conference shackleton fri               0.507            17           17
    18                                                 []              2          18                tiger guaranty sekse               0.583            35           35
    19                                                 []              2          19                      thu kean lunch               0.481            17           17
    20                                                 []              2          20                    hendry aven week               0.519            16           16
    21  [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 3...              1          21                   enron tenet nemec               0.317           896          896
    22                                                 []              2          22                       serc tva nerc               0.495            63           63
    23                                                 []              2          23                     mtg trade tenet               0.448            49           49
    24                                                 []              2          24             transaction party price               0.576            80           80
    25                                                 []              2          25                   dasovich wed load               0.511            52           52
    26                                                 []              2          26                  customer shall ena               0.509            68           68
    27                                                 []              2          27                     bump hyvl yates               0.538            45           45
    28                                                 []              2          28             nemec ruppert gillaspie               0.493            76           76
    29                                                 []              2          29            energy enrononline power               0.493            72           72
    30                                                 []              2          30              deseret etringer flynn               0.441            46           46
    31                                                 []              2          31                   meeting fri tenet               0.569            26           26
    32                                                 []              2          32                     enron urine cat               0.442            34           34
    33                                                 []              2          33                   mon meeting tenet               0.464            58           58
    34                                                 []              2          34      conference midamerican roberts               0.434            41           41
    35                                                 []              2          35                       tue oct tenet               0.525            24           24
    36                                                 []              2          36                    enron tana jones               0.593            34           34
    37                                                 []              2          37                 lessee shall lessor               0.748            31           31
    38                                                 []              2          38                guaranty rod formosa               0.586            15           15
    39                                                 []              2          39                       tue tenet mtg               0.560            22           22
    40                                                 []              2          40                advice update mexico               0.633            25           25
    41                                                 []              2          41                   tenet meeting tue               0.471            35           35
    42  [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 5...              1          42       ect sanders enron_development               0.311           875          875
    43                                                 []              2          43                        ect hou calo               0.489            82           82
    44                                                 []              2          44                otc cftc derivatives               0.497            35           35
    45                                                 []              2          45                 alias berkeley haas               0.429           106          106
    46                                                 []              2          46                       lon ect lunch               0.484            26           26
    47                                                 []              2          47                       nov wed tenet               0.502            34           34
    48                                                 []              2          48   kincannon catalytica confirmation               0.441            57           57
    49                                                 []              2          49  ricafrente ricafrente_david eb3325               0.541            63           63
    50                                                 []              2          50                     sanders nov thu               0.553            77           77
    51                                                 []              2          51       enron_development cone hendry               0.511            73           73
    52                                                 []              2          52                    eb3325 tenet wed               0.486            27           27
    53                                                 []              2          53                      mon lyco tenet               0.480            32           32
    54                                                 []              2          54                     gtc master usvi               0.465            56           56
    55                                                 []              2          55                      doc dead horse               0.571            23           23
    56                                                 []              2          56                 wed tenet breakfast               0.481            50           50
    57                                                 []              2          57        teneo shackleton_sara bailey               0.439            48           48
    58                                                 []              2          58                       thu tenet oct               0.485            32           32
    59                                                 []              2          59              migration outlook team               0.633            54           54

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/6a17bf3abafa49e0
        .. computed in 0.6s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.429           106  [{'document_id': 1296, 'similarity': 0.4294199...
    1            1               0.700            91  [{'document_id': 5041, 'similarity': 0.6999143...
    2            2               0.489            82  [{'document_id': 2030625, 'similarity': 0.4886...
    3            3               0.576            80  [{'document_id': 73441, 'similarity': 0.576497...
    4            4               0.553            77  [{'document_id': 3814209, 'similarity': 0.5533...
    5            5               0.493            76  [{'document_id': 633616, 'similarity': 0.49321...
    6            6               0.511            73  [{'document_id': 900, 'similarity': 0.51097173...
    7            7               0.493            72  [{'document_id': 142884, 'similarity': 0.49289...
    8            8               0.452            71  [{'document_id': 247009, 'similarity': 0.45237...
    9            9               0.509            68  [{'document_id': 609961, 'similarity': 0.50926...
    10          10               0.521            64  [{'document_id': 855625, 'similarity': 0.52056...
    11          11               0.495            63  [{'document_id': 552049, 'similarity': 0.49519...
    12          12               0.541            63  [{'document_id': 2778889, 'similarity': 0.5413...
    13          13               0.432            61  [{'document_id': 13225, 'similarity': 0.432449...
    14          14               0.461            60  [{'document_id': 502681, 'similarity': 0.46122...
    15          15               0.464            58  [{'document_id': 2253001, 'similarity': 0.4639...
    16          16               0.441            57  [{'document_id': 4955076, 'similarity': 0.4411...
    17          17               0.465            56  [{'document_id': 3651921, 'similarity': 0.4653...
    18          18               0.633            54  [{'document_id': 5326864, 'similarity': 0.6332...
    19          19               0.511            52  [{'document_id': 349281, 'similarity': 0.51130...
    20          20               0.481            50  [{'document_id': 3455881, 'similarity': 0.4814...
    21          21               0.448            49  [{'document_id': 5673924, 'similarity': 0.4478...
    22          22               0.439            48  [{'document_id': 4682896, 'similarity': 0.4390...
    23          23               0.441            46  [{'document_id': 4734976, 'similarity': 0.4407...
    24          24               0.462            45  [{'document_id': 3709476, 'similarity': 0.4620...
    25          25               0.538            45  [{'document_id': 300304, 'similarity': 0.53822...
    26          26               0.434            41  [{'document_id': 874225, 'similarity': 0.43449...
    27          27               0.495            39  [{'document_id': 137641, 'similarity': 0.49523...
    28          28               0.541            39  [{'document_id': 2913849, 'similarity': 0.5411...
    29          29               0.459            38  [{'document_id': 846400, 'similarity': 0.45850...
    30          30               0.583            35  [{'document_id': 22500, 'similarity': 0.582916...
    31          31               0.471            35  [{'document_id': 3549456, 'similarity': 0.4714...
    32          32               0.497            35  [{'document_id': 1288225, 'similarity': 0.4965...
    33          33               0.442            34  [{'document_id': 481636, 'similarity': 0.44196...
    34          34               0.593            34  [{'document_id': 1968409, 'similarity': 0.5931...
    35          35               0.502            34  [{'document_id': 2334784, 'similarity': 0.5017...
    36          36               0.417            32  [{'document_id': 61504, 'similarity': 0.417324...
    37          37               0.480            32  [{'document_id': 3104644, 'similarity': 0.4803...
    38          38               0.485            32  [{'document_id': 2223081, 'similarity': 0.4849...
    39          39               0.748            31  [{'document_id': 295936, 'similarity': 0.74819...
    40          40               0.486            27  [{'document_id': 3034564, 'similarity': 0.4859...
    41          41               0.569            26  [{'document_id': 3052009, 'similarity': 0.5689...
    42          42               0.484            26  [{'document_id': 3553225, 'similarity': 0.4838...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/4e44bec340b84101




|


.. code-block:: python


    import os.path
    import numpy as np
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])} \
                                   for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75 # filter out unfrequent / too frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                      if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                            n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              #'min_similarity': 0.95,
                              'branching_factor': 20 
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.710 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
