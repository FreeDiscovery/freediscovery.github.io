

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 4ea6dc42f7de407e

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/4ea6dc42f7de407e

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/4ea6dc42f7de407e
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: /home/ubuntu/freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 1.0
         - min_df: 0.0
         - n_features: 100001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - parse_email_headers: False
         - stop_words: english
         - sublinear_tf: False
         - use_hashing: False
         - use_idf: False

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 679d35d46d5c4549
      => SVD decomposition with 300 dimensions explaining 87.16 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = ca104d15abf04b6c

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/ca104d15abf04b6c
        .. computed in 1.3s
       cluster_id                        cluster_label  cluster_similarity  cluster_size  n_documents
    0           0                haedicke shall office               0.120           408          408
    1           1       test recipients administrative               0.254           179          179
    2           2                     tenet thu normal               0.204           287          287
    3           3                      meet eb3325 wed               0.274           178          178
    4           4  enron_development migration outlook               0.271           176          176
    5           5            teneo test administrative               0.251           182          182
    6           6               rewrite address server               1.000            56           56
    7           7                       tue normal oct               0.247           202          202
    8           8                   ect hou translated               0.605            60           60
    9           9                   jones tana subject               0.088           737          737

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 44ed94f90e3440fe

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/44ed94f90e3440fe
        .. computed in 2.2s
                                                 children  cluster_depth  cluster_id                             cluster_label  cluster_similarity  cluster_size  n_documents
    0                              [1, 4, 7, 10, 13, 104]              0           0                           normal test ect               0.074          2465         2465
    1                                                 [2]              1           1                    rewrite address server               0.746            76           76
    2                                                  []              2           2                    rewrite address server               0.746            76           76
    3                                                 [5]              1           4                       size master maximum               1.000             1            1
    4                                                  []              2           5                       size master maximum               1.000             1            1
    5                                                 [8]              1           7                      advice update mexico               0.706            15           15
    6                                                  []              2           8                      advice update mexico               0.706            15           15
    7                                                [11]              1          10                            master eta gtc               0.549            16           16
    8                                                  []              2          11                            master eta gtc               0.549            16           16
    9   [14, 20, 23, 28, 34, 36, 38, 43, 47, 49, 51, 5...              1          13                           normal test ect               0.073          2288         2288
    10                                                 []              2          14                           jones test tana               0.312           119          119
    11                                                 []              2          20               calo performance management               0.426            34           34
    12                                                 []              2          23                              ect hou swap               0.259           169          169
    13                                                 []              2          28                         test normal teneo               0.319           132          132
    14                                                 []              2          34                     services energy awais               0.479            23           23
    15                                                 []              2          36              counterparty shackleton cini               0.466            13           13
    16                                                 []              2          38                  shackleton deseret class               0.238           128          128
    17                                                 []              2          43                    dasovich lessee lessor               0.218           102          102
    18                                                 []              2          47                 attorney harris brokerage               0.472            30           30
    19                                                 []              2          49               sentence interconnect court               0.478            15           15
    20                                                 []              2          51             nemec teneo enron_development               0.183           207          207
    21                                                 []              2          56                          enron jones tana               0.439            44           44
    22                                                 []              2          60                         tenet normal test               0.222           334          334
    23                                                 []              2          70                  enrononline credit enron               0.314            40           40
    24                                                 []              2          73  shackleton_sara enron_development issues               0.289            90           90
    25                                                 []              2          77                 date account confirmation               0.389            27           27
    26                                                 []              2          79                 haedicke normal kincannon               0.143           297          297
    27                                                 []              2          88                    migration outlook team               0.113           484          484
    28                                    [105, 107, 109]              1         104                       eb3325 sanders meet               0.318            69           69
    29                                                 []              2         105                    eb3325 meet ricafrente               0.498            29           29
    30                                                 []              2         107                      mtg budget migration               0.514            12           12
    31                                                 []              2         109                        sanders normal nov               0.506            28           28

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/44ed94f90e3440fe
        .. computed in 0.1s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0           24               0.439            86  [{'document_id': 2030625, 'similarity': 0.8653...
    1           52               0.304            81  [{'document_id': 1585081, 'similarity': 0.6295...
    2            3               0.746            76  [{'document_id': 5041, 'similarity': 0.9878741...
    3           65               0.319            72  [{'document_id': 1893376, 'similarity': 0.5568...
    4           39               0.320            71  [{'document_id': 61504, 'similarity': 0.461813...
    5           64               0.400            60  [{'document_id': 2316484, 'similarity': 0.6574...
    6           91               0.372            59  [{'document_id': 99225, 'similarity': 0.558049...
    7           82               0.332            54  [{'document_id': 54756, 'similarity': 0.496590...
    8          100               0.352            53  [{'document_id': 5452225, 'similarity': 0.7293...
    9           86               0.334            51  [{'document_id': 2611456, 'similarity': 0.5721...
    10          74               0.403            49  [{'document_id': 4165681, 'similarity': 0.7023...
    11          53               0.392            48  [{'document_id': 1664100, 'similarity': 0.6294...
    12          19               0.513            47  [{'document_id': 855625, 'similarity': 0.88945...
    13          54               0.346            47  [{'document_id': 133956, 'similarity': 0.68031...
    14          84               0.431            47  [{'document_id': 4665600, 'similarity': 0.6902...
    15          97               0.375            47  [{'document_id': 145924, 'similarity': 0.71046...
    16          85               0.376            46  [{'document_id': 2920681, 'similarity': 0.6073...
    17          93               0.293            45  [{'document_id': 3115225, 'similarity': 0.6093...
    18          44               0.337            42  [{'document_id': 583696, 'similarity': 0.71123...
    19         103               0.565            39  [{'document_id': 5612161, 'similarity': 0.7317...
    20          45               0.292            38  [{'document_id': 1216609, 'similarity': 0.4719...
    21          33               0.520            37  [{'document_id': 358801, 'similarity': 0.63728...
    22          69               0.430            37  [{'document_id': 3294225, 'similarity': 0.6576...
    23          67               0.432            36  [{'document_id': 2399401, 'similarity': 0.7740...
    24          80               0.331            34  [{'document_id': 3254416, 'similarity': 0.5643...
    25          89               0.330            34  [{'document_id': 906304, 'similarity': 0.52667...
    26          81               0.336            33  [{'document_id': 1162084, 'similarity': 0.6003...
    27          76               0.451            32  [{'document_id': 4787344, 'similarity': 0.7007...
    28          40               0.417            31  [{'document_id': 60516, 'similarity': 0.695844...
    29          55               0.318            31  [{'document_id': 1210000, 'similarity': 0.5103...
    30          61               0.385            31  [{'document_id': 3587236, 'similarity': 0.6626...
    31          63               0.455            31  [{'document_id': 2883204, 'similarity': 0.7551...
    32          68               0.412            31  [{'document_id': 3374569, 'similarity': 0.5754...
    33          26               0.427            30  [{'document_id': 79524, 'similarity': 0.782820...
    34          48               0.472            30  [{'document_id': 28561, 'similarity': 0.722100...
    35         101               0.368            30  [{'document_id': 2537649, 'similarity': 0.5975...
    36          25               0.396            29  [{'document_id': 698896, 'similarity': 0.63659...
    37         106               0.498            29  [{'document_id': 2903616, 'similarity': 0.6059...
    38          92               0.367            28  [{'document_id': 297025, 'similarity': 0.55756...
    39         110               0.506            28  [{'document_id': 3802500, 'similarity': 0.6924...
    40          16               0.402            27  [{'document_id': 215296, 'similarity': 0.59335...
    41          78               0.389            27  [{'document_id': 116964, 'similarity': 0.64961...
    42          94               0.338            27  [{'document_id': 320356, 'similarity': 0.55741...
    43          31               0.406            26  [{'document_id': 362404, 'similarity': 0.78447...
    44          90               0.318            26  [{'document_id': 136161, 'similarity': 0.49423...
    45          72               0.440            25  [{'document_id': 7569, 'similarity': 0.6202856...
    46          27               0.322            24  [{'document_id': 1399489, 'similarity': 0.5767...
    47          30               0.525            24  [{'document_id': 1317904, 'similarity': 0.6995...
    48          95               0.350            24  [{'document_id': 487204, 'similarity': 0.53542...
    49          32               0.496            23  [{'document_id': 370881, 'similarity': 0.59661...
    50          35               0.479            23  [{'document_id': 206116, 'similarity': 0.72120...
    51          58               0.468            23  [{'document_id': 1982464, 'similarity': 0.5835...
    52          99               0.338            23  [{'document_id': 5193841, 'similarity': 0.5322...
    53          29               0.451            22  [{'document_id': 223729, 'similarity': 0.58732...
    54          46               0.516            22  [{'document_id': 714025, 'similarity': 0.87979...
    55          66               0.403            22  [{'document_id': 1361889, 'similarity': 0.5710...
    56          17               0.397            20  [{'document_id': 281961, 'similarity': 0.65070...
    57          59               0.517            20  [{'document_id': 1962801, 'similarity': 0.7979...
    58          96               0.290            20  [{'document_id': 3538161, 'similarity': 0.4198...
    59          83               0.441            19  [{'document_id': 2461761, 'similarity': 0.6384...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/4ea6dc42f7de407e




|


.. code-block:: python


    import os.path
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])}
                          for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {  # 'min_df': 4, 'max_df': 0.75  # filter out (too)/(un)frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url, json={'dataset_definition': dataset_definition})

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items()
                     if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 300
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print(('  => SVD decomposition with {} dimensions '
           'explaining {:.2f} % variabilty of the data')
          .format(n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              'min_similarity': 0.7,
                              'branching_factor': 20,
                              'max_tree_depth': 2,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  10.835 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
