

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 609376f04d3b461a

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/609376f04d3b461a

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/609376f04d3b461a
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: /home/ubuntu/freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 1.0
         - min_df: 0.0
         - n_features: 100001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - parse_email_headers: False
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: False

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = d8e8ee3edf0a48d0
      => SVD decomposition with 300 dimensions explaining 90.00 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = 9b7789e8dfe54cb6

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/9b7789e8dfe54cb6
        .. computed in 1.4s
       cluster_id                  cluster_label  cluster_similarity  cluster_size  n_documents
    0           0         rewrite address server               1.000            56           56
    1           1                 wed test group               0.169           331          331
    2           2              enron ect outlook               0.146           306          306
    3           3        shall party transaction               0.331           138          138
    4           4               mon normal tenet               0.261           176          176
    5           5                  rmt swap corp               0.710            21           21
    6           6  enron_development group tiger               0.085           815          815
    7           7                eb3325 thu meet               0.238           179          179
    8           8                 tue normal nov               0.199           255          255
    9           9                 tue normal oct               0.213           188          188

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 56133dce76f74da1

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/56133dce76f74da1
        .. computed in 3.2s
                                                  children  cluster_depth  cluster_id                     cluster_label  cluster_similarity  cluster_size  n_documents
    0    [1, 3, 6, 14, 16, 22, 30, 33, 35, 39, 41, 47, ...              0           0                   normal test ect               0.071          2465         2465
    1                                                  [2]              1           1            rewrite address server               0.663            86           86
    2                                                   []              2           2            rewrite address server               0.663            86           86
    3                                               [4, 5]              1           3           jones tana presentation               0.289            56           56
    4                                                   []              2           4           jones tana presentation               0.323            43           43
    5                                                   []              2           5             tana mitsubishi tokyo               0.497            13           13
    6                            [7, 8, 9, 10, 11, 12, 13]              1           6                 load teneo normal               0.241           177          177
    7                                                   []              2           7           class shackleton credit               0.330            31           31
    8                                                   []              2           8              shackleton load test               0.439            31           31
    9                                                   []              2           9          financial trade approved               0.338            20           20
    10                                                  []              2          10   performance password management               0.354            17           17
    11                                                  []              2          11           houston london electric               0.721             6            6
    12                                                  []              2          12                 load teneo normal               0.498            40           40
    13                                                  []              2          13                  teneo oct normal               0.576            32           32
    14                                                [15]              1          14                  new shonnie bump               0.457            15           15
    15                                                  []              2          15                  new shonnie bump               0.457            15           15
    16                                [17, 18, 19, 20, 21]              1          16         ect hou enron_development               0.229           174          174
    17                                                  []              2          17     enron_development issues cone               0.398            43           43
    18                                                  []              2          18                     ect hou ellis               0.444            69           69
    19                                                  []              2          19        transactions forster clair               0.354            14           14
    20                                                  []              2          20           rate lunch unemployment               0.431            18           18
    21                                                  []              2          21             year argentina really               0.367            30           30
    22                        [23, 24, 25, 26, 27, 28, 29]              1          22             sanders haedicke test               0.220           163          163
    23                                                  []              2          23               customer lay stress               0.422            12           12
    24                                                  []              2          24               haedicke rob normal               0.387            29           29
    25                                                  []              2          25        sample agreements malowney               0.438            19           19
    26                                                  []              2          26                sanders oct normal               0.525            23           23
    27                                                  []              2          27          enrononline rcr internet               0.532            15           15
    28                                                  []              2          28               test bruno gaillard               0.469            21           21
    29                                                  []              2          29                sanders nov normal               0.418            44           44
    ..                                                 ...            ...         ...                               ...                 ...           ...          ...
    73                                                  []              2          73            enron attorney america               0.415            16           16
    74                                                  []              2          74                   hyvl bump heard               0.389            19           19
    75                                                  []              2          75            master services energy               0.393            35           35
    76                                                  []              2          76                 credit mtm rating               0.467            17           17
    77                                                  []              2          77              message milbank usvi               0.350            38           38
    78                                                  []              2          78     midamerican performance clair               0.396            20           20
    79                                                  []              2          79           teneo sager taylor_mark               0.349            28           28
    80                                                  []              2          80             calo tozzini november               0.295            81           81
    81                                                  []              2          81                sweet twanda month               0.318            36           36
    82                                                  []              2          82                neuner virus heard               0.641             3            3
    83                                                  []              2          83       shackleton_sara teneo class               0.403            13           13
    84                                                  []              2          84            migration outlook form               0.308            41           41
    85                                                  []              2          85  shackleton_sara teneo shackleton               0.366            34           34
    86                                                  []              2          86                 trade harris list               0.607             5            5
    87                                                  []              2          87            dupre black catalytica               1.000             1            1
    88                                                  []              2          88            migration outlook team               0.542            21           21
    89                                                  []              2          89            outlook team migration               0.496            25           25
    90                                                [91]              1          90          training midland seminar               0.569             8            8
    91                                                  []              2          91          training midland seminar               0.569             8            8
    92         [93, 94, 95, 96, 97, 98, 99, 100, 101, 102]              1          92               isda tiger dasovich               0.124           267          267
    93                                                  []              2          93             energy twanda roberts               0.365            18           18
    94                                                  []              2          94              isda flynn agreement               0.374            29           29
    95                                                  []              2          95         dasovich deseret etringer               0.345            42           42
    96                                                  []              2          96            sampling dead campbell               0.336            29           29
    97                                                  []              2          97          isda public confirmation               0.331            43           43
    98                                                  []              2          98             enrononline urine cat               0.340            27           27
    99                                                  []              2          99             tiger guaranty bailey               0.437            25           25
    100                                                 []              2         100               team outlook credit               0.246            25           25
    101                                                 []              2         101   sentence interconnect agreement               0.403            20           20
    102                                                 []              2         102                 ellis rob trading               0.367             9            9

    [103 rows x 7 columns]

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/56133dce76f74da1
        .. computed in 0.3s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0           72               0.357            89  [{'document_id': 168921, 'similarity': 0.71027...
    1            2               0.663            86  [{'document_id': 5041, 'similarity': 0.9825211...
    2           80               0.295            81  [{'document_id': 17161, 'similarity': 0.500484...
    3           36               0.422            78  [{'document_id': 293764, 'similarity': 0.70041...
    4           18               0.444            69  [{'document_id': 11236, 'similarity': 0.793095...
    5           38               0.301            59  [{'document_id': 3381921, 'similarity': 0.5116...
    6           67               0.431            56  [{'document_id': 2869636, 'similarity': 0.6017...
    7           56               0.320            55  [{'document_id': 3455881, 'similarity': 0.5732...
    8           65               0.315            53  [{'document_id': 756900, 'similarity': 0.53706...
    9           31               0.301            47  [{'document_id': 154449, 'similarity': 0.64562...
    10          53               0.298            47  [{'document_id': 2337841, 'similarity': 0.5834...
    11          71               0.379            47  [{'document_id': 79524, 'similarity': 0.587644...
    12          29               0.418            44  [{'document_id': 4028049, 'similarity': 0.5911...
    13           4               0.323            43  [{'document_id': 211600, 'similarity': 0.57779...
    14          17               0.398            43  [{'document_id': 131769, 'similarity': 0.79631...
    15          97               0.331            43  [{'document_id': 48841, 'similarity': 0.580136...
    16          95               0.345            42  [{'document_id': 430336, 'similarity': 0.55933...
    17          84               0.308            41  [{'document_id': 5480281, 'similarity': 0.5579...
    18          12               0.498            40  [{'document_id': 835396, 'similarity': 0.61944...
    19          32               0.453            39  [{'document_id': 855625, 'similarity': 0.75432...
    20          69               0.337            39  [{'document_id': 2647129, 'similarity': 0.6721...
    21          77               0.350            38  [{'document_id': 1232100, 'similarity': 0.5444...
    22          37               0.324            37  [{'document_id': 524176, 'similarity': 0.53474...
    23          81               0.318            36  [{'document_id': 4456321, 'similarity': 0.5402...
    24          75               0.393            35  [{'document_id': 1100401, 'similarity': 0.6551...
    25          61               0.371            34  [{'document_id': 3587236, 'similarity': 0.5577...
    26          85               0.366            34  [{'document_id': 5013121, 'similarity': 0.5732...
    27          63               0.495            33  [{'document_id': 16, 'similarity': 0.704076392...
    28          66               0.329            33  [{'document_id': 2402500, 'similarity': 0.5938...
    29          13               0.576            32  [{'document_id': 358801, 'similarity': 0.71374...
    ..         ...                 ...           ...                                                ...
    32          46               0.410            31  [{'document_id': 2076481, 'similarity': 0.7338...
    33          21               0.367            30  [{'document_id': 393129, 'similarity': 0.57834...
    34          55               0.414            30  [{'document_id': 1737124, 'similarity': 0.6263...
    35          58               0.456            30  [{'document_id': 3880900, 'similarity': 0.6416...
    36          59               0.397            30  [{'document_id': 2250000, 'similarity': 0.6429...
    37          24               0.387            29  [{'document_id': 2968729, 'similarity': 0.5722...
    38          60               0.430            29  [{'document_id': 3097600, 'similarity': 0.8008...
    39          94               0.374            29  [{'document_id': 202500, 'similarity': 0.56269...
    40          96               0.336            29  [{'document_id': 904401, 'similarity': 0.59121...
    41          79               0.349            28  [{'document_id': 1809025, 'similarity': 0.5484...
    42          98               0.340            27  [{'document_id': 3367225, 'similarity': 0.6299...
    43          89               0.496            25  [{'document_id': 5560164, 'similarity': 0.6777...
    44          99               0.437            25  [{'document_id': 4524129, 'similarity': 0.8017...
    45         100               0.246            25  [{'document_id': 5377761, 'similarity': 0.3730...
    46          57               0.426            24  [{'document_id': 1827904, 'similarity': 0.6732...
    47          26               0.525            23  [{'document_id': 1317904, 'similarity': 0.7482...
    48          50               0.496            22  [{'document_id': 28561, 'similarity': 0.843814...
    49          28               0.469            21  [{'document_id': 362404, 'similarity': 0.81638...
    50          34               0.481            21  [{'document_id': 4330561, 'similarity': 0.6746...
    51          88               0.542            21  [{'document_id': 5846724, 'similarity': 0.7151...
    52           9               0.338            20  [{'document_id': 44521, 'similarity': 0.492305...
    53          78               0.396            20  [{'document_id': 1435204, 'similarity': 0.5688...
    54         101               0.403            20  [{'document_id': 1684804, 'similarity': 0.6616...
    55          25               0.438            19  [{'document_id': 5239521, 'similarity': 0.6827...
    56          74               0.389            19  [{'document_id': 6051600, 'similarity': 0.6273...
    57          20               0.431            18  [{'document_id': 579121, 'similarity': 0.72698...
    58          93               0.365            18  [{'document_id': 3055504, 'similarity': 0.5978...
    59          10               0.354            17  [{'document_id': 239121, 'similarity': 0.56923...
    60          51               0.460            17  [{'document_id': 2328676, 'similarity': 0.7239...
    61          52               0.529            17  [{'document_id': 2598544, 'similarity': 0.7038...

    [62 rows x 4 columns]

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/609376f04d3b461a




|


.. code-block:: python


    import os.path
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])}
                          for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {  # 'min_df': 4, 'max_df': 0.75  # filter out (too)/(un)frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url, json={'dataset_definition': dataset_definition})

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items()
                     if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 300
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print(('  => SVD decomposition with {} dimensions '
           'explaining {:.2f} % variabilty of the data')
          .format(n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              'min_similarity': 0.7,
                              'branching_factor': 20,
                              'max_tree_depth': 2,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  14.322 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
