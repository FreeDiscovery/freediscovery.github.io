

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 22381cf8daed4196

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/22381cf8daed4196

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/22381cf8daed4196
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - parse_email_headers: False
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 7661cbe7c5b24d56
      => SVD decomposition with 100 dimensions explaining 53.29 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = 14987aeac8d34a20

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/14987aeac8d34a20
        .. computed in 1.8s
       cluster_id                 cluster_label  cluster_similarity  cluster_size  n_documents
    0           0          haedicke tue meeting               0.343           388          388
    1           1             wed oct migration               0.387           235          235
    2           2        rewrite server address               1.000            56           56
    3           3             tue enron houston               0.339           407          407
    4           4            energy market calo               0.420           234          234
    5           5        sanders nov conference               0.531           104          104
    6           6  tana jones enron_development               0.348           385          385
    7           7                   ect hou mon               0.392           229          229
    8           8               lon ect forster               0.436           126          126
    9           9    fri shackleton transaction               0.356           301          301

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 2158f883dd3543fe

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/2158f883dd3543fe
        .. computed in 3.2s
                                                 children  cluster_depth  cluster_id                     cluster_label  cluster_similarity  cluster_size  n_documents
    0                                     [1, 10, 15, 34]              0           0                      test ect oct               0.294          2465         2465
    1                            [2, 3, 4, 5, 6, 7, 8, 9]              1           1             tana jones recipients               0.343           398          398
    2                                                  []              2           2             flynn shackleton smud               0.490            50           50
    3                                                  []              2           3    test recipients administrative               0.581            47           47
    4                                                  []              2           4                 credit jones tana               0.576            20           20
    5                                                  []              2           5               nemec ruppert exxon               0.421           105          105
    6                                                  []              2           6                  tana jones enron               0.465            89           89
    7                                                  []              2           7                  nicolay mtg tana               0.459            27           27
    8                                                  []              2           8          haedicke energy services               0.622             9            9
    9                                                  []              2           9   teneo recipients administrative               0.432            51           51
    10                                   [11, 12, 13, 14]              1          10                nemec tiger energy               0.384           209          209
    11                                                 []              2          11               ellis hendry master               0.570             8            8
    12                                                 []              2          12                   nemec tiger doc               0.439            94           94
    13                                                 []              2          13             energy services power               0.543            49           49
    14                                                 []              2          14                  rcr project serc               0.455            58           58
    15  [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2...              1          15   sanders enron_development enron               0.309           890          890
    16                                                 []              2          16     enron_development cone issues               0.555            60           60
    17                                                 []              2          17              calo marcelo tozzini               0.462            62           62
    18                                                 []              2          18               lessee shall lessor               0.447            77           77
    19                                                 []              2          19              dupre catalytica doc               0.430            73           73
    20                                                 []              2          20                dasovich hyvl bump               0.530            59           59
    21                                                 []              2          21             enrononline gdr enron               0.423            78           78
    22                                                 []              2          22                   sager usvi pier               0.506            44           44
    23                                                 []              2          23          shall agreement customer               0.664            40           40
    24                                                 []              2          24                haedicke mon teneo               0.510            44           44
    25                                                 []              2          25    conference shackleton attorney               0.423            27           27
    26                                                 []              2          26             enron kincannon clair               0.451            57           57
    27                                                 []              2          27                  dead horse teneo               0.454            40           40
    28                                                 []              2          28              message milbank mail               0.657            22           22
    29                                                 []              2          29                   kean oct condor               0.599            38           38
    30                                                 []              2          30                 sanders nov lunch               0.568            75           75
    31                                                 []              2          31                    master gtc eta               0.457            37           37
    32                                                 []              2          32  teneo shackleton_sara shackleton               0.552            12           12
    33                                                 []              2          33             mtg migration outlook               0.510            45           45
    34  [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 4...              1          34                     ect tenet oct               0.318           968          968
    35                                                 []              2          35                rewrite ect server               0.507           153          153
    36                                                 []              2          36                 berkeley haas edu               0.509            60           60
    37                                                 []              2          37           party transaction shall               0.535            79           79
    38                                                 []              2          38                   nov wed meeting               0.450            49           49
    39                                                 []              2          39                       wed oct fri               0.434            69           69
    40                                                 []              2          40                    tue eb3325 nov               0.503            25           25
    41                                                 []              2          41                     load nov meet               0.524            29           29
    42                                                 []              2          42                     lon ect legal               0.453            44           44
    43                                                 []              2          43             transaction ena price               0.507            60           60
    44                                                 []              2          44                     thu tenet oct               0.504            69           69
    45                                                 []              2          45              conference mon tenet               0.503            21           21
    46                                                 []              2          46       deseret etringer shackleton               0.412            77           77
    47                                                 []              2          47              meeting budget tenet               0.473            50           50
    48                                                 []              2          48                     wed oct tenet               0.567            35           35
    49                                                 []              2          49                     tue conf load               0.605             5            5
    50                                                 []              2          50            migration outlook team               0.484            62           62
    51                                                 []              2          51                     mon tenet nov               0.525            40           40
    52                                                 []              2          52                     tue tenet oct               0.508            41           41

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/2158f883dd3543fe
        .. computed in 0.7s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.507           153  [{'document_id': 5041, 'similarity': 0.5068964...
    1            1               0.421           105  [{'document_id': 719104, 'similarity': 0.42079...
    2            2               0.439            94  [{'document_id': 616225, 'similarity': 0.43870...
    3            3               0.465            89  [{'document_id': 1990921, 'similarity': 0.4654...
    4            4               0.535            79  [{'document_id': 165649, 'similarity': 0.53469...
    5            5               0.423            78  [{'document_id': 123201, 'similarity': 0.42336...
    6            6               0.447            77  [{'document_id': 651249, 'similarity': 0.44694...
    7            7               0.412            77  [{'document_id': 10816, 'similarity': 0.411665...
    8            8               0.568            75  [{'document_id': 3814209, 'similarity': 0.5677...
    9            9               0.430            73  [{'document_id': 4915089, 'similarity': 0.4301...
    10          10               0.434            69  [{'document_id': 350464, 'similarity': 0.43357...
    11          11               0.504            69  [{'document_id': 2328676, 'similarity': 0.5042...
    12          12               0.462            62  [{'document_id': 5076009, 'similarity': 0.4622...
    13          13               0.484            62  [{'document_id': 5612161, 'similarity': 0.4838...
    14          14               0.555            60  [{'document_id': 900, 'similarity': 0.55512090...
    15          15               0.509            60  [{'document_id': 403225, 'similarity': 0.50948...
    16          16               0.507            60  [{'document_id': 5262436, 'similarity': 0.5069...
    17          17               0.530            59  [{'document_id': 446224, 'similarity': 0.52995...
    18          18               0.455            58  [{'document_id': 552049, 'similarity': 0.45498...
    19          19               0.451            57  [{'document_id': 3598609, 'similarity': 0.4509...
    20          20               0.432            51  [{'document_id': 2140369, 'similarity': 0.4316...
    21          21               0.490            50  [{'document_id': 81796, 'similarity': 0.490498...
    22          22               0.473            50  [{'document_id': 2402500, 'similarity': 0.4731...
    23          23               0.543            49  [{'document_id': 1745041, 'similarity': 0.5434...
    24          24               0.450            49  [{'document_id': 2340900, 'similarity': 0.4497...
    25          25               0.581            47  [{'document_id': 1132096, 'similarity': 0.5812...
    26          26               0.510            45  [{'document_id': 5808100, 'similarity': 0.5102...
    27          27               0.506            44  [{'document_id': 1739761, 'similarity': 0.5063...
    28          28               0.510            44  [{'document_id': 2992900, 'similarity': 0.5097...
    29          29               0.453            44  [{'document_id': 91204, 'similarity': 0.453151...
    30          30               0.508            41  [{'document_id': 3171961, 'similarity': 0.5080...
    31          31               0.664            40  [{'document_id': 680625, 'similarity': 0.66357...
    32          32               0.454            40  [{'document_id': 3076516, 'similarity': 0.4535...
    33          33               0.525            40  [{'document_id': 3407716, 'similarity': 0.5248...
    34          34               0.599            38  [{'document_id': 5697769, 'similarity': 0.5990...
    35          35               0.457            37  [{'document_id': 1100401, 'similarity': 0.4571...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/22381cf8daed4196




|


.. code-block:: python


    import os.path
    import numpy as np
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])} \
                                   for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75 # filter out unfrequent / too frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                      if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                            n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              #'min_similarity': 0.95,
                              'branching_factor': 20 
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  10.851 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
