

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 6dea207c8ecb4797

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/6dea207c8ecb4797

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/6dea207c8ecb4797
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = ef391e28aedf43c5
      => SVD decomposition with 100 dimensions explaining 53.27 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = 6846cf15bf73401c

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/6846cf15bf73401c
        .. computed in 1.6s
       cluster_id                      cluster_label  cluster_similarity  cluster_size  n_documents
    0           0            teneo migration outlook               0.344           540          540
    1           1                   tana jones enron               0.451           135          135
    2           2                sanders eb3325 meet               0.417           194          194
    3           3  enron_development shackleton test               0.315           667          667
    4           4              shall party agreement               0.546           104          104
    5           5                 thu haedicke tenet               0.379           265          265
    6           6             rewrite server address               1.000            56           56
    7           7                     tue tenet test               0.402           198          198
    8           8                    nemec doc lunch               0.388           211          211
    9           9                      ect hou clair               0.534            95           95

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 16e852b003ef4393

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/16e852b003ef4393
        .. computed in 2.7s
                                                 children  cluster_depth  cluster_id                    cluster_label  cluster_similarity  cluster_size  n_documents
    0                            [1, 3, 5, 7, 28, 34, 38]              0           0                     test ect oct               0.294          2465         2465
    1                                                 [2]              1           1           rewrite server address               1.000            56           56
    2                                                  []              2           2           rewrite server address               1.000            56           56
    3                                                 [4]              1           3         transaction period price               0.679            38           38
    4                                                  []              2           4         transaction period price               0.679            38           38
    5                                                 [6]              1           5            deseret etringer utah               0.641            31           31
    6                                                  []              2           6            deseret etringer utah               0.641            31           31
    7   [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,...              1           7                    ect test load               0.311          1068         1068
    8                                                  []              2           8                 ect hou sorenson               0.572            74           74
    9                                                  []              2           9           shackleton class power               0.472            44           44
    10                                                 []              2          10           ellis flynn shackleton               0.451            71           71
    11                                                 []              2          11                     load wed tue               0.568            20           20
    12                                                 []              2          12                 nicolay cftc otc               0.446            39           39
    13                                                 []              2          13                tana jones shults               0.547            33           33
    14                                                 []              2          14                 jones tana enron               0.526            46           46
    15                                                 []              2          15           dasovich advice mexico               0.507            68           68
    16                                                 []              2          16                  doc teneo legal               0.476            39           39
    17                                                 []              2          17                   cat urine odor               0.460            40           40
    18                                                 []              2          18              shackleton nov load               0.440            37           37
    19                                                 []              2          19           calo enrononline gpier               0.487            36           36
    20                                                 []              2          20              load meet elbertson               0.430            59           59
    21                                                 []              2          21  recipients administrative group               0.446            75           75
    22                                                 []              2          22         shall agreement customer               0.438            92           92
    23                                                 []              2          23                 dasovich oct wed               0.436            40           40
    24                                                 []              2          24              shall party ruppert               0.439           130          130
    25                                                 []              2          25                 haedicke thu nov               0.653            37           37
    26                                                 []              2          26              sampling enron bret               0.457            55           55
    27                                                 []              2          27          lunch shackleton lafuze               0.483            33           33
    28                               [29, 30, 31, 32, 33]              1          28             nemec energy marcelo               0.377           245          245
    29                                                 []              2          29         energy haedicke services               0.519            33           33
    30                                                 []              2          30      gtc catalytica counterparty               0.462            60           60
    31                                                 []              2          31                  nemec doc teneo               0.566            48           48
    32                                                 []              2          32           marcelo brazil tozzini               0.467            94           94
    33                                                 []              2          33            mshtml stamp sublease               0.605            10           10
    34                                       [35, 36, 37]              1          34                meeting tenet mon               0.508            72           72
    35                                                 []              2          35                meeting mon tenet               0.623            18           18
    36                                                 []              2          36                meeting nov tenet               0.525            33           33
    37                                                 []              2          37                meeting tenet oct               0.549            21           21
    38  [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 5...              1          38  tenet enron_development sanders               0.311           955          955
    39                                                 []              2          39    enron_development cone hendry               0.462            94           94
    40                                                 []              2          40              eb3325 meet trading               0.438            26           26
    41                                                 []              2          41              berkeley tiger haas               0.429            97           97
    42                                                 []              2          42            fri migration outlook               0.440            79           79
    43                                                 []              2          43           conference sager ellis               0.439            24           24
    44                                                 []              2          44          message milbank sanders               0.530            33           33
    45                                                 []              2          45             kean sample malowney               0.581            40           40
    46                                                 []              2          46               tue nov conference               0.517            32           32
    47                                                 []              2          47            mtg migration outlook               0.558            50           50
    48                                                 []              2          48        fri conference ricafrente               0.447            49           49
    49                                                 []              2          49                  eb3325 tue meet               0.551            19           19
    50                                                 []              2          50                    wed hyvl bump               0.461            69           69
    51                                                 []              2          51                  enron cini isda               0.508            40           40
    52                                                 []              2          52                    thu tenet oct               0.512            41           41
    53                                                 []              2          53                  mon dupre tenet               0.449            63           63
    54                                                 []              2          54                    tue tenet oct               0.468            51           51
    55                                                 []              2          55            nov migration outlook               0.466            27           27
    56                                                 []              2          56               sanders dead lunch               0.532            51           51
    57                                                 []              2          57     performance management price               0.481            32           32
    58                                                 []              2          58                  wed project rcr               0.472            38           38

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/16e852b003ef4393
        .. computed in 0.6s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.439           130  [{'document_id': 599076, 'similarity': 0.43868...
    1            1               0.429            97  [{'document_id': 401956, 'similarity': 0.42926...
    2            2               0.467            94  [{'document_id': 207025, 'similarity': 0.46704...
    3            3               0.462            94  [{'document_id': 900, 'similarity': 0.46237770...
    4            4               0.438            92  [{'document_id': 625681, 'similarity': 0.43838...
    5            5               0.440            79  [{'document_id': 2468041, 'similarity': 0.4400...
    6            6               0.446            75  [{'document_id': 1132096, 'similarity': 0.4461...
    7            7               0.572            74  [{'document_id': 63504, 'similarity': 0.572009...
    8            8               0.451            71  [{'document_id': 20449, 'similarity': 0.451170...
    9            9               0.461            69  [{'document_id': 303601, 'similarity': 0.46119...
    10          10               0.507            68  [{'document_id': 511225, 'similarity': 0.50737...
    11          11               0.449            63  [{'document_id': 2812329, 'similarity': 0.4492...
    12          12               0.462            60  [{'document_id': 3225616, 'similarity': 0.4621...
    13          13               0.430            59  [{'document_id': 822649, 'similarity': 0.43015...
    14          14               1.000            56         [{'document_id': 5041, 'similarity': 1.0}]
    15          15               0.457            55  [{'document_id': 929296, 'similarity': 0.45696...
    16          16               0.468            51  [{'document_id': 3171961, 'similarity': 0.4677...
    17          17               0.532            51  [{'document_id': 4028049, 'similarity': 0.5321...
    18          18               0.558            50  [{'document_id': 16, 'similarity': 0.558002012...
    19          19               0.447            49  [{'document_id': 1674436, 'similarity': 0.4469...
    20          20               0.566            48  [{'document_id': 753424, 'similarity': 0.56564...
    21          21               0.526            46  [{'document_id': 1993744, 'similarity': 0.5263...
    22          22               0.472            44  [{'document_id': 38809, 'similarity': 0.472098...
    23          23               0.512            41  [{'document_id': 2328676, 'similarity': 0.5119...
    24          24               0.460            40  [{'document_id': 552049, 'similarity': 0.45969...
    25          25               0.436            40  [{'document_id': 337561, 'similarity': 0.43641...
    26          26               0.581            40  [{'document_id': 5697769, 'similarity': 0.5810...
    27          27               0.508            40  [{'document_id': 4765489, 'similarity': 0.5079...
    28          28               0.446            39  [{'document_id': 1119364, 'similarity': 0.4459...
    29          29               0.476            39  [{'document_id': 3352561, 'similarity': 0.4760...
    30          30               0.679            38  [{'document_id': 5267025, 'similarity': 0.6794...
    31          31               0.472            38  [{'document_id': 331776, 'similarity': 0.47181...
    32          32               0.440            37  [{'document_id': 62001, 'similarity': 0.439508...
    33          33               0.653            37  [{'document_id': 2992900, 'similarity': 0.6525...
    34          34               0.487            36  [{'document_id': 3055504, 'similarity': 0.4865...
    35          35               0.547            33  [{'document_id': 249001, 'similarity': 0.54667...
    36          36               0.483            33  [{'document_id': 4515625, 'similarity': 0.4825...
    37          37               0.519            33  [{'document_id': 160801, 'similarity': 0.51949...
    38          38               0.525            33  [{'document_id': 3549456, 'similarity': 0.5248...
    39          39               0.530            33  [{'document_id': 3853369, 'similarity': 0.5300...
    40          40               0.517            32  [{'document_id': 2421136, 'similarity': 0.5168...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/6dea207c8ecb4797




|


.. code-block:: python


    import os.path
    import numpy as np
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])} \
                                   for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75 # filter out unfrequent / too frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                      if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                            n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              #'min_similarity': 0.95,
                              'branching_factor': 20 
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.644 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
