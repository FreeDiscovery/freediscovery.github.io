

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = b5051c3cbb6948ae

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/b5051c3cbb6948ae

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/b5051c3cbb6948ae
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - parse_email_headers: False
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 468236d9db1247d5
      => SVD decomposition with 100 dimensions explaining 53.28 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = a2972f0c1f7647a4

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/a2972f0c1f7647a4
        .. computed in 1.4s
       cluster_id             cluster_label  cluster_similarity  cluster_size  n_documents
    0           0          tana jones enron               0.324           594          594
    1           1           sanders fri oct               0.407           190          190
    2           2         berkeley haas edu               0.355           370          370
    3           3             nemec wed tue               0.341           389          389
    4           4             ect hou teneo               0.395           231          231
    5           5             tenet nov mon               0.374           306          306
    6           6  energy services customer               0.550            86           86
    7           7    migration outlook team               0.453           148          148
    8           8    rewrite server address               1.000            56           56
    9           9        shall party lessee               0.531            95           95

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = fcafb7d70d9548b1

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/fcafb7d70d9548b1
        .. computed in 2.6s
                                                 children  cluster_depth  cluster_id                     cluster_label  cluster_similarity  cluster_size  n_documents
    0                           [1, 3, 8, 13, 33, 36, 56]              0           0                      test ect oct               0.294          2465         2465
    1                                                 [2]              1           1                     ect hou taffy               0.612            66           66
    2                                                  []              2           2                     ect hou taffy               0.612            66           66
    3                                        [4, 5, 6, 7]              1           3  enron_development rewrite server               0.379           335          335
    4                                                  []              2           4      enron_development flynn cone               0.466            86           86
    5                                                  []              2           5            rewrite server address               0.548           131          131
    6                                                  []              2           6                  hendry aven week               0.523            25           25
    7                                                  []              2           7               shall lessee lessor               0.433            93           93
    8                                     [9, 10, 11, 12]              1           8                      load fri nov               0.463            76           76
    9                                                  []              2           9                      wed load oct               0.584             6            6
    10                                                 []              2          10                guaranty wed tiger               0.492            17           17
    11                                                 []              2          11                      load fri nov               0.524            36           36
    12                                                 []              2          12                load meet yosemite               0.557            17           17
    13  [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 2...              1          13                 mtg test haedicke               0.307           992          992
    14                                                 []              2          14             marcelo ellis tozzini               0.446            91           91
    15                                                 []              2          15           catalytica dupre neuner               0.516            40           40
    16                                                 []              2          16               shackleton load nov               0.500            34           34
    17                                                 []              2          17        shackleton davidson sample               0.483            37           37
    18                                                 []              2          18                 gtc online master               0.478            50           50
    19                                                 []              2          19          harris brokerage account               0.500            39           39
    20                                                 []              2          20             nemec agreement shall               0.482            88           88
    21                                                 []              2          21                 tana jones advice               0.471            65           65
    22                                                 []              2          22                   forster lon ect               0.478            77           77
    23                                                 []              2          23                haedicke usvi pier               0.486            61           61
    24                                                 []              2          24            nicolay sager haedicke               0.461            70           70
    25                                                 []              2          25            tiger deseret etringer               0.447            72           72
    26                                                 []              2          26                 meeting tenet nov               0.480            47           47
    27                                                 []              2          27                     wed tenet oct               0.501            23           23
    28                                                 []              2          28                      ena rmt swap               0.534            30           30
    29                                                 []              2          29   ricafrente ricafrente_david tue               0.501            26           26
    30                                                 []              2          30            migration outlook team               0.454            50           50
    31                                                 []              2          31                   conf tana jones               0.462            35           35
    32                                                 []              2          32               mtg kincannon tenet               0.460            57           57
    33                                           [34, 35]              1          33                 sanders nov lunch               0.564            81           81
    34                                                 []              2          34                sanders tue letter               0.603            20           20
    35                                                 []              2          35                   sanders nov thu               0.594            61           61
    36  [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 4...              1          36                tenet oct dasovich               0.318           834          834
    37                                                 []              2          37                 muni aquilla deal               0.470            43           43
    38                                                 []              2          38                     serc nerc tva               0.463            55           55
    39                                                 []              2          39                 berkeley haas edu               0.563            54           54
    40                                                 []              2          40                   jones tana load               0.461            43           43
    41                                                 []              2          41            rcr dernehl conference               0.537            23           23
    42                                                 []              2          42               ruppert exxon nemec               0.522            56           56
    43                                                 []              2          43               kean dasovich urine               0.498            52           52
    44                                                 []              2          44          energy dasovich services               0.488            91           91
    45                                                 []              2          45    project performance management               0.583            13           13
    46                                                 []              2          46             migration outlook tue               0.464            62           62
    47                                                 []              2          47                eb3325 meet murray               0.454            24           24
    48                                                 []              2          48                     mon tenet nov               0.544            39           39
    49                                                 []              2          49            eb3325 meet ricafrente               0.509            46           46
    50                                                 []              2          50                 legal meet eb3325               0.491            25           25
    51                                                 []              2          51               lunch wed migration               0.481            27           27
    52                                                 []              2          52             foreign tax brazilian               0.558            49           49
    53                                                 []              2          53                     thu tenet oct               0.511            35           35
    54                                                 []              2          54                 doc nemec milbank               0.474            53           53
    55                                                 []              2          55                     wed tenet oct               0.440            44           44
    56                                       [57, 58, 59]              1          56                 teneo enron group               0.417            81           81
    57                                                 []              2          57                 enron clair teneo               0.465            34           34
    58                                                 []              2          58         teneo fri shackleton_sara               0.432            29           29
    59                                                 []              2          59   teneo recipients administrative               0.621            18           18

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/fcafb7d70d9548b1
        .. computed in 0.6s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.548           131  [{'document_id': 5625, 'similarity': 0.5482725...
    1            1               0.433            93  [{'document_id': 306916, 'similarity': 0.43271...
    2            2               0.446            91  [{'document_id': 3600, 'similarity': 0.4463216...
    3            3               0.488            91  [{'document_id': 207025, 'similarity': 0.48775...
    4            4               0.482            88  [{'document_id': 1577536, 'similarity': 0.4818...
    5            5               0.466            86  [{'document_id': 900, 'similarity': 0.46619480...
    6            6               0.478            77  [{'document_id': 1249924, 'similarity': 0.4782...
    7            7               0.447            72  [{'document_id': 12769, 'similarity': 0.447433...
    8            8               0.461            70  [{'document_id': 139129, 'similarity': 0.46088...
    9            9               0.612            66  [{'document_id': 11025, 'similarity': 0.612024...
    10          10               0.471            65  [{'document_id': 241081, 'similarity': 0.47114...
    11          11               0.464            62  [{'document_id': 5669161, 'similarity': 0.4644...
    12          12               0.486            61  [{'document_id': 2518569, 'similarity': 0.4859...
    13          13               0.594            61  [{'document_id': 3814209, 'similarity': 0.5943...
    14          14               0.460            57  [{'document_id': 5447556, 'similarity': 0.4603...
    15          15               0.522            56  [{'document_id': 795664, 'similarity': 0.52198...
    16          16               0.463            55  [{'document_id': 152100, 'similarity': 0.46302...
    17          17               0.563            54  [{'document_id': 515524, 'similarity': 0.56312...
    18          18               0.474            53  [{'document_id': 1638400, 'similarity': 0.4735...
    19          19               0.498            52  [{'document_id': 5313025, 'similarity': 0.4976...
    20          20               0.478            50  [{'document_id': 1052676, 'similarity': 0.4779...
    21          21               0.454            50  [{'document_id': 5359225, 'similarity': 0.4535...
    22          22               0.558            49  [{'document_id': 4624, 'similarity': 0.5580909...
    23          23               0.480            47  [{'document_id': 3549456, 'similarity': 0.4804...
    24          24               0.509            46  [{'document_id': 2464900, 'similarity': 0.5089...
    25          25               0.440            44  [{'document_id': 2202256, 'similarity': 0.4402...
    26          26               0.470            43  [{'document_id': 4372281, 'similarity': 0.4701...
    27          27               0.461            43  [{'document_id': 179776, 'similarity': 0.46063...
    28          28               0.516            40  [{'document_id': 98596, 'similarity': 0.515647...
    29          29               0.500            39  [{'document_id': 28561, 'similarity': 0.500084...
    30          30               0.544            39  [{'document_id': 3080025, 'similarity': 0.5435...
    31          31               0.483            37  [{'document_id': 124609, 'similarity': 0.48335...
    32          32               0.524            36  [{'document_id': 846400, 'similarity': 0.52438...
    33          33               0.462            35  [{'document_id': 2036329, 'similarity': 0.4622...
    34          34               0.511            35  [{'document_id': 2328676, 'similarity': 0.5109...
    35          35               0.500            34  [{'document_id': 62001, 'similarity': 0.500183...
    36          36               0.465            34  [{'document_id': 3598609, 'similarity': 0.4650...
    37          37               0.534            30  [{'document_id': 79524, 'similarity': 0.534038...
    38          38               0.432            29  [{'document_id': 4571044, 'similarity': 0.4321...
    39          39               0.481            27  [{'document_id': 4368100, 'similarity': 0.4805...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/b5051c3cbb6948ae




|


.. code-block:: python


    import os.path
    import numpy as np
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])} \
                                   for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75 # filter out unfrequent / too frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                      if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                            n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              #'min_similarity': 0.95,
                              'branching_factor': 20 
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.483 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
