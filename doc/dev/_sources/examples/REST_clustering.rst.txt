

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 53c77feb82544a28

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/53c77feb82544a28

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/53c77feb82544a28
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: /home/ubuntu/freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 1.0
         - min_df: 0.0
         - n_features: 100001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - parse_email_headers: False
         - stop_words: english
         - sublinear_tf: False
         - use_hashing: False
         - use_idf: False

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = fc0e42fecf8b4032
      => SVD decomposition with 300 dimensions explaining 87.17 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = e435663c79ea4ac8

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/e435663c79ea4ac8
        .. computed in 1.3s
       cluster_id                        cluster_label  cluster_similarity  cluster_size  n_documents
    0           0                     mtg normal tenet               0.463            72           72
    1           1            test administrative jones               0.199           261          261
    2           2                       teneo test wed               0.247           207          207
    3           3                   sanders normal thu               0.256           181          181
    4           4                    enron subject tue               0.076           916          916
    5           5  enron_development eb3325 conference               0.187           265          265
    6           6                      ect meeting hou               0.326           151          151
    7           7               outlook migration team               0.271           136          136
    8           8               rewrite address server               1.000            56           56
    9           9                mon shackleton normal               0.211           220          220

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 70e5fffb788e4145

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/70e5fffb788e4145
        .. computed in 2.1s
                                                 children  cluster_depth  cluster_id                         cluster_label  cluster_similarity  cluster_size  n_documents
    0                                            [1, 102]              0           0                       normal test ect               0.074          2465         2465
    1   [2, 4, 6, 8, 10, 12, 25, 27, 30, 32, 37, 40, 4...              1           1                       normal test ect               0.074          2464         2464
    2                                                  []              2           2                rewrite address server               0.816            69           69
    3                                                  []              2           4                  tiger sekse response               0.758            10           10
    4                                                  []              2           6                cash collateral credit               0.499            21           21
    5                                                  []              2           8                         ect hou ellis               0.579            56           56
    6                                                  []              2          10               owner changing approved               0.514            14           14
    7                                                  []              2          12  shackleton administrative recipients               0.151           430          430
    8                                                  []              2          25                   test bruno gaillard               0.645            13           13
    9                                                  []              2          27                     normal test teneo               0.401            83           83
    10                                                 []              2          30                        norm lay woody               0.618             7            7
    11                                                 []              2          32    enron_development shackleton tiger               0.258           123          123
    12                                                 []              2          37              nemec agreement customer               0.280            82           82
    13                                                 []              2          40                       think long term               0.626             8            8
    14                                                 []              2          42                   haedicke tue normal               0.206           166          166
    15                                                 []              2          49             usvi password performance               0.256            61           61
    16                                                 []              2          53                    sanders normal nov               0.374            86           86
    17                                                 []              2          58                   enron ruppert shall               0.180           206          206
    18                                                 []              2          65                flynn smud enrononline               0.321            48           48
    19                                                 []              2          68                     tenet normal test               0.171           381          381
    20                                                 []              2          79                training midland nmoga               0.781             5            5
    21                                                 []              2          81                team outlook migration               0.109           595          595
    22                                              [103]              1         102                     south simons firm               1.000             1            1
    23                                                 []              2         103                     south simons firm               1.000             1            1

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/70e5fffb788e4145
        .. computed in 0.1s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            3               0.816            69  [{'document_id': 5041, 'similarity': 0.9947913...
    1           22               0.410            66  [{'document_id': 154449, 'similarity': 0.79775...
    2           18               0.308            59  [{'document_id': 4879681, 'similarity': 0.5196...
    3           39               0.317            58  [{'document_id': 749956, 'similarity': 0.60350...
    4           91               0.355            58  [{'document_id': 2190400, 'similarity': 0.6698...
    5            9               0.579            56  [{'document_id': 11236, 'similarity': 0.868902...
    6           15               0.369            54  [{'document_id': 62001, 'similarity': 0.556514...
    7           73               0.345            54  [{'document_id': 2547216, 'similarity': 0.5949...
    8           28               0.397            52  [{'document_id': 370881, 'similarity': 0.62325...
    9           61               0.358            52  [{'document_id': 1664100, 'similarity': 0.6566...
    10          64               0.402            52  [{'document_id': 2076481, 'similarity': 0.7309...
    11          14               0.385            51  [{'document_id': 1304164, 'similarity': 0.5387...
    12          89               0.268            51  [{'document_id': 543169, 'similarity': 0.61792...
    13          71               0.378            48  [{'document_id': 6041764, 'similarity': 0.6890...
    14          46               0.404            45  [{'document_id': 1893376, 'similarity': 0.6896...
    15          74               0.483            45  [{'document_id': 2778889, 'similarity': 0.6913...
    16          45               0.434            43  [{'document_id': 2992900, 'similarity': 0.6279...
    17          94               0.274            43  [{'document_id': 5285401, 'similarity': 0.4429...
    18          88               0.359            42  [{'document_id': 3326976, 'similarity': 0.5345...
    19          35               0.446            40  [{'document_id': 33124, 'similarity': 0.815441...
    20          84               0.388            40  [{'document_id': 167281, 'similarity': 0.69094...
    21          75               0.408            38  [{'document_id': 3880900, 'similarity': 0.6729...
    22         101               0.573            38  [{'document_id': 5612161, 'similarity': 0.7450...
    23          43               0.445            37  [{'document_id': 79524, 'similarity': 0.604525...
    24          69               0.410            37  [{'document_id': 22201, 'similarity': 0.631744...
    25          83               0.395            36  [{'document_id': 4596736, 'similarity': 0.6884...
    26          17               0.319            35  [{'document_id': 4456321, 'similarity': 0.5482...
    27          72               0.370            35  [{'document_id': 1739761, 'similarity': 0.5993...
    28          77               0.383            35  [{'document_id': 1923769, 'similarity': 0.6703...
    29          19               0.422            34  [{'document_id': 249001, 'similarity': 0.63144...
    ..         ...                 ...           ...                                                ...
    31          62               0.401            34  [{'document_id': 1117249, 'similarity': 0.6215...
    32          87               0.364            34  [{'document_id': 2862864, 'similarity': 0.7798...
    33          52               0.364            33  [{'document_id': 1229881, 'similarity': 0.6613...
    34          76               0.298            33  [{'document_id': 1585081, 'similarity': 0.4743...
    35          29               0.531            31  [{'document_id': 351649, 'similarity': 0.70611...
    36          70               0.357            31  [{'document_id': 1734489, 'similarity': 0.5663...
    37          36               0.503            30  [{'document_id': 91809, 'similarity': 0.732780...
    38          57               0.514            30  [{'document_id': 4028049, 'similarity': 0.6973...
    39          60               0.316            30  [{'document_id': 152100, 'similarity': 0.51097...
    40          96               0.316            30  [{'document_id': 3583449, 'similarity': 0.5449...
    41          56               0.458            29  [{'document_id': 1390041, 'similarity': 0.6444...
    42          44               0.347            28  [{'document_id': 908209, 'similarity': 0.61389...
    43          59               0.448            28  [{'document_id': 714025, 'similarity': 0.86641...
    44          82               0.429            26  [{'document_id': 1156, 'similarity': 0.5798271...
    45          99               0.443            26  [{'document_id': 3097600, 'similarity': 0.6578...
    46          23               0.392            25  [{'document_id': 294849, 'similarity': 0.60530...
    47          67               0.480            25  [{'document_id': 10404, 'similarity': 0.784958...
    48          78               0.479            25  [{'document_id': 2468041, 'similarity': 0.7449...
    49          38               0.550            24  [{'document_id': 628849, 'similarity': 0.80774...
    50          85               0.382            24  [{'document_id': 776161, 'similarity': 0.55162...
    51          66               0.393            23  [{'document_id': 3790809, 'similarity': 0.7010...
    52          98               0.399            23  [{'document_id': 5239521, 'similarity': 0.6151...
    53          13               0.433            22  [{'document_id': 7744, 'similarity': 0.7009313...
    54          21               0.360            22  [{'document_id': 463761, 'similarity': 0.72590...
    55          24               0.496            22  [{'document_id': 4372281, 'similarity': 0.8566...
    56           7               0.499            21  [{'document_id': 7569, 'similarity': 0.6480329...
    57          93               0.381            21  [{'document_id': 3356224, 'similarity': 0.6095...
    58          16               0.400            20  [{'document_id': 16641, 'similarity': 0.641416...
    59          20               0.339            20  [{'document_id': 341056, 'similarity': 0.49750...
    60          86               0.377            20  [{'document_id': 781456, 'similarity': 0.65637...

    [61 rows x 4 columns]

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/53c77feb82544a28




|


.. code-block:: python


    import os.path
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])}
                          for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {  # 'min_df': 4, 'max_df': 0.75  # filter out (too)/(un)frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url, json={'dataset_definition': dataset_definition})

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items()
                     if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 300
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print(('  => SVD decomposition with {} dimensions '
           'explaining {:.2f} % variabilty of the data')
          .format(n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              'min_similarity': 0.7,
                              'branching_factor': 20,
                              'max_tree_depth': 2,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  10.813 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
