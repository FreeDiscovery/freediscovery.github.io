

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = e775552d77e94871

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/e775552d77e94871

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/e775552d77e94871
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: /home/ubuntu/freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 1.0
         - min_df: 0.0
         - n_features: 100001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - parse_email_headers: False
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: False

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 1c886095b5d644c8
      => SVD decomposition with 300 dimensions explaining 90.00 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = ff0276bcb5fc4914

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/ff0276bcb5fc4914
        .. computed in 1.2s
       cluster_id                    cluster_label  cluster_similarity  cluster_size  n_documents
    0           0                 ect hou contract               0.157           315          315
    1           1                tenet normal test               0.200           311          311
    2           2  ricafrente ricafrente_david tue               0.287           149          149
    3           3        test group administrative               0.218           222          222
    4           4           rewrite address server               1.000            56           56
    5           5                teneo load advice               0.434            89           89
    6           6                   mon nov normal               0.238           181          181
    7           7    enron_development brazil kean               0.176           195          195
    8           8             enron subject normal               0.081           863          863
    9           9            shall party agreement               0.493            84           84

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 9e057fea9fe24206

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/9e057fea9fe24206
        .. computed in 2.0s
                                                 children  cluster_depth  cluster_id                     cluster_label  cluster_similarity  cluster_size  n_documents
    0       [1, 3, 7, 21, 23, 27, 30, 46, 51, 69, 72, 79]              0           0                   normal test ect               0.071          2465         2465
    1                                                 [2]              1           1                 isda cini rodolfo               0.612            14           14
    2                                                  []              2           2                 isda cini rodolfo               0.612            14           14
    3                                           [4, 5, 6]              1           3            transaction kean party               0.248           145          145
    4                                                  []              2           4          transaction party period               0.512            53           53
    5                                                  []              2           5     deseret etringer counterparty               0.293            48           48
    6                                                  []              2           6               kean guaranty dupre               0.362            44           44
    7   [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,...              1           7               rewrite address ect               0.163           497          497
    8                                                  []              2           8   enron_development committee esa               0.469            33           33
    9                                                  []              2           9     issues enron_development cone               0.573            24           24
    10                                                 []              2          10            rewrite address server               0.622            92           92
    11                                                 []              2          11   performance management employee               0.380            15           15
    12                                                 []              2          12              shackleton load test               0.422            29           29
    13                                                 []              2          13              calo credit response               0.376            40           40
    14                                                 []              2          14                 tax capital lunch               0.402            28           28
    15                                                 []              2          15                    ena enron swap               0.369            43           43
    16                                                 []              2          16   enron_development sellers urine               0.349            24           24
    17                                                 []              2          17                     ect hou ellis               0.448            61           61
    18                                                 []              2          18            dasovich alias section               0.438            25           25
    19                                                 []              2          19                 test bailey bruno               0.307            42           42
    20                                                 []              2          20       commodity nemec enrononline               0.263            41           41
    21                                               [22]              1          21               project trading new               0.999             2            2
    22                                                 []              2          22               project trading new               0.999             2            2
    23                                       [24, 25, 26]              1          23           jones tana presentation               0.261            62           62
    24                                                 []              2          24                   jones tana time               0.537            11           11
    25                                                 []              2          25               meter password dirk               0.374            25           25
    26                                                 []              2          26           jones tana presentation               0.417            26           26
    27                                           [28, 29]              1          27                 teneo load normal               0.481            75           75
    28                                                 []              2          28                   load teneo meet               0.500            29           29
    29                                                 []              2          29                  teneo oct normal               0.536            46           46
    ..                                                ...            ...         ...                               ...                 ...           ...          ...
    68                                                 []              2          68                  mon tenet normal               0.433            31           31
    69                                           [70, 71]              1          69                 ruppert exxon ext               0.399            28           28
    70                                                 []              2          70               ruppert court exxon               0.513            17           17
    71                                                 []              2          71                 ruppert exxon lay               0.481            11           11
    72                           [73, 74, 75, 76, 77, 78]              1          72                  energy new trade               0.186           172          172
    73                                                 []              2          73             energy customer trade               0.448            38           38
    74                                                 []              2          74                 berkeley haas edu               0.291            40           40
    75                                                 []              2          75          haedicke milbank message               0.356            31           31
    76                                                 []              2          76              market new companies               0.429            33           33
    77                                                 []              2          77        trade transactions foreign               0.372            24           24
    78                                                 []              2          78             eb3325 new mccullough               0.476             6            6
    79  [80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 9...              1          79                teneo team outlook               0.131           398          398
    80                                                 []              2          80                   tana jones list               0.324            38           38
    81                                                 []              2          81                jones tana weather               0.335            32           32
    82                                                 []              2          82            nemec bar paul_pfeffer               0.412            15           15
    83                                                 []              2          83             bockius brazil compaq               0.373            15           15
    84                                                 []              2          84          elbertson subject sample               0.350            35           35
    85                                                 []              2          85            teneo taylor_mark test               0.477            12           12
    86                                                 []              2          86           power houston argentina               0.366            16           16
    87                                                 []              2          87                  sager sent teneo               0.344            19           19
    88                                                 []              2          88             sweet twanda haedicke               0.338            19           19
    89                                                 []              2          89                   teneo team smud               0.346            13           13
    90                                                 []              2          90       class tiger shackleton_sara               0.420            12           12
    91                                                 []              2          91                  teneo test group               0.326            23           23
    92                                                 []              2          92         teneo test administrative               0.458            33           33
    93                                                 []              2          93  shackleton_sara shackleton teneo               0.411            26           26
    94                                                 []              2          94    shackleton_sara dupre guaranty               0.321            18           18
    95                                                 []              2          95            teneo hendry financial               0.337            15           15
    96                                                 []              2          96            outlook migration team               0.355            26           26
    97                                                 []              2          97            migration outlook team               0.495            31           31

    [98 rows x 7 columns]

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/9e057fea9fe24206
        .. computed in 0.1s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0           10               0.622            92  [{'document_id': 5041, 'similarity': 0.9793236...
    1           17               0.448            61  [{'document_id': 11025, 'similarity': 0.765792...
    2           33               0.425            61  [{'document_id': 293764, 'similarity': 0.80435...
    3            4               0.512            53  [{'document_id': 165649, 'similarity': 0.81779...
    4            5               0.293            48  [{'document_id': 82369, 'similarity': 0.571373...
    5           60               0.347            48  [{'document_id': 1742400, 'similarity': 0.6512...
    6           62               0.407            48  [{'document_id': 1893376, 'similarity': 0.7036...
    7           63               0.356            48  [{'document_id': 2313441, 'similarity': 0.5697...
    8           50               0.437            47  [{'document_id': 3980025, 'similarity': 0.5763...
    9           56               0.281            47  [{'document_id': 2611456, 'similarity': 0.5871...
    10          65               0.369            47  [{'document_id': 2402500, 'similarity': 0.6364...
    11          29               0.536            46  [{'document_id': 314721, 'similarity': 0.68151...
    12          64               0.294            46  [{'document_id': 4104676, 'similarity': 0.4827...
    13          53               0.327            45  [{'document_id': 2022084, 'similarity': 0.5970...
    14           6               0.362            44  [{'document_id': 145924, 'similarity': 0.69448...
    15          15               0.369            43  [{'document_id': 79524, 'similarity': 0.623141...
    16          19               0.307            42  [{'document_id': 362404, 'similarity': 0.60348...
    17          20               0.263            41  [{'document_id': 1129969, 'similarity': 0.5693...
    18          13               0.376            40  [{'document_id': 17161, 'similarity': 0.621948...
    19          74               0.291            40  [{'document_id': 3363556, 'similarity': 0.4120...
    20          35               0.343            39  [{'document_id': 538756, 'similarity': 0.59493...
    21          59               0.354            39  [{'document_id': 1923769, 'similarity': 0.5500...
    22          73               0.448            38  [{'document_id': 609961, 'similarity': 0.81514...
    23          80               0.324            38  [{'document_id': 2010724, 'similarity': 0.4873...
    24          84               0.350            35  [{'document_id': 2521744, 'similarity': 0.4712...
    25          44               0.337            34  [{'document_id': 1232100, 'similarity': 0.6853...
    26           8               0.469            33  [{'document_id': 36100, 'similarity': 0.830510...
    27          38               0.380            33  [{'document_id': 1098304, 'similarity': 0.6700...
    28          39               0.466            33  [{'document_id': 156025, 'similarity': 0.88936...
    29          76               0.429            33  [{'document_id': 576081, 'similarity': 0.63881...
    ..         ...                 ...           ...                                                ...
    35          75               0.356            31  [{'document_id': 4088484, 'similarity': 0.5789...
    36          97               0.495            31  [{'document_id': 5560164, 'similarity': 0.6532...
    37          57               0.337            30  [{'document_id': 5788836, 'similarity': 0.4722...
    38          12               0.422            29  [{'document_id': 62001, 'similarity': 0.631704...
    39          28               0.500            29  [{'document_id': 263169, 'similarity': 0.62168...
    40          14               0.402            28  [{'document_id': 4761, 'similarity': 0.6048204...
    41          37               0.348            27  [{'document_id': 1006009, 'similarity': 0.5498...
    42          26               0.417            26  [{'document_id': 589824, 'similarity': 0.58085...
    43          34               0.343            26  [{'document_id': 1212201, 'similarity': 0.6574...
    44          66               0.460            26  [{'document_id': 3171961, 'similarity': 0.8576...
    45          93               0.411            26  [{'document_id': 4787344, 'similarity': 0.6324...
    46          96               0.355            26  [{'document_id': 5489649, 'similarity': 0.6847...
    47          18               0.438            25  [{'document_id': 583696, 'similarity': 0.71621...
    48          25               0.374            25  [{'document_id': 452929, 'similarity': 0.64306...
    49           9               0.573            24  [{'document_id': 256, 'similarity': 0.90633226...
    50          16               0.349            24  [{'document_id': 112896, 'similarity': 0.53823...
    51          52               0.435            24  [{'document_id': 543169, 'similarity': 0.67896...
    52          67               0.458            24  [{'document_id': 2468041, 'similarity': 0.8153...
    53          77               0.372            24  [{'document_id': 3671056, 'similarity': 0.5830...
    54          61               0.527            23  [{'document_id': 1752976, 'similarity': 0.7403...
    55          91               0.326            23  [{'document_id': 1517824, 'similarity': 0.4741...
    56          43               0.312            22  [{'document_id': 640000, 'similarity': 0.53088...
    57          32               0.464            21  [{'document_id': 1117249, 'similarity': 0.8568...
    58          41               0.410            21  [{'document_id': 683929, 'similarity': 0.77398...
    59          54               0.426            21  [{'document_id': 1060900, 'similarity': 0.7320...
    60          45               0.358            19  [{'document_id': 1225449, 'similarity': 0.5898...
    61          87               0.344            19  [{'document_id': 1766241, 'similarity': 0.5150...
    62          88               0.338            19  [{'document_id': 2537649, 'similarity': 0.5908...
    63          40               0.399            18  [{'document_id': 4161600, 'similarity': 0.5338...
    64          94               0.321            18  [{'document_id': 4915089, 'similarity': 0.4162...

    [65 rows x 4 columns]

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/e775552d77e94871




|


.. code-block:: python


    import os.path
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])}
                          for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {  # 'min_df': 4, 'max_df': 0.75  # filter out (too)/(un)frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url, json={'dataset_definition': dataset_definition})

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items()
                     if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 300
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print(('  => SVD decomposition with {} dimensions '
           'explaining {:.2f} % variabilty of the data')
          .format(n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              'min_similarity': 0.7,
                              'branching_factor': 20,
                              'max_tree_depth': 2,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  10.722 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
