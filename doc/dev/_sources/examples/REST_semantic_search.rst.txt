

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 2392307ffe364eb8

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/2392307ffe364eb8

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = a116e12421ba4006
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    3748096      0.441
    1276900      0.440
    1274641      0.439
    770884       0.428
    1677025      0.428
    4528384      0.423
    776161       0.420
    1682209      0.420
    481636       0.418
    202500       0.412
    774400       0.405
    1684804      0.403
    1976836      0.403
    777924       0.402
    21316        0.398
    266256       0.398
    342225       0.394
    3545689      0.393
    3651921      0.391
    1227664      0.391
    3632836      0.389
    3541924      0.384
    2217121      0.382
    4923961      0.382
    674041       0.381
    4363921      0.380
    6889         0.379
    1648656      0.378
    741321       0.378
    178929       0.377
    ...            ...
    4704561      0.157
    4347225      0.157
    5202961      0.157
    118336       0.156
    1085764      0.156
    4549689      0.156
    4571044      0.156
    5184729      0.156
    4384836      0.155
    114921       0.155
    2184484      0.155
    4782969      0.155
    1371241      0.155
    5143824      0.154
    3952144      0.154
    25281        0.154
    23409        0.153
    4284900      0.152
    3249         0.149
    3312400      0.149
    1083681      0.148
    5166529      0.147
    304704       0.147
    906304       0.144
    904401       0.142
    1296         0.141
    4214809      0.139
    495616       0.139
    2025         0.137
    4239481      0.136

    [2465 rows x 1 columns]
    0.441452541905

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/2392307ffe364eb8




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  11.464 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
