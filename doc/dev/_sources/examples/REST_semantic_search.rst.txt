

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 57006a8ee239428e

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/57006a8ee239428e

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = a726f9e1334849cd
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.464
    21316        0.439
    3545689      0.419
    1572516      0.414
    2152089      0.408
    4116841      0.406
    102400       0.399
    1454436      0.397
    674041       0.395
    202500       0.392
    5089536      0.388
    68644        0.388
    69169        0.386
    1976836      0.385
    4923961      0.385
    3225616      0.381
    776161       0.381
    1682209      0.381
    777924       0.372
    774400       0.372
    1684804      0.372
    3748096      0.372
    1048576      0.371
    1274641      0.371
    1276900      0.371
    49729        0.370
    224676       0.369
    2560000      0.367
    3348900      0.366
    2022084      0.365
    ...            ...
    114921       0.178
    4293184      0.177
    2277081      0.177
    1038361      0.177
    3844         0.177
    4301476      0.177
    1040400      0.176
    4214809      0.175
    2027776      0.173
    10201        0.171
    1607824      0.171
    2226064      0.171
    10404        0.170
    708964       0.170
    1610361      0.170
    2268036      0.168
    3312400      0.168
    5143824      0.167
    4410000      0.167
    228484       0.166
    1085764      0.165
    872356       0.165
    904401       0.165
    906304       0.165
    495616       0.163
    1083681      0.162
    2271049      0.161
    614656       0.160
    1510441      0.160
    1763584      0.157

    [2465 rows x 1 columns]
    0.464386950591

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/57006a8ee239428e




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.405 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
