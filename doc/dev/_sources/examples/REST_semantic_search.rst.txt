

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 3ab4252392144645

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/3ab4252392144645

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 60ea30f4c68440c8
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.462
    21316        0.438
    1572516      0.415
    4116841      0.411
    1550025      0.405
    648025       0.402
    2152089      0.402
    649636       0.401
    3545689      0.400
    1454436      0.400
    674041       0.397
    2856100      0.396
    68644        0.390
    69169        0.386
    4923961      0.385
    776161       0.378
    1682209      0.378
    6724         0.377
    4363921      0.376
    3632836      0.375
    14641        0.374
    6889         0.374
    8836         0.370
    4393216      0.368
    2217121      0.368
    9025         0.368
    4464769      0.368
    777924       0.367
    5812921      0.366
    774400       0.366
    ...            ...
    3844         0.178
    4301476      0.178
    4389025      0.178
    114921       0.177
    8464         0.177
    1040400      0.177
    142884       0.177
    144400       0.177
    5531904      0.177
    5541316      0.177
    3196944      0.177
    8649         0.177
    1288225      0.176
    3751969      0.176
    1311025      0.175
    2050624      0.175
    304704       0.175
    904401       0.174
    906304       0.173
    385641       0.169
    243049       0.168
    2226064      0.168
    5143824      0.167
    1763584      0.167
    872356       0.160
    614656       0.158
    1510441      0.158
    495616       0.155
    2268036      0.148
    2271049      0.141

    [2465 rows x 1 columns]
    0.461688013274

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/3ab4252392144645




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.352 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
