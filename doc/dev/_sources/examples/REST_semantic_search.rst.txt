

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 81c2e695288047d4

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/81c2e695288047d4

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 480cbad37b194798
      => SVD decomposition with 100 dimensions explaining 69.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    5267025      0.543
    5262436      0.522
    5157441      0.398
    116964       0.398
    5148361      0.397
    115600       0.397
    116281       0.377
    5152900      0.377
    5067001      0.354
    97969        0.354
    73984        0.348
    75625        0.348
    4813636      0.348
    54756        0.348
    4950625      0.348
    53361        0.343
    4800481      0.343
    3541924      0.309
    6724         0.299
    4363921      0.297
    4284900      0.291
    1181569      0.282
    8836         0.280
    4393216      0.280
    145161       0.279
    5271616      0.278
    110224       0.277
    3249         0.274
    5546025      0.274
    6889         0.272
    ...            ...
    22201       -0.194
    657721      -0.197
    652864      -0.197
    1555009     -0.197
    651249      -0.198
    1552516     -0.198
    3250809     -0.201
    3701776     -0.202
    3671056     -0.202
    734449      -0.208
    20164       -0.210
    1640961     -0.211
    2322576     -0.212
    3261636     -0.241
    1062961     -0.252
    3118756     -0.260
    3132900     -0.262
    2125764     -0.262
    3125824     -0.263
    3139984     -0.263
    193600      -0.263
    3694084     -0.264
    3115225     -0.267
    3129361     -0.269
    3122289     -0.269
    3136441     -0.272
    954529      -0.277
    2621161     -0.279
    280900      -0.290
    956484      -0.297

    [2465 rows x 1 columns]
    0.54261073232

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/81c2e695288047d4




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.407 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
