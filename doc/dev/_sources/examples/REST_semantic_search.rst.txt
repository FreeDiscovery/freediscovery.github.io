

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 7dbf48e6c4a34388

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/7dbf48e6c4a34388

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 139044ddeb23444a
      => SVD decomposition with 100 dimensions explaining 76.48 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.425
    4116841      0.376
    21316        0.371
    1550025      0.368
    648025       0.364
    649636       0.361
    4363921      0.361
    6724         0.359
    1454436      0.352
    1572516      0.351
    6889         0.345
    2152089      0.341
    8836         0.339
    4393216      0.337
    49729        0.333
    9025         0.328
    4380649      0.320
    674041       0.319
    7744         0.317
    8100         0.315
    3545689      0.314
    68644        0.311
    48841        0.310
    4765489      0.309
    4923961      0.303
    69169        0.301
    202500       0.292
    2856100      0.289
    102400       0.288
    1976836      0.286
    ...            ...
    2280100     -0.209
    1610361     -0.213
    708964      -0.213
    243049      -0.213
    1311025     -0.214
    386884      -0.214
    383161      -0.214
    2277081     -0.214
    3751969     -0.216
    1288225     -0.216
    142884      -0.225
    5531904     -0.225
    144400      -0.225
    5541316     -0.225
    872356      -0.227
    1038361     -0.227
    3196944     -0.229
    1763584     -0.230
    114921      -0.232
    4389025     -0.232
    1040400     -0.233
    304704      -0.233
    8464        -0.235
    8649        -0.239
    5143824     -0.247
    495616      -0.252
    614656      -0.302
    1510441     -0.302
    2268036     -0.317
    2271049     -0.337

    [2465 rows x 1 columns]
    0.424688872693

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/7dbf48e6c4a34388




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  7.889 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
