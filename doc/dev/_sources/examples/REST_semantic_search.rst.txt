

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = ce1154687cd44bf4

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/ce1154687cd44bf4

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 0ec7a7b4e4d04faa
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.420
    2152089      0.382
    21316        0.380
    3545689      0.374
    4116841      0.373
    1454436      0.352
    68644        0.335
    1572516      0.333
    69169        0.333
    4923961      0.327
    102400       0.307
    674041       0.298
    1550025      0.298
    224676       0.298
    649636       0.294
    648025       0.293
    2022084      0.289
    5089536      0.285
    776161       0.284
    1682209      0.284
    2856100      0.282
    202500       0.282
    49729        0.279
    3748096      0.278
    1276900      0.277
    1274641      0.277
    1976836      0.275
    225625       0.274
    3225616      0.270
    3632836      0.269
    ...            ...
    904401      -0.214
    906304      -0.215
    385641      -0.219
    1763584     -0.222
    4214809     -0.226
    3751969     -0.226
    1288225     -0.226
    3312400     -0.227
    3196944     -0.228
    122500      -0.231
    1038361     -0.233
    1040400     -0.234
    4389025     -0.236
    1085764     -0.236
    8649        -0.236
    8464        -0.237
    1607824     -0.245
    1610361     -0.246
    708964      -0.246
    1083681     -0.249
    114921      -0.250
    1311025     -0.250
    3844        -0.250
    4301476     -0.250
    495616      -0.264
    1510441     -0.282
    614656      -0.282
    5143824     -0.285
    2268036     -0.305
    2271049     -0.321

    [2465 rows x 1 columns]
    0.419802280122

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/ce1154687cd44bf4




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  7.493 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
