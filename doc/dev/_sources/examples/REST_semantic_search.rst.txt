

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = e8d7668623d24735

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/e8d7668623d24735

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = aa04f004e079417b
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.483
    21316        0.459
    3545689      0.430
    1572516      0.421
    2152089      0.416
    674041       0.412
    4116841      0.410
    1550025      0.400
    648025       0.399
    649636       0.398
    1454436      0.398
    102400       0.396
    68644        0.394
    202500       0.394
    69169        0.391
    1976836      0.389
    4923961      0.389
    5089536      0.384
    1274641      0.378
    1276900      0.377
    3748096      0.376
    21609        0.376
    224676       0.375
    2856100      0.372
    2022084      0.371
    4532641      0.371
    49729        0.370
    66049        0.369
    66564        0.367
    4910656      0.365
    ...            ...
    304704       0.178
    2280100      0.178
    455625       0.178
    467856       0.178
    904401       0.177
    570025       0.176
    906304       0.176
    5085025      0.176
    130321       0.175
    4293184      0.174
    1607824      0.173
    5143824      0.172
    1038361      0.171
    708964       0.170
    1610361      0.170
    1040400      0.170
    3196944      0.169
    8464         0.169
    4389025      0.169
    3312400      0.168
    8649         0.168
    1085764      0.167
    1288225      0.167
    3751969      0.167
    1083681      0.164
    495616       0.156
    2268036      0.153
    2271049      0.152
    614656       0.150
    1510441      0.150

    [2465 rows x 1 columns]
    0.482677493654

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/e8d7668623d24735




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.624 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
