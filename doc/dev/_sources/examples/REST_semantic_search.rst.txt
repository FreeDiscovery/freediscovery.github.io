

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 80f840c9307c474b

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/80f840c9307c474b

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = b156acdd9cb74224
      => SVD decomposition with 100 dimensions explaining 76.50 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.412
    1572516      0.376
    21316        0.366
    2152089      0.349
    674041       0.348
    4116841      0.339
    202500       0.332
    1976836      0.327
    3545689      0.326
    68644        0.322
    1454436      0.320
    69169        0.315
    4923961      0.312
    776161       0.308
    1682209      0.308
    1274641      0.301
    1276900      0.300
    3748096      0.300
    102400       0.293
    774400       0.289
    777924       0.289
    1684804      0.286
    1550025      0.286
    648025       0.282
    649636       0.280
    3286969      0.277
    2013561      0.277
    5089536      0.275
    2217121      0.268
    266256       0.267
    ...            ...
    3663396     -0.217
    385641      -0.218
    1140624     -0.219
    2277081     -0.220
    1136356     -0.223
    1607824     -0.224
    3448449     -0.224
    3844        -0.224
    4301476     -0.224
    2280100     -0.227
    4214809     -0.228
    114921      -0.230
    1610361     -0.233
    708964      -0.233
    1763584     -0.240
    386884      -0.246
    383161      -0.246
    5143824     -0.250
    495616      -0.262
    304704      -0.262
    3196944     -0.266
    1038361     -0.266
    4389025     -0.267
    8464        -0.269
    1040400     -0.270
    8649        -0.270
    1510441     -0.288
    614656      -0.288
    2268036     -0.327
    2271049     -0.340

    [2465 rows x 1 columns]
    0.412471861951

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/80f840c9307c474b




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.162 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
