

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = ff2676e1ac2349c8

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/ff2676e1ac2349c8

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 347b2c3031194f34
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.463
    21316        0.434
    4116841      0.414
    1572516      0.414
    2152089      0.403
    674041       0.401
    1454436      0.400
    68644        0.395
    69169        0.394
    3545689      0.392
    4923961      0.391
    1550025      0.386
    649636       0.383
    648025       0.382
    202500       0.376
    3225616      0.375
    1976836      0.372
    776161       0.371
    1682209      0.371
    1276900      0.370
    2560000      0.370
    1274641      0.369
    3748096      0.369
    49729        0.369
    1048576      0.368
    14641        0.368
    774400       0.367
    2856100      0.367
    777924       0.366
    558009       0.365
    ...            ...
    4704561      0.183
    4239481      0.182
    1038361      0.182
    1040400      0.182
    1288225      0.181
    3751969      0.181
    228484       0.181
    122500       0.181
    4389025      0.181
    8649         0.180
    1083681      0.180
    8464         0.180
    2280100      0.179
    4571044      0.178
    385641       0.177
    1311025      0.177
    2277081      0.176
    101761       0.176
    114921       0.173
    2226064      0.172
    5085025      0.171
    1763584      0.171
    304704       0.170
    872356       0.167
    5143824      0.165
    614656       0.163
    1510441      0.163
    495616       0.160
    2268036      0.139
    2271049      0.134

    [2465 rows x 1 columns]
    0.463273202894

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/ff2676e1ac2349c8




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.364 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
