

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 7fa571ae97214c8a

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/7fa571ae97214c8a

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = b4a016dd3c6e4b2b
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.483
    21316        0.452
    4116841      0.426
    1454436      0.411
    3545689      0.408
    1572516      0.406
    2152089      0.402
    202500       0.399
    1976836      0.392
    674041       0.390
    2414916      0.389
    3225616      0.385
    2856100      0.381
    3632836      0.380
    1550025      0.377
    649636       0.375
    648025       0.375
    1048576      0.375
    68644        0.373
    21609        0.373
    3651921      0.373
    69169        0.372
    1227664      0.371
    4923961      0.370
    4532641      0.368
    3243601      0.365
    3636649      0.365
    1052676      0.364
    558009       0.364
    525625       0.363
    ...            ...
    1763584      0.178
    3663396      0.178
    2277081      0.178
    872356       0.177
    708964       0.176
    1610361      0.176
    5085025      0.176
    1288225      0.176
    3751969      0.176
    122500       0.175
    1607824      0.175
    385641       0.174
    898704       0.174
    570025       0.172
    114921       0.172
    455625       0.172
    467856       0.172
    1311025      0.169
    304704       0.167
    3312400      0.166
    2050624      0.166
    1085764      0.163
    243049       0.163
    5143824      0.162
    1083681      0.159
    614656       0.158
    1510441      0.158
    495616       0.151
    2268036      0.143
    2271049      0.142

    [2465 rows x 1 columns]
    0.482742742719

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/7fa571ae97214c8a




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  11.537 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
