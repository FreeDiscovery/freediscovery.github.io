

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 646e4a04aadb434d

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/646e4a04aadb434d

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = ca2850b350ea4b34
      => SVD decomposition with 100 dimensions explaining 76.44 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.442
    21316        0.402
    4116841      0.369
    2152089      0.355
    1454436      0.348
    1550025      0.332
    648025       0.329
    649636       0.326
    3545689      0.324
    1572516      0.323
    68644        0.317
    6724         0.316
    4363921      0.312
    6889         0.309
    4923961      0.306
    69169        0.305
    1274641      0.302
    8836         0.300
    4393216      0.299
    1276900      0.299
    3748096      0.297
    9025         0.294
    674041       0.293
    202500       0.283
    3225616      0.283
    1976836      0.281
    4532641      0.279
    1048576      0.277
    21609        0.275
    49729        0.274
    ...            ...
    3312400     -0.210
    4410000     -0.211
    1288225     -0.212
    3751969     -0.212
    1085764     -0.214
    1311025     -0.215
    1083681     -0.217
    1607824     -0.221
    114921      -0.223
    386884      -0.223
    383161      -0.223
    385641      -0.224
    4389025     -0.225
    8464        -0.226
    1038361     -0.228
    1610361     -0.230
    708964      -0.230
    8649        -0.230
    3196944     -0.232
    2277081     -0.232
    1040400     -0.233
    1763584     -0.249
    5143824     -0.251
    2280100     -0.251
    304704      -0.264
    495616      -0.267
    1510441     -0.271
    614656      -0.271
    2268036     -0.328
    2271049     -0.338

    [2465 rows x 1 columns]
    0.442384691277

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/646e4a04aadb434d




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.864 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
