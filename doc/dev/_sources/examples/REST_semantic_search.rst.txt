

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 81a46edcdbd940c2

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/81a46edcdbd940c2

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 8b721f5a4cf34a93
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.449
    21316        0.400
    1572516      0.390
    2152089      0.383
    674041       0.352
    3545689      0.349
    4116841      0.346
    1454436      0.322
    1550025      0.306
    648025       0.304
    649636       0.303
    102400       0.301
    202500       0.297
    68644        0.295
    3748096      0.294
    1274641      0.292
    1276900      0.292
    1682209      0.291
    776161       0.291
    1976836      0.290
    69169        0.290
    4923961      0.289
    5089536      0.284
    777924       0.278
    774400       0.278
    1684804      0.278
    49729        0.277
    3225616      0.276
    3286969      0.276
    2856100      0.275
    ...            ...
    2277081     -0.210
    1083681     -0.211
    304704      -0.212
    1288225     -0.214
    3751969     -0.214
    872356      -0.214
    5085025     -0.214
    3600        -0.219
    3196944     -0.221
    1038361     -0.224
    4293184     -0.224
    1607824     -0.226
    4389025     -0.226
    1040400     -0.226
    708964      -0.228
    1610361     -0.228
    8464        -0.228
    3663396     -0.228
    8649        -0.229
    243049      -0.230
    122500      -0.234
    4214809     -0.234
    114921      -0.255
    1311025     -0.260
    614656      -0.267
    1510441     -0.267
    495616      -0.267
    5143824     -0.300
    2268036     -0.309
    2271049     -0.322

    [2465 rows x 1 columns]
    0.449173793567

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/81a46edcdbd940c2




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  11.287 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
