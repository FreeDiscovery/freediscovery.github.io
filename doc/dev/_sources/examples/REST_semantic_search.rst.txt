

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 74833ca36c20480f

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/74833ca36c20480f

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 60737fae3e634133
      => SVD decomposition with 100 dimensions explaining 76.43 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.426
    21316        0.376
    4116841      0.358
    1572516      0.345
    1454436      0.338
    674041       0.315
    21609        0.313
    202500       0.312
    1550025      0.311
    49729        0.309
    2152089      0.307
    3225616      0.307
    648025       0.306
    649636       0.306
    4532641      0.303
    1976836      0.301
    102400       0.298
    1048576      0.295
    14641        0.291
    68644        0.286
    48841        0.286
    4765489      0.284
    69169        0.282
    4923961      0.279
    5089536      0.279
    6724         0.278
    4464769      0.277
    4363921      0.277
    3243601      0.273
    3545689      0.273
    ...            ...
    1311025     -0.215
    114921      -0.220
    386884      -0.221
    383161      -0.221
    1607824     -0.223
    1610361     -0.225
    708964      -0.225
    1288225     -0.226
    3751969     -0.226
    2277081     -0.227
    1296        -0.227
    228484      -0.232
    42025       -0.234
    908209      -0.238
    614656      -0.238
    1510441     -0.238
    42436       -0.239
    3312400     -0.243
    904401      -0.245
    1085764     -0.246
    1763584     -0.246
    906304      -0.247
    4214809     -0.247
    4704561     -0.250
    1083681     -0.253
    5143824     -0.257
    304704      -0.257
    495616      -0.268
    2268036     -0.334
    2271049     -0.341

    [2465 rows x 1 columns]
    0.426148161559

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/74833ca36c20480f




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.071 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
