

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = d748af596dbb4563

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/d748af596dbb4563

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 74e8ab8323434935
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.474
    21316        0.440
    4116841      0.422
    1550025      0.419
    648025       0.417
    649636       0.416
    2152089      0.411
    1454436      0.409
    1572516      0.409
    3545689      0.404
    674041       0.392
    202500       0.379
    776161       0.379
    1682209      0.379
    68644        0.378
    49729        0.378
    21609        0.377
    4532641      0.376
    4923961      0.376
    69169        0.375
    1976836      0.375
    4363921      0.374
    3632836      0.374
    3225616      0.371
    6724         0.371
    777924       0.370
    774400       0.370
    4141225      0.369
    1684804      0.369
    4393216      0.369
    ...            ...
    2050624      0.180
    898704       0.180
    4704561      0.178
    243049       0.177
    1607824      0.177
    130321       0.177
    3312400      0.177
    708964       0.177
    1610361      0.177
    872356       0.176
    4214809      0.175
    1750329      0.175
    1085764      0.175
    2025         0.175
    4239481      0.175
    122500       0.175
    1763584      0.173
    1083681      0.173
    114921       0.171
    1288225      0.170
    3751969      0.170
    1311025      0.169
    2277081      0.168
    2280100      0.167
    495616       0.162
    5143824      0.162
    614656       0.152
    1510441      0.152
    2268036      0.147
    2271049      0.144

    [2465 rows x 1 columns]
    0.473803207429

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/d748af596dbb4563




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.916 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
