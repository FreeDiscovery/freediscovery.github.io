

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = ce5914eabe3948fb

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/ce5914eabe3948fb

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 73a27fab4fd84553
      => SVD decomposition with 100 dimensions explaining 76.43 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.456
    21316        0.417
    1572516      0.376
    4116841      0.374
    2152089      0.370
    1454436      0.352
    674041       0.346
    1550025      0.344
    648025       0.340
    649636       0.338
    202500       0.318
    3545689      0.317
    1976836      0.313
    102400       0.306
    21609        0.303
    6724         0.303
    4363921      0.298
    4532641      0.296
    68644        0.288
    8836         0.287
    69169        0.284
    1682209      0.284
    776161       0.284
    4393216      0.284
    6889         0.283
    5089536      0.283
    3225616      0.281
    49729        0.279
    4923961      0.277
    2856100      0.274
    ...            ...
    304704      -0.231
    1040400     -0.231
    114921      -0.233
    1311025     -0.233
    4214809     -0.235
    1763584     -0.235
    4389025     -0.237
    8464        -0.237
    1607824     -0.238
    8649        -0.238
    708964      -0.244
    1610361     -0.244
    5541316     -0.245
    142884      -0.245
    5531904     -0.245
    144400      -0.245
    3751969     -0.245
    1288225     -0.245
    383161      -0.246
    386884      -0.246
    385641      -0.251
    1085764     -0.257
    3312400     -0.257
    5143824     -0.263
    1083681     -0.265
    495616      -0.269
    2268036     -0.286
    1510441     -0.302
    614656      -0.302
    2271049     -0.307

    [2465 rows x 1 columns]
    0.456004300552

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/ce5914eabe3948fb




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.252 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
