

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 1c91f44e073946f3

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/1c91f44e073946f3

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 71c6d583e515428d
      => SVD decomposition with 100 dimensions explaining 76.51 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.449
    21316        0.399
    2152089      0.385
    4116841      0.376
    1454436      0.350
    1550025      0.333
    1572516      0.330
    68644        0.329
    4363921      0.329
    6889         0.328
    649636       0.327
    648025       0.327
    69169        0.325
    6724         0.324
    3545689      0.324
    4923961      0.322
    3225616      0.317
    9025         0.307
    1048576      0.305
    202500       0.302
    49729        0.302
    4393216      0.302
    8836         0.302
    674041       0.301
    1976836      0.298
    776161       0.295
    1682209      0.295
    774400       0.286
    777924       0.283
    1684804      0.280
    ...            ...
    4410000     -0.207
    3751969     -0.207
    1288225     -0.207
    383161      -0.208
    386884      -0.208
    101761      -0.209
    1607824     -0.212
    1610361     -0.213
    708964      -0.213
    4389025     -0.214
    1763584     -0.215
    8649        -0.215
    8464        -0.216
    114921      -0.217
    3312400     -0.219
    1311025     -0.219
    2050624     -0.220
    5085025     -0.220
    1085764     -0.223
    385641      -0.223
    872356      -0.231
    1083681     -0.232
    304704      -0.234
    243049      -0.237
    5143824     -0.240
    495616      -0.273
    614656      -0.282
    1510441     -0.282
    2268036     -0.347
    2271049     -0.366

    [2465 rows x 1 columns]
    0.448986478849

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/1c91f44e073946f3




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.344 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
