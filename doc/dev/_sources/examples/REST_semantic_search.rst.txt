

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = f1e34c1cfd6f47b9

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/f1e34c1cfd6f47b9

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 73cc83ab00fb4868
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    202500       0.485
    1976836      0.477
    481636       0.471
    4528384      0.442
    770884       0.436
    1677025      0.436
    266256       0.432
    4363921      0.429
    3748096      0.428
    6724         0.424
    1274641      0.424
    1276900      0.423
    6889         0.422
    3651921      0.418
    4393216      0.416
    8836         0.412
    1227664      0.411
    21316        0.409
    9025         0.408
    2217121      0.404
    2096704      0.403
    342225       0.401
    776161       0.399
    1682209      0.399
    4116841      0.394
    3632836      0.394
    1454436      0.393
    3545689      0.392
    3667225      0.391
    3541924      0.389
    ...            ...
    3952144      0.155
    1844164      0.154
    4782969      0.154
    4571044      0.154
    46656        0.153
    4752400      0.153
    114921       0.153
    4481689      0.153
    4384836      0.152
    1085764      0.151
    4284900      0.150
    130321       0.150
    23409        0.149
    495616       0.149
    16384        0.148
    8281         0.148
    3312400      0.148
    118336       0.148
    51076        0.148
    4214809      0.147
    1083681      0.146
    119025       0.146
    47524        0.146
    25281        0.145
    1296         0.143
    3249         0.141
    5166529      0.141
    4239481      0.135
    5184729      0.135
    2025         0.131

    [2465 rows x 1 columns]
    0.485405136134

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/f1e34c1cfd6f47b9




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.324 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
