

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = c22214147e924f49

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/c22214147e924f49

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 5d941c826d774160
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.450
    21316        0.399
    1572516      0.381
    4116841      0.358
    674041       0.353
    1454436      0.334
    1550025      0.332
    648025       0.328
    649636       0.328
    2152089      0.326
    2856100      0.319
    3545689      0.316
    4363921      0.302
    68644        0.299
    6724         0.299
    69169        0.294
    202500       0.291
    4923961      0.290
    8836         0.287
    4393216      0.287
    1976836      0.286
    6889         0.281
    21609        0.279
    9025         0.275
    776161       0.273
    1682209      0.273
    49729        0.272
    4532641      0.271
    224676       0.270
    2022084      0.269
    ...            ...
    3448449     -0.203
    2050624     -0.204
    1136356     -0.205
    1085764     -0.206
    3751969     -0.208
    1288225     -0.208
    904401      -0.209
    906304      -0.211
    1607824     -0.213
    2280100     -0.214
    385641      -0.216
    1083681     -0.216
    243049      -0.217
    4571044     -0.217
    2277081     -0.218
    1610361     -0.220
    708964      -0.220
    898704      -0.225
    1763584     -0.226
    872356      -0.227
    122500      -0.239
    304704      -0.242
    1311025     -0.255
    114921      -0.256
    495616      -0.266
    5143824     -0.287
    1510441     -0.291
    614656      -0.291
    2268036     -0.352
    2271049     -0.372

    [2465 rows x 1 columns]
    0.450315471329

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/c22214147e924f49




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  7.716 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
