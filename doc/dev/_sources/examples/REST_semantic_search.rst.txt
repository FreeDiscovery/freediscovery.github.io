

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = a30d17f8227740d6

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/a30d17f8227740d6

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 01aee7e226374a0d
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 document_id  score
    internal_id                    
    0                      0  0.295
    1                      1  0.337
    2                      4  0.229
    3                      9  0.240
    4                     16  0.225
    5                     25  0.243
    6                     36  0.247
    7                     49  0.242
    8                     64  0.245
    9                     81  0.245
    10                   100  0.248
    11                   121  0.238
    12                   144  0.250
    13                   169  0.242
    14                   196  0.173
    15                   225  0.184
    16                   256  0.293
    17                   289  0.277
    18                   324  0.214
    19                   361  0.174
    20                   400  0.181
    21                   441  0.271
    22                   484  0.232
    23                   529  0.232
    24                   576  0.181
    25                   625  0.268
    26                   676  0.261
    27                   729  0.155
    28                   784  0.287
    29                   841  0.275
    ...                  ...    ...
    2435             5929225  0.270
    2436             5934096  0.249
    2437             5938969  0.208
    2438             5943844  0.208
    2439             5948721  0.241
    2440             5953600  0.199
    2441             5958481  0.242
    2442             5963364  0.199
    2443             5968249  0.257
    2444             5973136  0.219
    2445             5978025  0.247
    2446             5982916  0.209
    2447             5987809  0.241
    2448             5992704  0.201
    2449             5997601  0.250
    2450             6002500  0.207
    2451             6007401  0.253
    2452             6012304  0.215
    2453             6017209  0.233
    2454             6022116  0.193
    2455             6027025  0.189
    2456             6031936  0.238
    2457             6036849  0.203
    2458             6041764  0.247
    2459             6046681  0.226
    2460             6051600  0.237
    2461             6056521  0.261
    2462             6061444  0.225
    2463             6066369  0.203
    2464             6071296  0.213

    [2465 rows x 2 columns]
    0.456180064053

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/a30d17f8227740d6




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('internal_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.387 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
