

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 0d7e1261568e4c88

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/0d7e1261568e4c88

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = e297470b22094815
      => SVD decomposition with 100 dimensions explaining 76.42 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.434
    4116841      0.407
    21316        0.381
    1454436      0.375
    2152089      0.356
    1572516      0.349
    1550025      0.342
    649636       0.338
    68644        0.336
    648025       0.335
    69169        0.334
    4923961      0.330
    3545689      0.328
    674041       0.309
    21609        0.295
    102400       0.284
    3225616      0.283
    4532641      0.281
    4141225      0.276
    289          0.272
    14641        0.272
    202500       0.271
    3651921      0.270
    1227664      0.270
    49729        0.269
    2856100      0.269
    4363921      0.268
    1048576      0.267
    776161       0.265
    1682209      0.265
    ...            ...
    1040400     -0.218
    1288225     -0.219
    3751969     -0.219
    1296        -0.220
    3600        -0.220
    385641      -0.221
    455625      -0.221
    467856      -0.221
    2277081     -0.221
    3196944     -0.222
    1607824     -0.226
    708964      -0.229
    1610361     -0.229
    130321      -0.229
    5202961     -0.232
    4293184     -0.235
    114921      -0.236
    3312400     -0.237
    122500      -0.238
    1085764     -0.239
    4214809     -0.245
    1083681     -0.251
    2268036     -0.261
    1510441     -0.265
    614656      -0.265
    1311025     -0.266
    1763584     -0.269
    5143824     -0.280
    2271049     -0.282
    495616      -0.285

    [2465 rows x 1 columns]
    0.433967905729

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/0d7e1261568e4c88




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.279 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
