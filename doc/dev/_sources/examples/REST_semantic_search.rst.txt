

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 4665ecd671e04b65

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/4665ecd671e04b65

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = b3a37db09cac4153
      => SVD decomposition with 100 dimensions explaining 76.47 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.422
    21316        0.372
    4116841      0.372
    3545689      0.363
    1550025      0.353
    1454436      0.352
    2152089      0.350
    648025       0.349
    1572516      0.348
    649636       0.347
    68644        0.321
    4923961      0.314
    69169        0.310
    674041       0.308
    14641        0.297
    202500       0.290
    4464769      0.289
    3286969      0.285
    4363921      0.283
    2013561      0.282
    1976836      0.281
    2856100      0.279
    1274641      0.279
    3748096      0.278
    18496        0.278
    4498641      0.277
    1276900      0.277
    6724         0.276
    224676       0.275
    18769        0.272
    ...            ...
    1750329     -0.211
    304704      -0.211
    3600        -0.213
    1288225     -0.214
    3751969     -0.214
    3663396     -0.215
    15129       -0.219
    1311025     -0.219
    1607824     -0.221
    2280100     -0.224
    1610361     -0.226
    708964      -0.226
    1763584     -0.226
    2277081     -0.228
    114921      -0.228
    4468996     -0.230
    2050624     -0.238
    4389025     -0.246
    8464        -0.247
    1038361     -0.248
    3196944     -0.248
    8649        -0.249
    1040400     -0.252
    243049      -0.255
    5143824     -0.259
    1510441     -0.265
    614656      -0.265
    495616      -0.267
    2268036     -0.305
    2271049     -0.318

    [2465 rows x 1 columns]
    0.421743272198

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/4665ecd671e04b65




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  7.546 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
