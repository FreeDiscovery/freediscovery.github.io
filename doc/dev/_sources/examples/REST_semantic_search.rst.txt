

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 1e9959cab6f24e07

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/1e9959cab6f24e07

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 24593c56afe94223
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.445
    4116841      0.426
    21316        0.421
    2152089      0.417
    1454436      0.417
    68644        0.411
    3545689      0.408
    4923961      0.406
    1550025      0.406
    69169        0.404
    648025       0.404
    649636       0.403
    1572516      0.388
    1274641      0.378
    1276900      0.377
    3748096      0.376
    49729        0.374
    6724         0.374
    674041       0.373
    3632836      0.373
    4363921      0.372
    3225616      0.372
    6889         0.372
    2856100      0.370
    1048576      0.370
    224676       0.370
    14641        0.368
    776161       0.368
    1682209      0.368
    2022084      0.367
    ...            ...
    130321       0.183
    1288225      0.182
    3751969      0.182
    10404        0.182
    455625       0.181
    467856       0.181
    4410000      0.181
    3663396      0.180
    304704       0.180
    2280100      0.179
    142884       0.177
    144400       0.177
    5531904      0.177
    5541316      0.177
    122500       0.176
    114921       0.174
    2277081      0.174
    243049       0.172
    1607824      0.171
    708964       0.171
    1610361      0.171
    2050624      0.170
    1763584      0.170
    1311025      0.169
    5143824      0.162
    495616       0.155
    2268036      0.153
    2271049      0.151
    614656       0.149
    1510441      0.149

    [2465 rows x 1 columns]
    0.445221048469

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/1e9959cab6f24e07




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  11.401 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
