

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 7e5fc83eca154a81

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/7e5fc83eca154a81

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = e8fa1f32bfef48d7
      => SVD decomposition with 100 dimensions explaining 76.48 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.476
    21316        0.451
    2152089      0.431
    1572516      0.415
    4116841      0.402
    1550025      0.393
    3545689      0.393
    674041       0.392
    1454436      0.392
    648025       0.391
    649636       0.390
    202500       0.390
    1976836      0.388
    4363921      0.386
    68644        0.385
    6724         0.384
    4923961      0.382
    69169        0.381
    6889         0.380
    8836         0.378
    4393216      0.378
    1274641      0.378
    3748096      0.378
    1276900      0.377
    9025         0.376
    2856100      0.375
    776161       0.375
    1682209      0.375
    4532641      0.373
    558009       0.371
    ...            ...
    243049       0.182
    455625       0.181
    467856       0.181
    570025       0.181
    2226064      0.181
    1763584      0.180
    1288225      0.179
    3751969      0.179
    304704       0.178
    3312400      0.178
    1083681      0.176
    385641       0.176
    1085764      0.176
    122500       0.175
    3663396      0.173
    114921       0.172
    1311025      0.170
    872356       0.170
    1038361      0.169
    4389025      0.168
    8464         0.168
    3196944      0.168
    1040400      0.167
    8649         0.167
    5143824      0.165
    495616       0.158
    614656       0.157
    1510441      0.157
    2268036      0.138
    2271049      0.133

    [2465 rows x 1 columns]
    0.476200091405

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/7e5fc83eca154a81




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.406 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
