

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 3fc1a2f792d54dbd

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/3fc1a2f792d54dbd

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 98169a183e0c4343
      => SVD decomposition with 100 dimensions explaining 69.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    5267025      0.505
    5262436      0.498
    115600       0.444
    5148361      0.444
    5157441      0.433
    116964       0.433
    116281       0.419
    5152900      0.419
    3189796      0.336
    3541924      0.323
    1034289      0.318
    1181569      0.306
    565504       0.301
    4464769      0.298
    14641        0.298
    4284900      0.297
    3249         0.295
    5067001      0.294
    97969        0.294
    4260096      0.294
    53361        0.291
    4800481      0.291
    54756        0.285
    73984        0.285
    75625        0.285
    4813636      0.285
    4950625      0.285
    2704         0.283
    6724         0.280
    15625        0.274
    ...            ...
    4064256     -0.197
    954529      -0.197
    2013561     -0.198
    456976      -0.198
    4536900     -0.199
    3286969     -0.199
    2621161     -0.200
    3139984     -0.202
    3115225     -0.202
    193600      -0.202
    3129361     -0.205
    956484      -0.206
    3122289     -0.207
    3136441     -0.207
    4669921     -0.210
    22201       -0.210
    3763600     -0.214
    1292769     -0.214
    3511876     -0.223
    1656369     -0.224
    751689      -0.224
    20164       -0.225
    4515625     -0.225
    2125764     -0.228
    3694084     -0.228
    2268036     -0.244
    376996      -0.263
    2271049     -0.277
    1838736     -0.280
    280900      -0.289

    [2465 rows x 1 columns]
    0.505143745518

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/3fc1a2f792d54dbd




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.070 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
