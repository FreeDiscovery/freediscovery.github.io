

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = ec6ac5d419cc4cb7

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/ec6ac5d419cc4cb7

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = b14c39c2bdb7435b
      => SVD decomposition with 100 dimensions explaining 76.50 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.438
    21316        0.399
    4116841      0.364
    2152089      0.360
    1572516      0.349
    3545689      0.344
    1454436      0.343
    674041       0.315
    3225616      0.313
    68644        0.312
    1550025      0.312
    69169        0.307
    648025       0.307
    649636       0.306
    4923961      0.305
    1048576      0.302
    202500       0.292
    3651921      0.288
    1976836      0.283
    224676       0.281
    1227664      0.281
    776161       0.276
    1682209      0.276
    2022084      0.274
    525625       0.274
    14641        0.273
    3632836      0.268
    66564        0.267
    66049        0.267
    102400       0.267
    ...            ...
    1607824     -0.211
    1610361     -0.213
    708964      -0.213
    386884      -0.214
    383161      -0.214
    385641      -0.217
    570025      -0.219
    5541316     -0.222
    5531904     -0.222
    142884      -0.222
    144400      -0.222
    904401      -0.222
    228484      -0.223
    906304      -0.223
    467856      -0.225
    455625      -0.225
    1311025     -0.225
    114921      -0.225
    2050624     -0.230
    243049      -0.236
    3312400     -0.248
    1085764     -0.250
    1083681     -0.257
    5143824     -0.257
    614656      -0.275
    1510441     -0.275
    495616      -0.280
    2268036     -0.295
    1763584     -0.298
    2271049     -0.312

    [2465 rows x 1 columns]
    0.438381107673

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/ec6ac5d419cc4cb7




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  7.894 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
