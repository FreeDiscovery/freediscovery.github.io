

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 42a194c9dd704a3c

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/42a194c9dd704a3c

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 1d977ce149624d71
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.461
    21316        0.408
    4116841      0.371
    3545689      0.361
    2152089      0.358
    1454436      0.350
    1572516      0.332
    68644        0.317
    1550025      0.317
    648025       0.313
    4923961      0.312
    649636       0.310
    69169        0.310
    674041       0.304
    102400       0.303
    776161       0.291
    1682209      0.291
    5089536      0.291
    49729        0.285
    3632836      0.277
    777924       0.270
    488601       0.268
    1684804      0.268
    2856100      0.268
    14641        0.267
    774400       0.267
    2414916      0.267
    4363921      0.266
    6724         0.265
    4765489      0.264
    ...            ...
    617796      -0.214
    1085764     -0.216
    625681      -0.216
    1527696     -0.216
    3751969     -0.217
    1288225     -0.217
    1083681     -0.221
    2277081     -0.222
    1311025     -0.223
    2280100     -0.227
    2226064     -0.228
    1763584     -0.229
    114921      -0.229
    304704      -0.232
    1038361     -0.240
    3196944     -0.242
    1040400     -0.244
    1607824     -0.246
    1610361     -0.248
    708964      -0.248
    4389025     -0.248
    872356      -0.250
    8464        -0.250
    8649        -0.253
    495616      -0.261
    5143824     -0.262
    614656      -0.288
    1510441     -0.288
    2268036     -0.308
    2271049     -0.322

    [2465 rows x 1 columns]
    0.460748986255

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/42a194c9dd704a3c




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  7.761 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
