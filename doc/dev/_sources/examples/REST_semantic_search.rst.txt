

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 3a56959a114b4324

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/3a56959a114b4324

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = acbf62ce311940ac
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.427
    21316        0.395
    1572516      0.390
    2152089      0.381
    674041       0.357
    3545689      0.349
    776161       0.344
    1682209      0.344
    774400       0.321
    777924       0.320
    1684804      0.320
    4116841      0.318
    1454436      0.301
    202500       0.298
    68644        0.297
    69169        0.294
    1550025      0.291
    4363921      0.289
    6724         0.288
    649636       0.287
    4923961      0.287
    648025       0.287
    1976836      0.285
    6889         0.282
    102400       0.279
    3225616      0.276
    2856100      0.275
    8836         0.271
    1048576      0.271
    4393216      0.270
    ...            ...
    908209      -0.208
    4389025     -0.209
    243049      -0.209
    8649        -0.209
    1038361     -0.209
    1311025     -0.210
    872356      -0.210
    3196944     -0.210
    3751969     -0.212
    1288225     -0.212
    1040400     -0.212
    4410000     -0.215
    114921      -0.216
    5085025     -0.221
    385641      -0.223
    904401      -0.227
    3663396     -0.228
    906304      -0.229
    1085764     -0.233
    4301476     -0.234
    3844        -0.234
    3312400     -0.236
    1763584     -0.238
    1083681     -0.239
    495616      -0.246
    5143824     -0.254
    614656      -0.280
    1510441     -0.280
    2268036     -0.305
    2271049     -0.318

    [2465 rows x 1 columns]
    0.427344388811

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/3a56959a114b4324




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.350 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
