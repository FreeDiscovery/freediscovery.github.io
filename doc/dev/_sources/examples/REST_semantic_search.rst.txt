

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = 89dcea6e1ef44df1

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/89dcea6e1ef44df1

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 82686e8bcb1a40be
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 document_id  score
    internal_id                    
    0                      0  1.336
    1                      1  1.365
    2                      4  1.281
    3                      9  1.285
    4                     16  1.271
    5                     25  1.285
    6                     36  1.288
    7                     49  1.283
    8                     64  1.291
    9                     81  1.288
    10                   100  1.290
    11                   121  1.266
    12                   144  1.271
    13                   169  1.283
    14                   196  1.214
    15                   225  1.212
    16                   256  1.329
    17                   289  1.294
    18                   324  1.242
    19                   361  1.228
    20                   400  1.211
    21                   441  1.314
    22                   484  1.288
    23                   529  1.284
    24                   576  1.229
    25                   625  1.313
    26                   676  1.286
    27                   729  1.217
    28                   784  1.325
    29                   841  1.296
    ...                  ...    ...
    2435             5929225  1.316
    2436             5934096  1.290
    2437             5938969  1.246
    2438             5943844  1.242
    2439             5948721  1.282
    2440             5953600  1.234
    2441             5958481  1.282
    2442             5963364  1.233
    2443             5968249  1.305
    2444             5973136  1.265
    2445             5978025  1.287
    2446             5982916  1.244
    2447             5987809  1.282
    2448             5992704  1.238
    2449             5997601  1.289
    2450             6002500  1.249
    2451             6007401  1.289
    2452             6012304  1.246
    2453             6017209  1.271
    2454             6022116  1.226
    2455             6027025  1.233
    2456             6031936  1.284
    2457             6036849  1.239
    2458             6041764  1.285
    2459             6046681  1.261
    2460             6051600  1.276
    2461             6056521  1.285
    2462             6061444  1.276
    2463             6066369  1.240
    2464             6071296  1.267

    [2465 rows x 2 columns]
    1.47704212515

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/89dcea6e1ef44df1




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('internal_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 1 minutes  0.156 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
