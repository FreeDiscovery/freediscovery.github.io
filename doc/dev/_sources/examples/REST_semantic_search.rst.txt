

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = fbebfe1ed2374af1

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/fbebfe1ed2374af1

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 9d22b2c4187e4b5b
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.462
    21316        0.439
    1572516      0.416
    2152089      0.415
    4116841      0.409
    3545689      0.408
    1454436      0.399
    674041       0.399
    68644        0.397
    69169        0.392
    102400       0.392
    4923961      0.391
    202500       0.382
    5089536      0.380
    1976836      0.379
    2856100      0.377
    1550025      0.376
    776161       0.376
    1682209      0.376
    3651921      0.374
    3225616      0.374
    648025       0.373
    649636       0.372
    1274641      0.371
    66049        0.370
    1227664      0.370
    1276900      0.370
    3748096      0.370
    1048576      0.369
    66564        0.369
    ...            ...
    101761       0.175
    243049       0.175
    4293184      0.175
    4214809      0.175
    906304       0.174
    3844         0.174
    4301476      0.174
    708964       0.174
    1610361      0.174
    142884       0.173
    144400       0.173
    5531904      0.173
    5541316      0.173
    3312400      0.173
    872356       0.172
    304704       0.172
    383161       0.171
    386884       0.171
    1085764      0.171
    385641       0.171
    5085025      0.171
    114921       0.170
    1083681      0.168
    5143824      0.163
    1763584      0.158
    495616       0.158
    2268036      0.157
    614656       0.152
    1510441      0.152
    2271049      0.151

    [2465 rows x 1 columns]
    0.461912871051

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/fbebfe1ed2374af1




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.760 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
