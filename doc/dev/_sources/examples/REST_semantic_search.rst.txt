

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 4494e0587a2d4ea5

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/4494e0587a2d4ea5

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = cff8ed62f8c54467
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.456
    202500       0.440
    481636       0.438
    3748096      0.434
    1976836      0.432
    1274641      0.431
    1276900      0.430
    3651921      0.429
    1227664      0.419
    21316        0.416
    266256       0.413
    770884       0.409
    1677025      0.409
    2217121      0.408
    776161       0.406
    1682209      0.406
    3545689      0.405
    3667225      0.404
    1234321      0.395
    564001       0.392
    3632836      0.389
    342225       0.387
    2096704      0.383
    1684804      0.382
    1550025      0.382
    3655744      0.380
    648025       0.379
    1238769      0.379
    777924       0.379
    1236544      0.379
    ...            ...
    4782969      0.154
    8649         0.154
    3600         0.153
    5184729      0.153
    10404        0.153
    8281         0.152
    6084         0.152
    908209       0.152
    304704       0.152
    3744225      0.151
    4239481      0.151
    4214809      0.151
    118336       0.151
    152881       0.150
    5755201      0.149
    866761       0.149
    51076        0.149
    151321       0.149
    119025       0.148
    2184484      0.148
    3249         0.147
    2025         0.145
    1296         0.144
    5166529      0.144
    495616       0.141
    906304       0.140
    904401       0.140
    1085764      0.137
    3312400      0.136
    1083681      0.135

    [2465 rows x 1 columns]
    0.456152045482

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/4494e0587a2d4ea5




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.606 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
