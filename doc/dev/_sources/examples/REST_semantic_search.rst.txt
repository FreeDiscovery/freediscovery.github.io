

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = caa124462f5e45c0

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/caa124462f5e45c0

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = aa2c16d27e1c4f7a
      => SVD decomposition with 100 dimensions explaining 69.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    5267025      0.536
    5262436      0.528
    115600       0.438
    5148361      0.438
    5157441      0.435
    116964       0.435
    116281       0.388
    5152900      0.388
    5271616      0.342
    5067001      0.333
    97969        0.333
    4813636      0.327
    75625        0.327
    73984        0.327
    54756        0.327
    4950625      0.327
    4800481      0.327
    53361        0.327
    3617604      0.299
    3625216      0.299
    1210000      0.299
    1214404      0.299
    1218816      0.299
    43264        0.290
    2500         0.288
    4251844      0.288
    3175524      0.282
    1028196      0.281
    145161       0.274
    5546025      0.273
    ...            ...
    62500       -0.196
    4884100     -0.196
    3511876     -0.196
    954529      -0.198
    2621161     -0.198
    529         -0.202
    7396        -0.203
    4186116     -0.203
    4515625     -0.205
    22201       -0.205
    20164       -0.206
    9409        -0.207
    3694084     -0.209
    263169      -0.210
    66564       -0.210
    4910656     -0.211
    956484      -0.211
    280900      -0.215
    3125824     -0.225
    3118756     -0.225
    3132900     -0.227
    577600      -0.229
    3139984     -0.229
    193600      -0.229
    3115225     -0.233
    3122289     -0.236
    3129361     -0.236
    3136441     -0.238
    3701776     -0.243
    3671056     -0.243

    [2465 rows x 1 columns]
    0.536490040637

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/caa124462f5e45c0




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.343 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
