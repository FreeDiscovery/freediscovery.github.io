

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 4e650eb4a83a49b6

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/4e650eb4a83a49b6

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = c0fb4aff8e3d45b1
      => SVD decomposition with 100 dimensions explaining 76.50 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.469
    21316        0.442
    4116841      0.429
    1572516      0.420
    2152089      0.419
    1454436      0.415
    674041       0.399
    3545689      0.398
    68644        0.394
    69169        0.390
    4923961      0.390
    4363921      0.389
    1550025      0.386
    648025       0.383
    649636       0.383
    6724         0.382
    202500       0.381
    49729        0.381
    6889         0.381
    1976836      0.378
    558009       0.377
    4393216      0.376
    8836         0.376
    9025         0.376
    3225616      0.373
    102400       0.371
    48841        0.371
    4765489      0.370
    3748096      0.366
    1274641      0.366
    ...            ...
    898704       0.180
    2280100      0.179
    243049       0.178
    101761       0.177
    904401       0.177
    2277081      0.177
    906304       0.176
    5085025      0.174
    1607824      0.174
    708964       0.173
    1610361      0.173
    122500       0.172
    4293184      0.172
    1763584      0.172
    3600         0.172
    385641       0.171
    3312400      0.171
    383161       0.170
    386884       0.170
    1311025      0.168
    1085764      0.168
    1083681      0.166
    114921       0.166
    304704       0.164
    5143824      0.158
    495616       0.158
    2268036      0.152
    614656       0.151
    1510441      0.151
    2271049      0.145

    [2465 rows x 1 columns]
    0.469364973864

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/4e650eb4a83a49b6




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.469 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
