

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 4511d3d1a8d048dc

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/4511d3d1a8d048dc

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = c3a447ebc8544781
      => SVD decomposition with 100 dimensions explaining 69.80 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    5262436      0.570
    5267025      0.556
    116964       0.455
    5157441      0.455
    5148361      0.451
    115600       0.451
    5067001      0.413
    97969        0.413
    5152900      0.400
    116281       0.400
    53361        0.395
    4800481      0.395
    54756        0.391
    73984        0.391
    75625        0.391
    4950625      0.391
    4813636      0.391
    2500         0.326
    4251844      0.326
    565504       0.289
    1214404      0.286
    1218816      0.286
    1210000      0.286
    3625216      0.286
    3617604      0.286
    1028196      0.266
    3175524      0.266
    43264        0.265
    3541924      0.264
    5271616      0.261
    ...            ...
    66564       -0.184
    4910656     -0.184
    3511876     -0.184
    7396        -0.185
    4186116     -0.186
    1324801     -0.187
    3818116     -0.187
    529         -0.187
    3671056     -0.190
    3701776     -0.190
    4669921     -0.192
    376996      -0.193
    3694084     -0.197
    1838736     -0.198
    4064256     -0.200
    1430416     -0.200
    9409        -0.201
    3268864     -0.203
    263169      -0.207
    751689      -0.219
    1656369     -0.219
    3125824     -0.226
    3118756     -0.230
    3132900     -0.232
    3139984     -0.232
    193600      -0.232
    3115225     -0.238
    3122289     -0.240
    3129361     -0.240
    3136441     -0.240

    [2465 rows x 1 columns]
    0.569591734583

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/4511d3d1a8d048dc




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.196 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
