

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 4c71c38ce2c74a4a

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/4c71c38ce2c74a4a

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 6ec7210e8c7044ad
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.490
    202500       0.458
    21316        0.455
    1976836      0.452
    481636       0.444
    266256       0.438
    2217121      0.427
    3651921      0.420
    776161       0.414
    1682209      0.414
    1227664      0.413
    3545689      0.410
    2096704      0.408
    3632836      0.407
    3748096      0.400
    342225       0.400
    4363921      0.399
    1274641      0.396
    1276900      0.396
    6724         0.395
    6889         0.394
    178084       0.394
    2152089      0.392
    3667225      0.391
    178929       0.390
    3655744      0.390
    4393216      0.389
    4405801      0.388
    3659569      0.387
    1684804      0.387
    ...            ...
    4284900      0.153
    2989441      0.153
    51076        0.153
    114921       0.153
    32041        0.152
    1000000      0.152
    16384        0.152
    5202961      0.152
    25281        0.152
    124609       0.151
    3744225      0.151
    4076361      0.150
    1296         0.150
    1437601      0.148
    130321       0.148
    4743684      0.146
    1085764      0.146
    1083681      0.144
    3312400      0.143
    47524        0.143
    119025       0.143
    118336       0.142
    3249         0.141
    103684       0.141
    5094049      0.140
    5166529      0.140
    46656        0.140
    103041       0.139
    5184729      0.133
    495616       0.131

    [2465 rows x 1 columns]
    0.48973416347

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/4c71c38ce2c74a4a




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  11.440 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
