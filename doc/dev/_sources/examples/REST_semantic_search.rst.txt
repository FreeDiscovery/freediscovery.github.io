

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = ced1be55f3e94a3b

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/ced1be55f3e94a3b

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = de618b000848437f
      => SVD decomposition with 100 dimensions explaining 76.43 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.458
    21316        0.421
    2152089      0.388
    68644        0.361
    1572516      0.360
    69169        0.355
    4923961      0.352
    3545689      0.342
    674041       0.340
    1550025      0.335
    4116841      0.331
    649636       0.329
    648025       0.329
    1276900      0.316
    1274641      0.316
    1454436      0.314
    3748096      0.313
    776161       0.304
    1682209      0.304
    3225616      0.298
    224676       0.295
    2022084      0.294
    1048576      0.292
    102400       0.288
    774400       0.279
    1684804      0.279
    49729        0.278
    777924       0.277
    2217121      0.266
    25921        0.264
    ...            ...
    124609      -0.206
    130321      -0.207
    10404       -0.208
    1038361     -0.208
    1311025     -0.209
    1040400     -0.210
    3196944     -0.211
    8464        -0.215
    8649        -0.215
    3663396     -0.215
    4389025     -0.216
    1288225     -0.220
    3751969     -0.220
    2280100     -0.220
    2277081     -0.223
    1085764     -0.225
    4410000     -0.226
    5202961     -0.227
    3312400     -0.229
    1083681     -0.233
    1607824     -0.235
    708964      -0.238
    1610361     -0.238
    495616      -0.242
    5143824     -0.242
    304704      -0.246
    1510441     -0.276
    614656      -0.276
    2271049     -0.315
    2268036     -0.315

    [2465 rows x 1 columns]
    0.457592759983

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/ced1be55f3e94a3b




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.849 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
