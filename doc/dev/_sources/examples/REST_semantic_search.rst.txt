

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 79d8fcaa6bb74da8

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/79d8fcaa6bb74da8

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 0b3e9a6a45c242da
      => SVD decomposition with 100 dimensions explaining 76.48 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.481
    21316        0.451
    2152089      0.434
    4116841      0.427
    3545689      0.418
    1454436      0.412
    1572516      0.409
    68644        0.403
    69169        0.402
    4923961      0.400
    202500       0.398
    674041       0.398
    1976836      0.395
    1276900      0.391
    1274641      0.390
    3748096      0.390
    3225616      0.385
    1550025      0.384
    649636       0.382
    648025       0.381
    558009       0.379
    1048576      0.377
    21609        0.375
    102400       0.373
    266256       0.370
    2096704      0.369
    2217121      0.368
    4532641      0.368
    525625       0.368
    731025       0.367
    ...            ...
    4743684      0.180
    8649         0.180
    122500       0.180
    8464         0.180
    3663396      0.178
    243049       0.178
    4293184      0.178
    3312400      0.177
    1288225      0.177
    3751969      0.177
    4214809      0.177
    1311025      0.176
    3600         0.176
    1085764      0.174
    2226064      0.174
    4571044      0.173
    101761       0.172
    304704       0.172
    614656       0.171
    1510441      0.171
    114921       0.170
    898704       0.170
    1083681      0.169
    5085025      0.169
    1763584      0.167
    872356       0.166
    5143824      0.164
    495616       0.157
    2268036      0.143
    2271049      0.137

    [2465 rows x 1 columns]
    0.481090628679

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/79d8fcaa6bb74da8




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.340 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
