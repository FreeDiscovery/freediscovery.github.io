

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 7fe4792ce97f48a2

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/7fe4792ce97f48a2

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = a2e82a078cb34e3c
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    3748096      0.437
    481636       0.437
    4528384      0.436
    202500       0.434
    1276900      0.433
    1274641      0.433
    770884       0.432
    1677025      0.432
    1976836      0.424
    3651921      0.420
    1227664      0.415
    4363921      0.411
    6889         0.407
    6724         0.407
    776161       0.406
    1682209      0.406
    21316        0.403
    2217121      0.402
    2143296      0.399
    4393216      0.399
    342225       0.396
    266256       0.394
    8836         0.394
    3667225      0.394
    1684804      0.394
    3632836      0.393
    9025         0.392
    1648656      0.392
    777924       0.391
    774400       0.389
    ...            ...
    57121        0.154
    4384836      0.154
    124609       0.154
    128164       0.154
    8649         0.153
    8464         0.153
    4782969      0.153
    47524        0.153
    1296         0.150
    1392400      0.150
    3988009      0.150
    8281         0.148
    130321       0.147
    4410000      0.147
    3249         0.146
    23409        0.146
    51076        0.146
    1085764      0.146
    25281        0.145
    119025       0.145
    10201        0.144
    10404        0.144
    118336       0.144
    3312400      0.142
    1083681      0.142
    5166529      0.141
    5184729      0.140
    4239481      0.140
    495616       0.136
    2025         0.134

    [2465 rows x 1 columns]
    0.436887351093

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/7fe4792ce97f48a2




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.736 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
