

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 566bbe47d3974676

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/566bbe47d3974676

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = cc9a272348254a62
      => SVD decomposition with 100 dimensions explaining 76.43 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.446
    21316        0.408
    1572516      0.385
    2152089      0.378
    4116841      0.374
    674041       0.361
    1454436      0.349
    49729        0.330
    3545689      0.328
    1682209      0.327
    776161       0.327
    202500       0.325
    1976836      0.318
    68644        0.313
    1550025      0.309
    777924       0.309
    774400       0.307
    69169        0.307
    648025       0.306
    649636       0.306
    1684804      0.305
    3225616      0.304
    4380649      0.302
    8100         0.302
    2856100      0.301
    4923961      0.301
    48841        0.299
    7744         0.299
    4765489      0.297
    1048576      0.288
    ...            ...
    4293184     -0.212
    5202961     -0.213
    614656      -0.213
    1510441     -0.213
    385641      -0.218
    908209      -0.220
    4410000     -0.220
    1296        -0.221
    2050624     -0.222
    5085025     -0.223
    1607824     -0.229
    904401      -0.230
    906304      -0.231
    570025      -0.231
    872356      -0.232
    243049      -0.236
    467856      -0.236
    455625      -0.236
    304704      -0.239
    1610361     -0.240
    708964      -0.240
    2268036     -0.243
    5143824     -0.244
    4214809     -0.246
    3312400     -0.265
    1763584     -0.270
    2271049     -0.273
    495616      -0.276
    1085764     -0.276
    1083681     -0.291

    [2465 rows x 1 columns]
    0.446024584758

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/566bbe47d3974676




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.212 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
