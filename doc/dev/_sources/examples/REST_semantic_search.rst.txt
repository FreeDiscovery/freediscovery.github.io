

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = cc3abce54ab24662

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/cc3abce54ab24662

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = ea16739bbf634693
      => SVD decomposition with 100 dimensions explaining 76.44 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.465
    21316        0.417
    1572516      0.372
    2152089      0.360
    674041       0.337
    4116841      0.332
    202500       0.327
    1976836      0.324
    3545689      0.323
    1550025      0.309
    649636       0.306
    69169        0.304
    1454436      0.304
    648025       0.304
    68644        0.303
    2856100      0.302
    3225616      0.301
    21609        0.300
    4923961      0.297
    1276900      0.295
    3748096      0.294
    1274641      0.293
    4532641      0.292
    558009       0.292
    4363921      0.288
    1048576      0.280
    3243601      0.276
    6724         0.273
    1052676      0.272
    776161       0.272
    ...            ...
    4389025     -0.216
    8464        -0.217
    3663396     -0.217
    1040400     -0.218
    124609      -0.218
    1038361     -0.218
    122500      -0.219
    1288225     -0.221
    3751969     -0.221
    908209      -0.222
    130321      -0.226
    906304      -0.226
    243049      -0.228
    904401      -0.228
    2226064     -0.229
    1083681     -0.231
    5202961     -0.233
    1311025     -0.235
    1510441     -0.235
    614656      -0.235
    101761      -0.241
    304704      -0.242
    898704      -0.243
    114921      -0.244
    872356      -0.255
    5085025     -0.262
    5143824     -0.274
    495616      -0.291
    2268036     -0.335
    2271049     -0.360

    [2465 rows x 1 columns]
    0.465456698913

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/cc3abce54ab24662




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.381 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
