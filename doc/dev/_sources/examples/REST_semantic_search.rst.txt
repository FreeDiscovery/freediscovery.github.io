

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 9da23ce2ebaa4d0f

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/9da23ce2ebaa4d0f

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 2e4f2eb55e7b401b
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    481636       0.451
    202500       0.445
    1976836      0.436
    3651921      0.431
    770884       0.430
    1677025      0.430
    266256       0.422
    4528384      0.422
    1227664      0.419
    3748096      0.411
    3632836      0.408
    3667225      0.408
    1274641      0.406
    1276900      0.404
    342225       0.404
    3545689      0.402
    4363921      0.402
    776161       0.399
    1682209      0.399
    6724         0.398
    2096704      0.396
    1234321      0.396
    6889         0.396
    564001       0.395
    178084       0.392
    2217121      0.392
    4393216      0.389
    3655744      0.387
    3659569      0.387
    8836         0.385
    ...            ...
    4704561      0.153
    23409        0.152
    4389025      0.152
    42025        0.151
    904401       0.151
    5166529      0.151
    729          0.151
    304704       0.150
    51076        0.150
    25281        0.150
    1272384      0.150
    130321       0.150
    119025       0.150
    1296         0.150
    8281         0.149
    906304       0.149
    42436        0.148
    4410000      0.148
    8464         0.148
    3744225      0.148
    10201        0.148
    3249         0.146
    8649         0.146
    495616       0.146
    10404        0.142
    3312400      0.139
    1085764      0.137
    1083681      0.137
    4239481      0.137
    2025         0.132

    [2465 rows x 1 columns]
    0.450819070223

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/9da23ce2ebaa4d0f




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.823 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
