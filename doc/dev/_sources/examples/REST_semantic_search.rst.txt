

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 787325790b884d42

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/787325790b884d42

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 15ccb6854c944410
      => SVD decomposition with 100 dimensions explaining 76.43 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.442
    21316        0.398
    2152089      0.356
    4116841      0.350
    3545689      0.346
    1454436      0.330
    1550025      0.325
    649636       0.319
    648025       0.317
    1572516      0.316
    202500       0.307
    1276900      0.305
    3748096      0.305
    1274641      0.305
    68644        0.303
    69169        0.303
    1976836      0.299
    4923961      0.298
    224676       0.288
    3225616      0.287
    2022084      0.285
    1682209      0.284
    776161       0.284
    674041       0.283
    3632836      0.277
    1048576      0.271
    4363921      0.268
    49729        0.267
    234256       0.265
    25921        0.265
    ...            ...
    2050624     -0.218
    1040400     -0.219
    243049      -0.222
    1296        -0.222
    4301476     -0.224
    3844        -0.224
    383161      -0.229
    386884      -0.229
    1311025     -0.230
    872356      -0.230
    304704      -0.231
    385641      -0.231
    906304      -0.232
    3312400     -0.232
    904401      -0.233
    1085764     -0.235
    4214809     -0.239
    142884      -0.240
    144400      -0.240
    5531904     -0.240
    5541316     -0.240
    1083681     -0.241
    114921      -0.249
    614656      -0.256
    1510441     -0.256
    1763584     -0.264
    495616      -0.273
    2268036     -0.280
    5143824     -0.283
    2271049     -0.294

    [2465 rows x 1 columns]
    0.442323398818

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/787325790b884d42




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.220 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
