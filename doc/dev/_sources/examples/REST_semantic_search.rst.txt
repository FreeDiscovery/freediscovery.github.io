

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/datasets/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = 07faaecb94544652

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/07faaecb94544652

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = defbd508a6bb482d
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 document_id  score
    internal_id                    
    0                      0  1.333
    1                      1  1.370
    2                      2  1.272
    3                      3  1.279
    4                      4  1.266
    5                      5  1.278
    6                      6  1.280
    7                      7  1.278
    8                      8  1.286
    9                      9  1.286
    10                    10  1.286
    11                    11  1.274
    12                    12  1.284
    13                    13  1.307
    14                    14  1.225
    15                    15  1.220
    16                    16  1.325
    17                    17  1.299
    18                    18  1.245
    19                    19  1.234
    20                    20  1.219
    21                    21  1.307
    22                    22  1.285
    23                    23  1.284
    24                    24  1.224
    25                    25  1.307
    26                    26  1.289
    27                    27  1.200
    28                    28  1.319
    29                    29  1.299
    ...                  ...    ...
    2435                2435  1.313
    2436                2436  1.283
    2437                2437  1.252
    2438                2438  1.250
    2439                2439  1.277
    2440                2440  1.243
    2441                2441  1.279
    2442                2442  1.245
    2443                2443  1.297
    2444                2444  1.270
    2445                2445  1.278
    2446                2446  1.247
    2447                2447  1.275
    2448                2448  1.244
    2449                2449  1.285
    2450                2450  1.257
    2451                2451  1.287
    2452                2452  1.258
    2453                2453  1.271
    2454                2454  1.238
    2455                2455  1.236
    2456                2456  1.277
    2457                2457  1.243
    2458                2458  1.280
    2459                2459  1.268
    2460                2460  1.277
    2461                2461  1.286
    2462                2462  1.270
    2463                2463  1.239
    2464                2464  1.251

    [2465 rows x 2 columns]
    1.47980611701

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/07faaecb94544652




|


.. code-block:: python


    from __future__ import print_function

    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/datasets/{}'.format(dataset_name)
        print(" GET", url)
        res = requests.get(url, json={'return_file_path': True}).json()

        # To use a custom dataset, simply specify the following variables
        seed_document_id = res['seed_document_id']
        seed_y = res['seed_y']
        ground_truth_y = res['ground_truth_y']

        # create a custom dataset definition for ingestion
        dataset_definition = []
        for document_id, fname in zip(res['document_id'], res['file_path']):
            dataset_definition.append({'document_id': document_id,
                                      'rendering_id': 0,
                                      'file_path': fname})

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.get(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('internal_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  56.003 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
