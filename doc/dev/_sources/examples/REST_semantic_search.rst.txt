

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 68869a5180704092

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/68869a5180704092

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 093f1f0b45aa4040
      => SVD decomposition with 100 dimensions explaining 76.42 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.476
    21316        0.424
    4116841      0.372
    2152089      0.367
    1454436      0.344
    1572516      0.343
    202500       0.340
    3545689      0.340
    1976836      0.337
    1550025      0.325
    21609        0.321
    4532641      0.320
    649636       0.320
    648025       0.319
    674041       0.314
    3225616      0.309
    3748096      0.308
    1276900      0.307
    1274641      0.306
    49729        0.297
    266256       0.296
    1048576      0.293
    68644        0.293
    4405801      0.291
    6724         0.290
    4923961      0.290
    4363921      0.290
    69169        0.289
    2096704      0.284
    10000        0.284
    ...            ...
    708964      -0.201
    1607824     -0.203
    1296        -0.203
    3600        -0.203
    25281       -0.204
    872356      -0.205
    3751969     -0.205
    1288225     -0.205
    4293184     -0.207
    1311025     -0.208
    2027776     -0.214
    114921      -0.214
    4214809     -0.217
    228484      -0.219
    383161      -0.219
    386884      -0.219
    2277081     -0.226
    4571044     -0.228
    2280100     -0.238
    5143824     -0.240
    3312400     -0.243
    1085764     -0.245
    304704      -0.251
    1083681     -0.255
    1510441     -0.258
    614656      -0.258
    1763584     -0.284
    495616      -0.287
    2268036     -0.302
    2271049     -0.324

    [2465 rows x 1 columns]
    0.476245581362

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/68869a5180704092




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.383 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
