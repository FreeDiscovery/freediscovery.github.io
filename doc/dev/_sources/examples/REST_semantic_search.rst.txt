

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 94e7f41923994364

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/94e7f41923994364

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 4ecea4fc32a64040
      => SVD decomposition with 100 dimensions explaining 76.48 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.441
    21316        0.418
    1572516      0.415
    2152089      0.407
    674041       0.404
    202500       0.395
    4116841      0.394
    3545689      0.391
    1976836      0.391
    776161       0.385
    1682209      0.385
    3225616      0.384
    1454436      0.383
    1048576      0.383
    1550025      0.382
    648025       0.380
    68644        0.380
    649636       0.380
    69169        0.378
    4923961      0.375
    774400       0.375
    777924       0.374
    1684804      0.372
    21609        0.372
    14641        0.371
    2856100      0.370
    2560000      0.367
    224676       0.366
    4532641      0.365
    4464769      0.365
    ...            ...
    386884       0.180
    4214809      0.178
    5368489      0.178
    3844         0.178
    4301476      0.178
    142884       0.178
    144400       0.178
    5531904      0.178
    5541316      0.178
    5143824      0.176
    908209       0.175
    1607824      0.175
    2277081      0.175
    2280100      0.174
    243049       0.173
    2050624      0.173
    904401       0.172
    906304       0.172
    1288225      0.172
    3751969      0.172
    2226064      0.171
    708964       0.171
    1610361      0.171
    495616       0.168
    872356       0.164
    614656       0.164
    1510441      0.164
    1763584      0.157
    2268036      0.144
    2271049      0.138

    [2465 rows x 1 columns]
    0.440641356336

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/94e7f41923994364




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.468 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
