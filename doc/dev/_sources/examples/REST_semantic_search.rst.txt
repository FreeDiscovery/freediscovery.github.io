

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 5e0715dcf02a40ea

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/5e0715dcf02a40ea

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 39274f28f3104c7a
      => SVD decomposition with 100 dimensions explaining 69.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    5267025      0.570
    5262436      0.567
    5148361      0.515
    115600       0.515
    5157441      0.506
    116964       0.506
    116281       0.445
    5152900      0.445
    2500         0.362
    4251844      0.362
    3541924      0.356
    97969        0.344
    5067001      0.344
    4813636      0.339
    54756        0.339
    4950625      0.339
    73984        0.339
    75625        0.339
    4800481      0.330
    53361        0.330
    1181569      0.325
    3175524      0.289
    1028196      0.273
    96721        0.268
    1218816      0.259
    3625216      0.259
    3617604      0.259
    1210000      0.259
    1214404      0.259
    5062500      0.258
    ...            ...
    1430416     -0.178
    277729      -0.179
    1936        -0.181
    23104       -0.181
    3493161     -0.182
    842724      -0.183
    188356      -0.184
    7396        -0.184
    22201       -0.189
    263169      -0.193
    529         -0.197
    4515625     -0.197
    9409        -0.201
    577600      -0.202
    62500       -0.203
    4884100     -0.203
    20164       -0.207
    954529      -0.213
    3694084     -0.217
    2621161     -0.219
    956484      -0.240
    3125824     -0.263
    3118756     -0.267
    3132900     -0.268
    3139984     -0.270
    193600      -0.271
    3129361     -0.275
    3115225     -0.275
    3122289     -0.278
    3136441     -0.279

    [2465 rows x 1 columns]
    0.570390416563

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/5e0715dcf02a40ea




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  3.745 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
