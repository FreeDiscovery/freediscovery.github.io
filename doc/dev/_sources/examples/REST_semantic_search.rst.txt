

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 3ee937dff97e414e

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/3ee937dff97e414e

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = b615cc7800d4432f
      => SVD decomposition with 100 dimensions explaining 76.48 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.488
    21316        0.457
    4116841      0.425
    1454436      0.412
    2152089      0.405
    1572516      0.402
    3545689      0.400
    1550025      0.394
    648025       0.390
    649636       0.390
    21609        0.389
    224676       0.387
    68644        0.387
    4532641      0.386
    2022084      0.385
    69169        0.385
    3225616      0.385
    3748096      0.384
    4923961      0.384
    1276900      0.383
    1274641      0.383
    674041       0.381
    2414916      0.378
    4405801      0.376
    2217121      0.374
    10000        0.373
    102400       0.373
    225625       0.372
    49729        0.372
    1048576      0.371
    ...            ...
    243049       0.180
    4293184      0.180
    3600         0.179
    1296         0.179
    1038361      0.178
    1040400      0.178
    570025       0.177
    467856       0.175
    455625       0.175
    2277081      0.175
    2280100      0.175
    304704       0.174
    708964       0.173
    1610361      0.173
    3312400      0.173
    1607824      0.173
    4214809      0.173
    101761       0.172
    1085764      0.170
    5085025      0.170
    1083681      0.167
    122500       0.165
    1311025      0.160
    114921       0.159
    1510441      0.157
    614656       0.157
    495616       0.157
    5143824      0.151
    2268036      0.149
    2271049      0.144

    [2465 rows x 1 columns]
    0.488304347155

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/3ee937dff97e414e




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.561 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
