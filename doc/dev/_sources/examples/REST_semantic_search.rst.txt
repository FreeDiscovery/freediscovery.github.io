

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = dfe2cab5c94f4a77

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/dfe2cab5c94f4a77

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 879dd0edd0b743a4
      => SVD decomposition with 100 dimensions explaining 76.48 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.460
    21316        0.433
    4116841      0.414
    2152089      0.406
    1572516      0.404
    1454436      0.402
    4363921      0.396
    3545689      0.394
    6724         0.391
    1550025      0.390
    6889         0.388
    648025       0.386
    649636       0.386
    674041       0.385
    49729        0.382
    4393216      0.381
    8836         0.381
    9025         0.379
    68644        0.377
    2856100      0.376
    4923961      0.375
    69169        0.374
    776161       0.372
    1682209      0.372
    4765489      0.372
    48841        0.372
    558009       0.369
    3632836      0.369
    3651921      0.368
    4380649      0.367
    ...            ...
    904401       0.175
    872356       0.175
    906304       0.174
    114921       0.174
    1607824      0.174
    708964       0.172
    1610361      0.172
    5143824      0.171
    3196944      0.171
    1763584      0.170
    4389025      0.169
    8464         0.168
    383161       0.168
    386884       0.168
    8649         0.168
    142884       0.168
    144400       0.168
    5531904      0.168
    5541316      0.168
    1038361      0.167
    3312400      0.167
    495616       0.167
    385641       0.167
    1040400      0.166
    1085764      0.163
    2271049      0.162
    2268036      0.162
    1083681      0.161
    614656       0.148
    1510441      0.148

    [2465 rows x 1 columns]
    0.460352516587

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/dfe2cab5c94f4a77




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.036 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
