

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = 45e048f12ff9416e

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/45e048f12ff9416e

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 160dc5caffbd44fe
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 document_id  score
    internal_id                    
    0                      0  1.338
    1                      1  1.357
    2                      4  1.270
    3                      9  1.277
    4                     16  1.261
    5                     25  1.275
    6                     36  1.280
    7                     49  1.269
    8                     64  1.275
    9                     81  1.277
    10                   100  1.279
    11                   121  1.277
    12                   144  1.284
    13                   169  1.307
    14                   196  1.213
    15                   225  1.217
    16                   256  1.325
    17                   289  1.301
    18                   324  1.254
    19                   361  1.213
    20                   400  1.219
    21                   441  1.315
    22                   484  1.274
    23                   529  1.275
    24                   576  1.228
    25                   625  1.306
    26                   676  1.292
    27                   729  1.218
    28                   784  1.321
    29                   841  1.299
    ...                  ...    ...
    2435             5929225  1.303
    2436             5934096  1.274
    2437             5938969  1.240
    2438             5943844  1.243
    2439             5948721  1.275
    2440             5953600  1.239
    2441             5958481  1.276
    2442             5963364  1.239
    2443             5968249  1.290
    2444             5973136  1.260
    2445             5978025  1.272
    2446             5982916  1.238
    2447             5987809  1.268
    2448             5992704  1.233
    2449             5997601  1.280
    2450             6002500  1.242
    2451             6007401  1.285
    2452             6012304  1.253
    2453             6017209  1.264
    2454             6022116  1.228
    2455             6027025  1.228
    2456             6031936  1.274
    2457             6036849  1.232
    2458             6041764  1.275
    2459             6046681  1.260
    2460             6051600  1.283
    2461             6056521  1.307
    2462             6061444  1.280
    2463             6066369  1.241
    2464             6071296  1.259

    [2465 rows x 2 columns]
    1.47924612632

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/45e048f12ff9416e




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('internal_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 1 minutes  1.940 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
