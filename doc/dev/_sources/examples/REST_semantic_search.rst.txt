

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = b9461f4da2f7410b

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/b9461f4da2f7410b

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = e0550a04939d49d3
      => SVD decomposition with 100 dimensions explaining 76.43 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.469
    21316        0.427
    1572516      0.390
    674041       0.355
    4116841      0.349
    1454436      0.331
    2152089      0.327
    3545689      0.326
    202500       0.307
    3225616      0.303
    1976836      0.297
    1550025      0.297
    102400       0.296
    649636       0.295
    648025       0.295
    2856100      0.295
    3632836      0.290
    68644        0.289
    1048576      0.287
    69169        0.285
    4923961      0.279
    3651921      0.279
    1682209      0.277
    776161       0.277
    49729        0.275
    1227664      0.274
    5089536      0.271
    21609        0.268
    2217121      0.266
    4532641      0.263
    ...            ...
    383161      -0.209
    386884      -0.209
    10404       -0.210
    2027776     -0.215
    1607824     -0.216
    122500      -0.216
    4410000     -0.220
    708964      -0.223
    1610361     -0.223
    304704      -0.225
    898704      -0.225
    114921      -0.228
    228484      -0.230
    906304      -0.231
    904401      -0.232
    2050624     -0.233
    243049      -0.234
    1311025     -0.246
    1510441     -0.248
    614656      -0.248
    3312400     -0.265
    2226064     -0.267
    495616      -0.270
    1085764     -0.273
    1763584     -0.277
    5143824     -0.281
    1083681     -0.282
    872356      -0.292
    2268036     -0.308
    2271049     -0.350

    [2465 rows x 1 columns]
    0.46897948609

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/b9461f4da2f7410b




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.464 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
