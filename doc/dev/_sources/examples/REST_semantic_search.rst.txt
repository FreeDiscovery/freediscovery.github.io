

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['id']
       => dsid = 1c01a8c16f7e4d75

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/1c01a8c16f7e4d75

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = abebe0ef3c4a4446
      => SVD decomposition with 100 dimensions explaining 69.81 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    5262436      0.557
    5267025      0.555
    5148361      0.492
    115600       0.492
    5157441      0.488
    116964       0.488
    116281       0.440
    5152900      0.440
    2500         0.341
    4251844      0.341
    1034289      0.339
    3189796      0.338
    97969        0.325
    5067001      0.325
    5546025      0.321
    54756        0.312
    4950625      0.312
    75625        0.312
    73984        0.312
    4813636      0.312
    1481089      0.311
    4800481      0.310
    53361        0.310
    1210000      0.307
    3617604      0.307
    1214404      0.307
    1218816      0.307
    3625216      0.307
    145161       0.303
    43264        0.284
    ...            ...
    3701776     -0.179
    3671056     -0.179
    469225      -0.179
    274576      -0.183
    3694084     -0.183
    751689      -0.183
    1656369     -0.183
    22201       -0.186
    3125824     -0.191
    4198401     -0.192
    4669921     -0.193
    3118756     -0.194
    732736      -0.194
    3132900     -0.195
    3415104     -0.198
    1129969     -0.198
    1640961     -0.199
    444889      -0.199
    193600      -0.200
    3139984     -0.200
    4536900     -0.203
    3115225     -0.203
    3129361     -0.205
    21904       -0.206
    4515625     -0.208
    3122289     -0.208
    3136441     -0.210
    20164       -0.212
    280900      -0.222
    3511876     -0.249

    [2465 rows x 1 columns]
    0.557357166656

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/1c01a8c16f7e4d75




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])}
                              for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url, json={'dataset_definition': dataset_definition})

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  4.120 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
