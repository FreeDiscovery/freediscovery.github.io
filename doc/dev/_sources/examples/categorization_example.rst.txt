

.. _sphx_glr_examples_categorization_example.py:


Categorization Example [REST API]
---------------------------------

An example to illustrate binary categorizaiton with FreeDiscovery





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     POST http://localhost:5001/api/v0/datasets/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = a46e19c4737b41cba82a59ce62f0a8a1

    1.b Start feature extraction (in the background)
     POST http://localhost:5001/api/v0/feature-extraction/a46e19c4737b41cba82a59ce62f0a8a1

    1.c Monitor feature extraction progress
     GET http://localhost:5001/api/v0/feature-extraction/a46e19c4737b41cba82a59ce62f0a8a1

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/a46e19c4737b41cba82a59ce62f0a8a1
         - binary: False
         - n_jobs: -1
         - stop_words: english
         - use_hashing: True
         - min_df: 0.0
         - n_samples: 2465
         - analyzer: word
         - ngram_range: [1, 1]
         - max_df: 1.0
         - chunk_size: 2000
         - use_idf: True
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data
         - sublinear_tf: False
         - n_samples_processed: 2465
         - n_features: 50001
         - norm: l2

    2.a. Train the ML categorization model
           5 relevant, 63 non-relevant files
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 0ca8199f12564141b23fe5e44a35d163
        => Training scores: MAP = 1.000, ROC-AUC = 1.000

    2.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/0ca8199f12564141b23fe5e44a35d163
         - method: LinearSVC
         - options: {'loss': 'squared_hinge', 'C': 1.0, 'verbose': 0, 'intercept_scaling': 1, 'fit_intercept': True, 'max_iter': 1000, 'penalty': 'l2', 'multi_class': 'ovr', 'random_state': None, 'dual': True, 'tol': 0.0001, 'class_weight': None}

    2.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/0ca8199f12564141b23fe5e44a35d163/predict
        => Predicting 11 relevant and 2454 non relevant documents

    2.d Test categorization accuracy
             using ../freediscovery_shared/treclegal09_2k_subset/ground_truth_file.txt
    POST http://localhost:5001/api/v0/categorization/0ca8199f12564141b23fe5e44a35d163/test
        => Test scores: MAP = 1.000, ROC-AUC = 1.000

    3.a. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = a321e9fcf0a349c6986b8929604a16e8
      => SVD decomposition with 100 dimensions explaining 48.42 % variabilty of the data

    3.b. Predict categorization with LSI
    POST http://localhost:5001/api/v0/lsi/a321e9fcf0a349c6986b8929604a16e8/predict
        => Training scores: MAP = 1.000, ROC-AUC = 1.000

    3.c. Test categorization with LSI
     POST http://localhost:5001/api/v0/lsi/a321e9fcf0a349c6986b8929604a16e8/test
        => Test scores: MAP = 0.779, ROC-AUC = 0.881

           nearest_nrel_doc  nearest_rel_doc  prediction
    0                    6                0      -0.302
    1                    5                3      -0.459
    2                   27                1      -0.247
    3                   32                0      -0.262
    4                   54                4      -0.494
    5                   16                2      -0.284
    6                   27                1      -0.448
    7                   28                2      -0.594
    8                   35                1      -0.634
    9                   58                0      -0.256
    10                  16                3      -0.149
    11                  42                4      -1.000
    12                  58                4      -0.169
    13                   9                3      -0.814
    14                  47                4      -0.398
    15                  14                1      -0.604
    16                   3                4      -1.000
    17                  48                3      -0.447
    18                   7                4      -0.998
    19                  57                1      -1.000
    20                  40                0      -0.099
    21                  16                3       0.683
    22                  22                2      -0.827
    23                  28                1      -0.846
    24                  42                2      -0.471
    25                   3                4      -1.000
    26                  31                2      -0.618
    27                  29                4      -0.384
    28                  30                4      -0.390
    29                  16                2      -0.515
    ...                ...              ...         ...
    2435                52                2      -0.378
    2436                10                1       0.536
    2437                52                2      -0.782
    2438                40                2      -0.208
    2439                15                0      -0.114
    2440                55                4      -0.167
    2441                27                1      -0.130
    2442                27                4      -0.138
    2443                11                4      -0.183
    2444                11                3      -0.204
    2445                47                2      -0.437
    2446                57                1       0.655
    2447                38                2      -0.322
    2448                37                4      -0.305
    2449                 4                4      -0.318
    2450                27                1      -0.404
    2451                43                1      -0.858
    2452                26                1      -0.568
    2453                33                4      -0.467
    2454                54                4      -0.815
    2455                 4                0      -0.142
    2456                50                1      -0.131
    2457                40                0      -0.099
    2458                 4                1      -0.146
    2459                55                0      -0.175
    2460                14                1      -0.237
    2461                21                3      -0.695
    2462                47                2      -0.761
    2463                 2                4      -0.997
    2464                51                0      -0.300

    [2465 rows x 3 columns]

    4.a Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/a46e19c4737b41cba82a59ce62f0a8a1




|


.. code-block:: python


    from __future__ import print_function

    from time import time, sleep
    from multiprocessing import Process
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/datasets/{}'.format(dataset_name)
        print(" POST", url)
        res = requests.get(url).json()

        # To use a custom dataset, simply specify the following variables
        data_dir = res['data_dir']
        relevant_files = res['seed_relevant_files']
        non_relevant_files = res['seed_non_relevant_files']
        ground_truth_file = res['ground_truth_file']  # (optional)


        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        fe_opts = {'data_dir': data_dir,
                   'stop_words': 'english', 'chunk_size': 2000, 'n_jobs': -1,
                   'use_idf': 1, 'sublinear_tf': 0, 'binary': 0, 'n_features': 50001,
                   'analyzer': 'word', 'ngram_range': (1, 1), "norm": "l2"
                  }
        res = requests.post(url, json=fe_opts).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction (in the background)")

        # Make this call in a background process (there should be a better way of doing it)
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        p = Process(target=requests.post, args=(url,))
        p.start()
        sleep(5.0) # wait a bit for the processing to start

        print('\n1.c Monitor feature extraction progress')
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" GET", url)

        t0 = time()
        while True:
            res = requests.get(url)
            if res.status_code == 520:
                p.terminate()
                raise ValueError('Processing did not start')
            elif res.status_code == 200:
                break # processing finished
            data = res.json()
            print('     ... {}k/{}k files processed in {:.1f} min'.format(
                        data['n_samples_processed']//1000, data['n_samples']//1000, (time() - t0)/60.))
            sleep(15.0)

        p.terminate()  # just in case, should not be necessary


        print("\n1.d. check the parameters of the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(' GET', url)
        res = requests.get(url).json()

        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                          if "filenames" not in key]))


        # 2. Document categorization with ML algorithms

        print("\n2.a. Train the ML categorization model")
        print("       {} relevant, {} non-relevant files".format(
            len(relevant_files), len(non_relevant_files)))
        url = BASE_URL + '/categorization/'
        print(" POST", url)
        print(' Training...')

        res = requests.post(url,
                            json={'relevant_filenames': relevant_files,
                                  'non_relevant_filenames': non_relevant_files,
                                  'dataset_id': dsid,
                                  'method': 'LinearSVC',  # one of "LinearSVC", "LogisticRegression", 'xgboost'
                                  'cv': 0                          # Cross Validation
                                  }).json()

        mid = res['id']
        print("     => model id = {}".format(mid))
        print('    => Training scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

        print("\n2.b. Check the parameters used in the categorization model")
        url = BASE_URL + '/categorization/{}'.format(mid)
        print(" GET", url)
        res = requests.get(url).json()

        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                          if "filenames" not in key]))

        print("\n2.c Categorize the complete dataset with this model")
        url = BASE_URL + '/categorization/{}/predict'.format(mid)
        print(" GET", url)
        res = requests.get(url).json()
        prediction = res['prediction']

        print("    => Predicting {} relevant and {} non relevant documents".format(
            len(list(filter(lambda x: x>0, prediction))),
            len(list(filter(lambda x: x<0, prediction)))))

        print("\n2.d Test categorization accuracy")
        print("         using {}".format(ground_truth_file))  
        url = BASE_URL + '/categorization/{}/test'.format(mid)
        print("POST", url)
        res = requests.post(url, json={'ground_truth_filename': ground_truth_file}).json()

        print('    => Test scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))


        # 3. Document categorization with LSI

        print("\n3.a. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'dataset_id': dsid
                                  }).json()

        lid = res['id']
        print('  => LSI model id = {}'.format(lid))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))
        print("\n3.b. Predict categorization with LSI")

        url = BASE_URL + '/lsi/{}/predict'.format(lid)
        print("POST", url)
        res = requests.post(url,
                            json={'relevant_filenames': relevant_files,
                                  'non_relevant_filenames': non_relevant_files
                                  }).json()
        prediction = res['prediction']

        print('    => Training scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))
        df = pd.DataFrame({key: res[key] for key in res if 'prediction'==key or 'nearest' in key})


        print("\n3.c. Test categorization with LSI")
        url = BASE_URL + '/lsi/{}/test'.format(lid)
        print(" POST", url)

        res = requests.post(url,
                            json={'relevant_filenames': relevant_files,
                                  'non_relevant_filenames': non_relevant_files,
                                  'ground_truth_filename': ground_truth_file
                                  }).json()
        print('    => Test scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

        print('\n', df)


        print("\n4.a Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)

**Total running time of the script:** ( 1 minutes  10.051 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: categorization_example.py <categorization_example.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: categorization_example.ipynb <categorization_example.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
