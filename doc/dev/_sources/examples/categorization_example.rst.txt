

.. _sphx_glr_examples_categorization_example.py:


Categorization Example [REST API]
---------------------------------

An example to illustrate binary categorizaiton with FreeDiscovery





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     POST http://localhost:5001/api/v0/datasets/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = c9fa4e73fe79449395213495f1bae4bb

    1.b Start feature extraction (in the background)
     POST http://localhost:5001/api/v0/feature-extraction/c9fa4e73fe79449395213495f1bae4bb

    1.c Monitor feature extraction progress
     GET http://localhost:5001/api/v0/feature-extraction/c9fa4e73fe79449395213495f1bae4bb

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/c9fa4e73fe79449395213495f1bae4bb
         - binary: False
         - n_jobs: -1
         - stop_words: None
         - use_hashing: True
         - min_df: 0.0
         - n_samples: 2465
         - analyzer: word
         - ngram_range: [1, 1]
         - max_df: 1.0
         - chunk_size: 2000
         - use_idf: True
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data
         - sublinear_tf: True
         - n_samples_processed: 2465
         - n_features: 50001
         - norm: l2

    2.a. Train the ML categorization model
           5 relevant, 63 non-relevant files
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 139c7df00b1848b787ec47360ae4e171
        => Training scores: MAP = 1.00, ROC-AUC = 1.00

    2.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/139c7df00b1848b787ec47360ae4e171
         - method: LogisticRegression
         - options: {'warm_start': False, 'C': 1.0, 'n_jobs': 1, 'verbose': 0, 'intercept_scaling': 1, 'fit_intercept': True, 'max_iter': 100, 'penalty': 'l2', 'multi_class': 'ovr', 'random_state': None, 'dual': False, 'tol': 0.0001, 'solver': 'liblinear', 'class_weight': None}

    2.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/139c7df00b1848b787ec47360ae4e171/predict
        => Predicting 0 relevant and 2465 non relevant documents

    2.d Test categorization accuracy
             using ../freediscovery_shared/treclegal09_2k_subset/ground_truth_file.txt
    POST http://localhost:5001/api/v0/categorization/139c7df00b1848b787ec47360ae4e171/test
        => Test scores: MAP = 1.00, ROC-AUC = 1.00

    3.a. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = b3f3035aef884423852653913a606063
      => SVD decomposition with 100 dimensions explaining 44.33 % variabilty of the data

    3.b. Predict categorization with LSI
    POST http://localhost:5001/api/v0/lsi/b3f3035aef884423852653913a606063/predict
        => Training scores: MAP = 1.00, ROC-AUC = 1.00

    3.c. Test categorization with LSI
     POST http://localhost:5001/api/v0/lsi/b3f3035aef884423852653913a606063/test
        => Test scores: MAP = 0.71, ROC-AUC = 0.81

    4.a Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/c9fa4e73fe79449395213495f1bae4bb




|


.. code-block:: python


    from __future__ import print_function

    from time import time, sleep
    from multiprocessing import Process
    import requests
    import pandas as pd

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/datasets/{}'.format(dataset_name)
        print(" POST", url)
        res = requests.get(url)
        res = res.json()

        # To use a custom dataset, simply specify the following variables
        data_dir = res['data_dir']
        relevant_files = res['seed_relevant_files']
        non_relevant_files = res['seed_non_relevant_files']
        ground_truth_file = res['ground_truth_file']  # (optional)


        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        fe_opts = {'data_dir': data_dir,
                   'stop_words': 'None', 'chunk_size': 2000, 'n_jobs': -1,
                   'use_idf': 1, 'sublinear_tf': 1, 'binary': 0, 'n_features': 50001,
                   'analyzer': 'word', 'ngram_range': (1, 1), "norm": "l2"
                  }
        res = requests.post(url, json=fe_opts)

        dsid = res.json()['id']
        print("   => received {}".format(list(res.json().keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction (in the background)")

        # Make this call in a background process (there should be a better way of doing it)
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        p = Process(target=requests.post, args=(url,))
        p.start()
        sleep(5.0) # wait a bit for the processing to start

        print('\n1.c Monitor feature extraction progress')
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" GET", url)

        t0 = time()
        while True:
            res = requests.get(url)
            if res.status_code == 520:
                p.terminate()
                raise ValueError('Processing did not start')
            elif res.status_code == 200:
                break # processing finished
            data = res.json()
            print('     ... {}k/{}k files processed in {:.1f} min'.format(
                        data['n_samples_processed']//1000, data['n_samples']//1000, (time() - t0)/60.))
            sleep(15.0)

        p.terminate()  # just in case, should not be necessary


        print("\n1.d. check the parameters of the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(' GET', url)
        res = requests.get(url)

        data = res.json()
        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in data.items() \
                                                          if "filenames" not in key]))


        # 2. Document categorization with ML algorithms

        print("\n2.a. Train the ML categorization model")
        print("       {} relevant, {} non-relevant files".format(
            len(relevant_files), len(non_relevant_files)))
        url = BASE_URL + '/categorization/'
        print(" POST", url)
        print(' Training...')

        res = requests.post(url,
                            json={'relevant_filenames': relevant_files,
                                  'non_relevant_filenames': non_relevant_files,
                                  'dataset_id': dsid,
                                  'method': 'LogisticRegression',  # one of "LinearSVC", "LogisticRegression", 'xgboost'
                                  'cv': 0                          # Cross Validation
                                  })

        data = res.json()
        mid = data['id']
        print("     => model id = {}".format(mid))
        print('    => Training scores: MAP = {average_precision:.2f}, ROC-AUC = {roc_auc:.2f}'.format(**data))

        print("\n2.b. Check the parameters used in the categorization model")
        url = BASE_URL + '/categorization/{}'.format(mid)
        print(" GET", url)
        res = requests.get(url)

        data = res.json()
        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in data.items() \
                                                          if "filenames" not in key]))

        print("\n2.c Categorize the complete dataset with this model")
        url = BASE_URL + '/categorization/{}/predict'.format(mid)
        print(" GET", url)
        res = requests.get(url)
        prediction = res.json()['prediction']

        print("    => Predicting {} relevant and {} non relevant documents".format(
            len(list(filter(lambda x: x>0, prediction))),
            len(list(filter(lambda x: x<0, prediction)))))

        print("\n2.d Test categorization accuracy")
        print("         using {}".format(ground_truth_file))  
        url = BASE_URL + '/categorization/{}/test'.format(mid)
        print("POST", url)
        res = requests.post(url, json={'ground_truth_filename': ground_truth_file})

        data2 = res.json()
        print('    => Test scores: MAP = {average_precision:.2f}, ROC-AUC = {roc_auc:.2f}'.format(**data2))


        # 3. Document categorization with LSI

        print("\n3.a. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'dataset_id': dsid
                                  })

        data = res.json()
        lid = data['id']
        print('  => LSI model id = {}'.format(lid))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, data['explained_variance']*100))
        print("\n3.b. Predict categorization with LSI")

        url = BASE_URL + '/lsi/{}/predict'.format(lid)
        print("POST", url)
        res = requests.post(url,
                            json={'relevant_filenames': relevant_files,
                                  'non_relevant_filenames': non_relevant_files
                                  })
        data = res.json()

        prediction = data['prediction']

        print('    => Training scores: MAP = {average_precision:.2f}, ROC-AUC = {roc_auc:.2f}'.format(**data))


        print("\n3.c. Test categorization with LSI")
        url = BASE_URL + '/lsi/{}/test'.format(lid)
        print(" POST", url)

        res = requests.post(url,
                            json={'relevant_filenames': relevant_files,
                                  'non_relevant_filenames': non_relevant_files,
                                  'ground_truth_filename': ground_truth_file
                                  })
        data2 = res.json()
        print('    => Test scores: MAP = {average_precision:.2f}, ROC-AUC = {roc_auc:.2f}'.format(**data2))

        pd.DataFrame({key: data[key] for key in data if 'prediction' in key or 'nearest' in key})


        print("\n4.a Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)

**Total running time of the script:** ( 1 minutes  15.887 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: categorization_example.py <categorization_example.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: categorization_example.ipynb <categorization_example.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
