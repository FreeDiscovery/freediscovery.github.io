

.. _sphx_glr_examples_REST_categorization.py:


Categorization Example [REST API]
---------------------------------

An example to illustrate binary categorizaiton with FreeDiscovery





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/datasets/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = 98624911254f4796

    1.b Start feature extraction (in the background)
     POST http://localhost:5001/api/v0/feature-extraction/98624911254f4796

    1.c Monitor feature extraction progress
     GET http://localhost:5001/api/v0/feature-extraction/98624911254f4796

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/98624911254f4796
         - binary: False
         - n_jobs: 1
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - use_hashing: True
         - min_df: 0.0
         - analyzer: word
         - n_samples: 2465
         - ngram_range: [1, 1]
         - max_df: 1.0
         - chunk_size: 5000
         - use_idf: False
         - stop_words: None
         - n_features: 100001
         - n_samples_processed: 2465
         - sublinear_tf: True
         - norm: None

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = e15319828ca241b2
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Train the categorization model
       5 relevant, 63 non-relevant files
    ================================================================================ 
                LinearSVC   
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 44aa4f8b36634956
        => Training scores: MAP = 0.683, ROC-AUC = 0.892, F1= 0.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/44aa4f8b36634956
         - method: LinearSVC
         - options: {'loss': 'squared_hinge', 'C': 1.0, 'verbose': 0, 'intercept_scaling': 1, 'fit_intercept': True, 'max_iter': 1000, 'penalty': 'l2', 'multi_class': 'ovr', 'random_state': None, 'dual': True, 'tol': 0.0001, 'class_weight': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/44aa4f8b36634956/predict
                 document_id  score
    internal_id                    
    0                      0 -0.846
    1                      1 -0.846
    2                      2 -0.846
    3                      3 -0.846
    4                      4 -0.846
    5                      5 -0.846
    6                      6 -0.846
    7                      7 -0.846
    8                      8 -0.846
    9                      9 -0.846
    10                    10 -0.846
    11                    11 -0.846
    12                    12 -0.846
    13                    13 -0.847
    14                    14 -0.846
    15                    15 -0.846
    16                    16 -0.847
    17                    17 -0.846
    18                    18 -0.846
    19                    19 -0.846
    20                    20 -0.846
    21                    21 -0.847
    22                    22 -0.846
    23                    23 -0.846
    24                    24 -0.846
    25                    25 -0.847
    26                    26 -0.846
    27                    27 -0.846
    28                    28 -0.847
    29                    29 -0.846
    ...                  ...    ...
    2435                2435 -0.849
    2436                2436 -0.846
    2437                2437 -0.846
    2438                2438 -0.846
    2439                2439 -0.846
    2440                2440 -0.846
    2441                2441 -0.846
    2442                2442 -0.846
    2443                2443 -0.846
    2444                2444 -0.846
    2445                2445 -0.846
    2446                2446 -0.846
    2447                2447 -0.846
    2448                2448 -0.846
    2449                2449 -0.846
    2450                2450 -0.846
    2451                2451 -0.846
    2452                2452 -0.846
    2453                2453 -0.846
    2454                2454 -0.846
    2455                2455 -0.846
    2456                2456 -0.846
    2457                2457 -0.846
    2458                2458 -0.846
    2459                2459 -0.846
    2460                2460 -0.846
    2461                2461 -0.846
    2462                2462 -0.846
    2463                2463 -0.846
    2464                2464 -0.846

    [2465 rows x 2 columns]

    3.d Compute the categorization scores
     GET http://localhost:5001/api/v0/metrics/categorization
        => Test scores: MAP = 0.006, ROC-AUC = 0.545
    ================================================================================ 
                NearestNeighbor  + LSI 
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 4fefb8a758f94b85
        => Training scores: MAP = 1.000, ROC-AUC = 1.000, F1= 1.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/4fefb8a758f94b85
         - method: NearestNeighbor
         - options: {'ranking': None, 'n_jobs': None, 'radius': None, 'leaf_size': None, 'algorithm': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/4fefb8a758f94b85/predict
                 document_id  nn_negative__distance  nn_negative__document_id  nn_positive__distance  nn_positive__document_id  score
    internal_id                                                                                                                      
    0                      0                  0.222                        52                  0.209                         3  0.896
    1                      1                  0.571                        53                  0.641                         4 -0.715
    2                      2                  0.086                        21                  0.087                         0 -0.957
    3                      3                  0.063                        21                  0.000                         0  1.000
    4                      4                  0.123                        21                  0.119                         0  0.941
    5                      5                  0.104                        64                  0.089                         0  0.955
    6                      6                  0.130                         5                  0.116                         0  0.942
    7                      7                  0.091                        21                  0.064                         0  0.968
    8                      8                  0.090                        37                  0.077                         0  0.961
    9                      9                  0.000                         5                  0.099                         0 -1.000
    10                    10                  0.089                        21                  0.045                         0  0.977
    11                    11                  0.568                        58                  0.678                         4 -0.716
    12                    12                  0.579                        58                  0.659                         4 -0.711
    13                    13                  0.579                        55                  0.657                         3 -0.711
    14                    14                  0.080                        55                  0.610                         3 -0.960
    15                    15                  0.219                        12                  0.430                         1 -0.891
    16                    16                  0.652                         7                  0.698                         4 -0.674
    17                    17                  0.620                        58                  0.662                         4 -0.690
    18                    18                  0.404                        12                  0.525                         1 -0.798
    19                    19                  0.391                        12                  0.596                         1 -0.805
    20                    20                  0.212                        12                  0.456                         1 -0.894
    21                    21                  0.365                        63                  0.674                         3 -0.818
    22                    22                  0.521                        53                  0.654                         4 -0.739
    23                    23                  0.512                        53                  0.656                         4 -0.744
    24                    24                  0.411                        12                  0.537                         4 -0.795
    25                    25                  0.598                        63                  0.710                         4 -0.701
    26                    26                  0.605                        58                  0.684                         4 -0.698
    27                    27                  0.497                        12                  0.617                         2 -0.752
    28                    28                  0.647                        23                  0.702                         4 -0.676
    29                    29                  0.626                        58                  0.664                         4 -0.687
    ...                  ...                    ...                       ...                    ...                       ...    ...
    2435                2435                  0.655                        59                  0.681                         1 -0.672
    2436                2436                  0.106                        21                  0.095                         0  0.953
    2437                2437                  0.210                        47                  0.334                         1 -0.895
    2438                2438                  0.205                        47                  0.311                         0 -0.897
    2439                2439                  0.090                         5                  0.106                         0 -0.955
    2440                2440                  0.190                        47                  0.318                         0 -0.905
    2441                2441                  0.089                         5                  0.102                         0 -0.956
    2442                2442                  0.196                        47                  0.306                         0 -0.902
    2443                2443                  0.127                        52                  0.121                         0  0.940
    2444                2444                  0.233                        47                  0.336                         4 -0.884
    2445                2445                  0.146                        37                  0.133                         0  0.934
    2446                2446                  0.229                        35                  0.331                         0 -0.885
    2447                2447                  0.112                        21                  0.092                         0  0.954
    2448                2448                  0.172                        66                  0.319                         1 -0.914
    2449                2449                  0.088                        21                  0.048                         0  0.976
    2450                2450                  0.191                        35                  0.286                         0 -0.904
    2451                2451                  0.000                        67                  0.126                         0 -1.000
    2452                2452                  0.240                        47                  0.338                         0 -0.880
    2453                2453                  0.149                        51                  0.199                         0 -0.925
    2454                2454                  0.284                        66                  0.333                         1 -0.858
    2455                2455                  0.142                        47                  0.313                         0 -0.929
    2456                2456                  0.056                        21                  0.037                         0  0.982
    2457                2457                  0.216                        47                  0.309                         0 -0.892
    2458                2458                  0.113                        21                  0.092                         0  0.954
    2459                2459                  0.189                        42                  0.529                         2 -0.905
    2460                2460                  0.415                        42                  0.517                         3 -0.793
    2461                2461                  0.430                        13                  0.504                         2 -0.785
    2462                2462                  0.434                        39                  0.603                         2 -0.783
    2463                2463                  0.464                        13                  0.514                         2 -0.768
    2464                2464                  0.431                        42                  0.548                         2 -0.785

    [2465 rows x 6 columns]

    3.d Compute the categorization scores
     GET http://localhost:5001/api/v0/metrics/categorization
        => Test scores: MAP = 0.005, ROC-AUC = 0.353

    5.a Delete the extracted features (and LSI decomposition)
     DELETE http://localhost:5001/api/v0/feature-extraction/98624911254f4796




|


.. code-block:: python


    from __future__ import print_function

    from time import time, sleep
    from multiprocessing import Process
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/datasets/{}'.format(dataset_name)
        print(" GET", url)
        res = requests.get(url, json={'return_file_path': True}).json()

        # To use a custom dataset, simply specify the following variables
        seed_document_id = res['seed_document_id']
        seed_y = res['seed_y']
        ground_truth_y = res['ground_truth_y']

        # create a custom dataset definition for ingestion
        dataset_definition = []
        for document_id, fname in zip(res['document_id'], res['file_path']):
            dataset_definition.append({'document_id': document_id,
                                      'rendering_id': 0,
                                      'file_path': fname})

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction (in the background)")

        # Make this call in a background process (there should be a better way of doing it)
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        p = Process(target=requests.post, args=(url,))
        p.start()
        sleep(5.0) # wait a bit for the processing to start

        print('\n1.c Monitor feature extraction progress')
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" GET", url)

        t0 = time()
        while True:
            res = requests.get(url)
            if res.status_code == 520:
                p.terminate()
                raise ValueError('Processing did not start')
            elif res.status_code == 200:
                break # processing finished
            data = res.json()
            print('     ... {}k/{}k files processed in {:.1f} min'.format(
                        data['n_samples_processed']//1000, data['n_samples']//1000, (time() - t0)/60.))
            sleep(15.0)

        p.terminate()  # just in case, should not be necessary


        print("\n1.d. check the parameters of the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(' GET', url)
        res = requests.get(url).json()

        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                          if "filenames" not in key]))
        # this step is not necessary anymore
        #method = BASE_URL + "/feature-extraction/{}/id-mapping/flat".format(dsid)
        #res = requests.get(method, data={'document_id': seed_document_id})
        #seed_internal_id = res.json()['internal_id']


        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Document categorization

        print("\n3.a. Train the categorization model")
        print("   {} relevant, {} non-relevant files".format(seed_y.count(1), seed_y.count(0)))

        seed_index_nested = [{'document_id': internal_id, 'y': y} \
                                    for internal_id, y in zip(seed_document_id, seed_y)]

        for method, use_lsi in [('LinearSVC', False),
                                ('NearestNeighbor', True)]:

            print('='*80, '\n', ' '*10,
                  method, " + LSI" if use_lsi else ' ', '\n', '='*80)
            if use_lsi:
                # Categorization with the previously created LSI model
                parent_id = lsi_id
            else:
                # Categorization with original text features
                parent_id = dsid

            url = BASE_URL + '/categorization/'
            print(" POST", url)
            print(' Training...')

            res = requests.post(url,
                                json={'parent_id': parent_id,
                                      'index_nested': seed_index_nested,
                                      'method': method,  # one of "LinearSVC", "LogisticRegression", 'xgboost'
                                      }).json()

            mid = res['id']
            print("     => model id = {}".format(mid))
            print('    => Training scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}, F1= {f1:.3f}'.format(**res))

            print("\n3.b. Check the parameters used in the categorization model")
            url = BASE_URL + '/categorization/{}'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                              if key not in ['index', 'y']]))

            print("\n3.c Categorize the complete dataset with this model")
            url = BASE_URL + '/categorization/{}/predict'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            if method == "NearestNeighbor":

                def flatten_dict(d, parent_key='', sep='__'):
                    """Flatten a nested dictionary """
                    import collections
                    items = []
                    for k, v in d.items():
                        new_key = parent_key + sep + k if parent_key else k
                        if isinstance(v, collections.MutableMapping):
                            items.extend(flatten_dict(v, new_key, sep=sep).items())
                        else:
                            items.append((new_key, v))
                    return dict(items)
            
                data = [flatten_dict(el) for el in res['data']]
            else:
                data = res['data']

            df = pd.DataFrame(data).set_index('internal_id')
            if method == "NearestNeighbor":
                df = df[['document_id', 'nn_negative__distance', 'nn_negative__document_id',
                      'nn_positive__distance', 'nn_positive__document_id', 'score']]

            print(df)

            print("\n3.d Compute the categorization scores")
            url = BASE_URL + '/metrics/categorization'
            print(" GET", url)
            res = requests.get(url, json={'y_true': ground_truth_y,
                                          'y_pred': df.score.values.tolist(),
                                         } ).json()





            print('    => Test scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

        # 4. Cleaning
        print("\n5.a Delete the extracted features (and LSI decomposition)")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 1 minutes  1.585 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_categorization.py <REST_categorization.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_categorization.ipynb <REST_categorization.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
