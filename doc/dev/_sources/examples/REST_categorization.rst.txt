

.. _sphx_glr_examples_REST_categorization.py:


Categorization Example [REST API]
---------------------------------

An example to illustrate binary categorizaiton with FreeDiscovery





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/datasets/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = 85e47dcc72434846

    1.b Start feature extraction (in the background)
     POST http://localhost:5001/api/v0/feature-extraction/85e47dcc72434846

    1.c Monitor feature extraction progress
     GET http://localhost:5001/api/v0/feature-extraction/85e47dcc72434846

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/85e47dcc72434846
         - binary: False
         - n_jobs: 1
         - stop_words: None
         - use_hashing: True
         - min_df: 0.0
         - n_samples: 2465
         - analyzer: word
         - ngram_range: [1, 1]
         - max_df: 1.0
         - chunk_size: 5000
         - use_idf: False
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data
         - sublinear_tf: True
         - n_samples_processed: 2465
         - n_features: 100001
         - norm: None

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 8187f99cc8054c30
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Train the categorization model
       5 relevant, 63 non-relevant files
    ================================================================================ 
                LinearSVC   
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 15b00710526344d5
        => Training scores: MAP = 0.537, ROC-AUC = nan

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/15b00710526344d5
         - method: LinearSVC
         - options: {'loss': 'squared_hinge', 'C': 1.0, 'verbose': 0, 'intercept_scaling': 1, 'fit_intercept': True, 'max_iter': 1000, 'penalty': 'l2', 'multi_class': 'ovr', 'random_state': None, 'dual': True, 'tol': 0.0001, 'class_weight': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/15b00710526344d5/predict

    3.d Test categorization accuracy
             using ../freediscovery_shared/treclegal09_2k_subset/ground_truth_file.txt
    POST http://localhost:5001/api/v0/categorization/15b00710526344d5/test
        => Test scores: MAP = 0.502, ROC-AUC = nan
    ================================================================================ 
                NearestNeighbor  + LSI 
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = dd8d87e13c704e53
        => Training scores: MAP = 1.000, ROC-AUC = 1.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/dd8d87e13c704e53
         - method: NearestNeighbor
         - options: {'n_jobs': None, 'radius': None, 'leaf_size': None, 'algorithm': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/dd8d87e13c704e53/predict

    3.d Test categorization accuracy
             using ../freediscovery_shared/treclegal09_2k_subset/ground_truth_file.txt
    POST http://localhost:5001/api/v0/categorization/dd8d87e13c704e53/test
        => Test scores: MAP = 0.356, ROC-AUC = 0.798

           dist_n  dist_p  ind_n  ind_p  prediction
    0      0.450   0.423     45      3       0.894
    1      1.153   1.287     53      4      -0.712
    2      0.174   0.174     21      0      -0.957
    3      0.124   0.000     21      0       1.000
    4      0.242   0.235     21      0       0.941
    5      0.216   0.194     21      0       0.952
    6      0.269   0.232      5      0       0.942
    7      0.190   0.145     21      0       0.964
    8      0.169   0.171     37      0      -0.958
    9      0.000   0.211      5      0      -1.000
    10     0.181   0.103     21      0       0.974
    11     1.130   1.346     58      1      -0.718
    12     1.161   1.309     58      1      -0.710
    13     1.139   1.295     55      3      -0.715
    14     0.159   1.199     55      3      -0.960
    15     0.451   0.846     12      1      -0.887
    16     1.299   1.392     58      4      -0.675
    17     1.240   1.323     58      4      -0.690
    18     0.868   1.071     12      1      -0.783
    19     0.794   1.194     12      1      -0.801
    20     0.441   0.904     12      1      -0.890
    21     0.725   1.361     63      3      -0.819
    22     1.044   1.294     58      4      -0.739
    23     1.057   1.297     58      4      -0.736
    24     0.821   1.079     12      4      -0.795
    25     1.193   1.420     63      4      -0.702
    26     1.196   1.365     58      4      -0.701
    27     0.990   1.212     12      2      -0.753
    28     1.295   1.401     58      4      -0.676
    29     1.244   1.329     58      4      -0.689
    ...      ...     ...    ...    ...         ...
    2435   1.302   1.362     30      0      -0.675
    2436   0.224   0.207     21      0       0.948
    2437   0.433   0.653     47      1      -0.892
    2438   0.422   0.609     47      1      -0.894
    2439   0.203   0.227      5      0      -0.949
    2440   0.403   0.647     47      1      -0.899
    2441   0.189   0.216      5      0      -0.953
    2442   0.408   0.620     47      0      -0.898
    2443   0.255   0.246     52      0       0.939
    2444   0.462   0.661     66      1      -0.884
    2445   0.307   0.286     37      0       0.928
    2446   0.498   0.678     35      1      -0.876
    2447   0.226   0.190     21      0       0.953
    2448   0.350   0.617     66      1      -0.912
    2449   0.179   0.104     21      0       0.974
    2450   0.393   0.573     35      0      -0.902
    2451   0.000   0.254     67      0      -1.000
    2452   0.480   0.657     66      0      -0.880
    2453   0.305   0.405     51      0      -0.924
    2454   0.581   0.662     47      1      -0.855
    2455   0.269   0.625     47      0      -0.933
    2456   0.110   0.075     21      0       0.981
    2457   0.428   0.619     47      0      -0.893
    2458   0.227   0.190     21      0       0.953
    2459   0.384   1.081     42      2      -0.904
    2460   0.825   1.029     42      3      -0.794
    2461   0.910   1.028     13      2      -0.773
    2462   0.842   1.237     39      0      -0.790
    2463   0.946   1.072     39      2      -0.764
    2464   0.858   1.085     42      0      -0.786

    [2465 rows x 5 columns]

    5.a Delete the extracted features (and LSI decomposition)
     DELETE http://localhost:5001/api/v0/feature-extraction/85e47dcc72434846




|


.. code-block:: python


    from __future__ import print_function

    from time import time, sleep
    from multiprocessing import Process
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/datasets/{}'.format(dataset_name)
        print(" GET", url)
        res = requests.get(url).json()

        # To use a custom dataset, simply specify the following variables
        data_dir = res['data_dir']
        seed_filenames = res['seed_filenames']
        seed_y = res['seed_y']
        ground_truth_file = res['ground_truth_file']  # (optional)


        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'data_dir': data_dir,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction (in the background)")

        # Make this call in a background process (there should be a better way of doing it)
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        p = Process(target=requests.post, args=(url,))
        p.start()
        sleep(5.0) # wait a bit for the processing to start

        print('\n1.c Monitor feature extraction progress')
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" GET", url)

        t0 = time()
        while True:
            res = requests.get(url)
            if res.status_code == 520:
                p.terminate()
                raise ValueError('Processing did not start')
            elif res.status_code == 200:
                break # processing finished
            data = res.json()
            print('     ... {}k/{}k files processed in {:.1f} min'.format(
                        data['n_samples_processed']//1000, data['n_samples']//1000, (time() - t0)/60.))
            sleep(15.0)

        p.terminate()  # just in case, should not be necessary


        print("\n1.d. check the parameters of the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(' GET', url)
        res = requests.get(url).json()

        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                          if "filenames" not in key]))

        method = BASE_URL + "/feature-extraction/{}/index".format(dsid)
        res = requests.get(method, data={'filenames': seed_filenames})
        seed_index = res.json()['index']


        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Document categorization

        print("\n3.a. Train the categorization model")
        print("   {} relevant, {} non-relevant files".format(seed_y.count(1), seed_y.count(0)))

        for method, use_lsi in [('LinearSVC', False),
                                ('NearestNeighbor', True)]:

            print('='*80, '\n', ' '*10,
                  method, " + LSI" if use_lsi else ' ', '\n', '='*80)
            if use_lsi:
                # Categorization with the previously created LSI model
                parent_id = lsi_id
            else:
                # Categorization with original text features
                parent_id = dsid

            url = BASE_URL + '/categorization/'
            print(" POST", url)
            print(' Training...')

            res = requests.post(url,
                                json={'index': seed_index,
                                      'y': seed_y,
                                      'parent_id': parent_id,
                                      'method': method,  # one of "LinearSVC", "LogisticRegression", 'xgboost'
                                      }).json()

            mid = res['id']
            print("     => model id = {}".format(mid))
            print('    => Training scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

            print("\n3.b. Check the parameters used in the categorization model")
            url = BASE_URL + '/categorization/{}'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                              if key not in ['index', 'y']]))

            print("\n3.c Categorize the complete dataset with this model")
            url = BASE_URL + '/categorization/{}/predict'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()
            prediction = res['prediction']

            if method == "NearestNeighbor":
                df = pd.DataFrame({key: res[key] for key in res if key not in ['id', 'scores']})

            print("\n3.d Test categorization accuracy")
            print("         using {}".format(ground_truth_file))  
            url = BASE_URL + '/categorization/{}/test'.format(mid)
            print("POST", url)
            res = requests.post(url, json={'ground_truth_filename': ground_truth_file}).json()

            print('    => Test scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

        print('\n', df)

        # 4. Cleaning
        print("\n5.a Delete the extracted features (and LSI decomposition)")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 1 minutes  0.802 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_categorization.py <REST_categorization.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_categorization.ipynb <REST_categorization.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
