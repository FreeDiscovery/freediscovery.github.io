

.. _sphx_glr_examples_REST_categorization.py:


Categorization Example [REST API]
---------------------------------

An example to illustrate binary categorizaiton with FreeDiscovery





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/datasets/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = 2f01b2a9b51f44ac

    1.b Start feature extraction (in the background)
     POST http://localhost:5001/api/v0/feature-extraction/2f01b2a9b51f44ac

    1.c Monitor feature extraction progress
     GET http://localhost:5001/api/v0/feature-extraction/2f01b2a9b51f44ac

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/2f01b2a9b51f44ac
         - binary: False
         - n_jobs: -1
         - stop_words: english
         - use_hashing: True
         - min_df: 0.0
         - n_samples: 2465
         - analyzer: word
         - ngram_range: [1, 1]
         - max_df: 1.0
         - chunk_size: 2000
         - use_idf: True
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data
         - sublinear_tf: False
         - n_samples_processed: 2465
         - n_features: 50001
         - norm: l2

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = c32e560e9c6d415b
      => SVD decomposition with 100 dimensions explaining 48.38 % variabilty of the data

    3.a. Train the categorization model
       5 relevant, 63 non-relevant files
    ================================================================================ 
                LinearSVC   
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 6e67902b9177454c
        => Training scores: MAP = 1.000, ROC-AUC = 1.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/6e67902b9177454c
         - method: LinearSVC
         - options: {'loss': 'squared_hinge', 'C': 1.0, 'verbose': 0, 'intercept_scaling': 1, 'fit_intercept': True, 'max_iter': 1000, 'penalty': 'l2', 'multi_class': 'ovr', 'random_state': None, 'dual': True, 'tol': 0.0001, 'class_weight': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/6e67902b9177454c/predict

    3.d Test categorization accuracy
             using ../freediscovery_shared/treclegal09_2k_subset/ground_truth_file.txt
    POST http://localhost:5001/api/v0/categorization/6e67902b9177454c/test
        => Test scores: MAP = 0.959, ROC-AUC = 0.958
    ================================================================================ 
                NearestNeighbor  + LSI 
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = b406d95da6f344dd
        => Training scores: MAP = 1.000, ROC-AUC = 1.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/b406d95da6f344dd
         - method: NearestNeighbor
         - options: {'n_neighbors': None, 'n_jobs': None, 'radius': None, 'leaf_size': None, 'algorithm': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/b406d95da6f344dd/predict

    3.d Test categorization accuracy
             using ../freediscovery_shared/treclegal09_2k_subset/ground_truth_file.txt
    POST http://localhost:5001/api/v0/categorization/b406d95da6f344dd/test
        => Test scores: MAP = 0.491, ROC-AUC = 0.926

           dist_n  dist_p  ind_n  ind_p  prediction
    0      1.076   1.184      5      3      -0.731
    1      1.091   1.219     43      3      -0.727
    2      0.950   1.413     64      0      -0.763
    3      1.095   0.000     67      0       1.000
    4      0.865   1.201     64      0      -0.784
    5      1.019   1.445     37      0      -0.745
    6      0.780   1.340     49      0      -0.805
    7      1.090   1.444     64      1      -0.728
    8      1.044   1.277      5      0      -0.739
    9      0.000   1.336      5      3      -1.000
    10     0.940   1.168     67      0      -0.765
    11     1.127   1.353      6      4      -0.718
    12     1.141   1.317      6      4      -0.715
    13     0.591   1.341     55      3      -0.852
    14     0.097   1.265     55      3      -0.976
    15     1.174   1.221     48      1      -0.707
    16     1.126   1.352      6      0      -0.719
    17     1.230   1.324      6      4      -0.692
    18     1.229   1.364     10      1      -0.693
    19     1.000   1.461     30      3      -0.750
    20     1.153   1.325     37      1      -0.712
    21     0.467   1.412     63      1      -0.883
    22     1.297   1.426     22      0      -0.676
    23     1.300   1.421     22      4      -0.675
    24     0.882   1.416     58      2      -0.779
    25     0.931   1.385     63      0      -0.767
    26     1.202   1.351     58      4      -0.699
    27     1.275   1.305     12      2      -0.681
    28     1.135   1.373      6      0      -0.716
    29     1.231   1.344      6      4      -0.692
    ...      ...     ...    ...    ...         ...
    2435   1.303   1.453     45      1      -0.674
    2436   0.725   1.361     21      2      -0.819
    2437   1.044   1.361     21      2      -0.739
    2438   1.234   1.404     21      2      -0.692
    2439   1.124   1.435     45      2      -0.719
    2440   1.267   1.417     31      2      -0.683
    2441   1.057   1.385     45      0      -0.736
    2442   1.249   1.401     19      1      -0.688
    2443   1.096   1.425      5      1      -0.726
    2444   1.276   1.410      5      1      -0.681
    2445   1.105   1.464      5      2      -0.724
    2446   1.272   1.427      5      2      -0.682
    2447   0.981   1.274     64      2      -0.755
    2448   1.273   1.291     64      2      -0.682
    2449   0.890   1.230     37      0      -0.777
    2450   0.563   1.293     66      0      -0.859
    2451   0.000   1.095     67      0      -1.000
    2452   0.856   1.256     67      0      -0.786
    2453   0.927   1.196     67      0      -0.768
    2454   1.122   1.305     67      0      -0.719
    2455   1.030   1.124     47      0      -0.742
    2456   1.209   0.855     66      0       0.786
    2457   0.963   1.403     48      1      -0.759
    2458   1.232   1.325     31      1      -0.692
    2459   0.769   1.047     42      2      -0.808
    2460   1.265   1.329      7      2      -0.684
    2461   1.270   1.360      7      2      -0.682
    2462   1.223   1.337     64      2      -0.694
    2463   1.262   1.347      7      2      -0.684
    2464   1.026   1.136     42      2      -0.744

    [2465 rows x 5 columns]

    5.a Delete the extracted features (and LSI decomposition)
     DELETE http://localhost:5001/api/v0/feature-extraction/2f01b2a9b51f44ac




|


.. code-block:: python


    from __future__ import print_function

    from time import time, sleep
    from multiprocessing import Process
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/datasets/{}'.format(dataset_name)
        print(" GET", url)
        res = requests.get(url).json()

        # To use a custom dataset, simply specify the following variables
        data_dir = res['data_dir']
        seed_filenames = res['seed_filenames']
        seed_y = res['seed_y']
        ground_truth_file = res['ground_truth_file']  # (optional)


        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        fe_opts = {'data_dir': data_dir,
                   'stop_words': 'english', 'chunk_size': 2000, 'n_jobs': -1,
                   'use_idf': 1, 'sublinear_tf': 0, 'binary': 0, 'n_features': 50001,
                   'analyzer': 'word', 'ngram_range': (1, 1), "norm": "l2"
                  }
        res = requests.post(url, json=fe_opts).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction (in the background)")

        # Make this call in a background process (there should be a better way of doing it)
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        p = Process(target=requests.post, args=(url,))
        p.start()
        sleep(5.0) # wait a bit for the processing to start

        print('\n1.c Monitor feature extraction progress')
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" GET", url)

        t0 = time()
        while True:
            res = requests.get(url)
            if res.status_code == 520:
                p.terminate()
                raise ValueError('Processing did not start')
            elif res.status_code == 200:
                break # processing finished
            data = res.json()
            print('     ... {}k/{}k files processed in {:.1f} min'.format(
                        data['n_samples_processed']//1000, data['n_samples']//1000, (time() - t0)/60.))
            sleep(15.0)

        p.terminate()  # just in case, should not be necessary


        print("\n1.d. check the parameters of the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(' GET', url)
        res = requests.get(url).json()

        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                          if "filenames" not in key]))

        method = BASE_URL + "/feature-extraction/{}/index".format(dsid)
        res = requests.get(method, data={'filenames': seed_filenames})
        seed_index = res.json()['index']


        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Document categorization

        print("\n3.a. Train the categorization model")
        print("   {} relevant, {} non-relevant files".format(seed_y.count(1), seed_y.count(0)))

        for method, use_lsi in [('LinearSVC', False),
                                ('NearestNeighbor', True)]:

            print('='*80, '\n', ' '*10,
                  method, " + LSI" if use_lsi else ' ', '\n', '='*80)
            if use_lsi:
                # Categorization with the previously created LSI model
                parent_id = lsi_id
            else:
                # Categorization with original text features
                parent_id = dsid

            url = BASE_URL + '/categorization/'
            print(" POST", url)
            print(' Training...')

            res = requests.post(url,
                                json={'index': seed_index,
                                      'y': seed_y,
                                      'parent_id': parent_id,
                                      'method': method,  # one of "LinearSVC", "LogisticRegression", 'xgboost'
                                      }).json()

            mid = res['id']
            print("     => model id = {}".format(mid))
            print('    => Training scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

            print("\n3.b. Check the parameters used in the categorization model")
            url = BASE_URL + '/categorization/{}'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                              if key not in ['index', 'y']]))

            print("\n3.c Categorize the complete dataset with this model")
            url = BASE_URL + '/categorization/{}/predict'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()
            prediction = res['prediction']

            if method == "NearestNeighbor":
                df = pd.DataFrame({key: res[key] for key in res if key not in ['id', 'scores']})

            print("\n3.d Test categorization accuracy")
            print("         using {}".format(ground_truth_file))  
            url = BASE_URL + '/categorization/{}/test'.format(mid)
            print("POST", url)
            res = requests.post(url, json={'ground_truth_filename': ground_truth_file}).json()

            print('    => Test scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

        print('\n', df)

        # 4. Cleaning
        print("\n5.a Delete the extracted features (and LSI decomposition)")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  59.551 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_categorization.py <REST_categorization.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_categorization.ipynb <REST_categorization.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
