

.. _sphx_glr_examples_REST_categorization.py:


Categorization Example [REST API]
---------------------------------

An example to illustrate binary categorizaiton with FreeDiscovery





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = 7751e68100d04187

    1.b Start feature extraction (in the background)
     POST http://localhost:5001/api/v0/feature-extraction/7751e68100d04187

    1.c Monitor feature extraction progress
     GET http://localhost:5001/api/v0/feature-extraction/7751e68100d04187

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/7751e68100d04187
         - binary: False
         - n_jobs: 1
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - use_hashing: True
         - min_df: 0.0
         - analyzer: word
         - n_samples: 2465
         - ngram_range: [1, 1]
         - max_df: 1.0
         - chunk_size: 5000
         - use_idf: False
         - stop_words: None
         - n_features: 100001
         - n_samples_processed: 2465
         - sublinear_tf: True
         - norm: None

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = ccf25bee43954ad1
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Train the categorization model
       <pandas.core.groupby.DataFrameGroupBy object at 0x2b9c009cded0> positive, 0 negative files
    ================================================================================ 
                LinearSVC   
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 2de403233d8a42d5
        => Training scores: MAP = 0.537, ROC-AUC = 0.500, F1= 0.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/2de403233d8a42d5
         - method: LinearSVC
         - options: {'loss': 'squared_hinge', 'C': 1.0, 'verbose': 0, 'intercept_scaling': 1, 'fit_intercept': True, 'max_iter': 1000, 'penalty': 'l2', 'multi_class': 'ovr', 'random_state': None, 'dual': True, 'tol': 0.0001, 'class_weight': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/2de403233d8a42d5/predict
                 document_id                                             scores
    internal_id                                                                
    0                      0  [{u'category': u'negative', u'score': 0.699668...
    1                      1  [{u'category': u'negative', u'score': 0.699727...
    2                      4  [{u'category': u'negative', u'score': 0.699666...
    3                      9  [{u'category': u'negative', u'score': 0.699665...
    4                     16  [{u'category': u'negative', u'score': 0.699667...
    5                     25  [{u'category': u'negative', u'score': 0.699666...
    6                     36  [{u'category': u'negative', u'score': 0.699666...
    7                     49  [{u'category': u'negative', u'score': 0.699666...
    8                     64  [{u'category': u'negative', u'score': 0.699666...
    9                     81  [{u'category': u'negative', u'score': 0.699666...
    10                   100  [{u'category': u'negative', u'score': 0.699666...
    11                   121  [{u'category': u'negative', u'score': 0.699750...
    12                   144  [{u'category': u'negative', u'score': 0.699740...
    13                   169  [{u'category': u'negative', u'score': 0.699889...
    14                   196  [{u'category': u'negative', u'score': 0.699707...
    15                   225  [{u'category': u'negative', u'score': 0.699668...
    16                   256  [{u'category': u'negative', u'score': 0.699903...
    17                   289  [{u'category': u'negative', u'score': 0.699799...
    18                   324  [{u'category': u'negative', u'score': 0.699705...
    19                   361  [{u'category': u'negative', u'score': 0.699730...
    20                   400  [{u'category': u'negative', u'score': 0.699669...
    21                   441  [{u'category': u'negative', u'score': 0.699968...
    22                   484  [{u'category': u'negative', u'score': 0.699739...
    23                   529  [{u'category': u'negative', u'score': 0.699739...
    24                   576  [{u'category': u'negative', u'score': 0.699685...
    25                   625  [{u'category': u'negative', u'score': 0.700021...
    26                   676  [{u'category': u'negative', u'score': 0.699810...
    27                   729  [{u'category': u'negative', u'score': 0.699730...
    28                   784  [{u'category': u'negative', u'score': 0.699952...
    29                   841  [{u'category': u'negative', u'score': 0.699806...
    ...                  ...                                                ...
    2435             5929225  [{u'category': u'negative', u'score': 0.700270...
    2436             5934096  [{u'category': u'negative', u'score': 0.699667...
    2437             5938969  [{u'category': u'negative', u'score': 0.699668...
    2438             5943844  [{u'category': u'negative', u'score': 0.699667...
    2439             5948721  [{u'category': u'negative', u'score': 0.699667...
    2440             5953600  [{u'category': u'negative', u'score': 0.699667...
    2441             5958481  [{u'category': u'negative', u'score': 0.699666...
    2442             5963364  [{u'category': u'negative', u'score': 0.699667...
    2443             5968249  [{u'category': u'negative', u'score': 0.699667...
    2444             5973136  [{u'category': u'negative', u'score': 0.699667...
    2445             5978025  [{u'category': u'negative', u'score': 0.699666...
    2446             5982916  [{u'category': u'negative', u'score': 0.699667...
    2447             5987809  [{u'category': u'negative', u'score': 0.699666...
    2448             5992704  [{u'category': u'negative', u'score': 0.699666...
    2449             5997601  [{u'category': u'negative', u'score': 0.699666...
    2450             6002500  [{u'category': u'negative', u'score': 0.699666...
    2451             6007401  [{u'category': u'negative', u'score': 0.699673...
    2452             6012304  [{u'category': u'negative', u'score': 0.699673...
    2453             6017209  [{u'category': u'negative', u'score': 0.699669...
    2454             6022116  [{u'category': u'negative', u'score': 0.699669...
    2455             6027025  [{u'category': u'negative', u'score': 0.699669...
    2456             6031936  [{u'category': u'negative', u'score': 0.699666...
    2457             6036849  [{u'category': u'negative', u'score': 0.699670...
    2458             6041764  [{u'category': u'negative', u'score': 0.699666...
    2459             6046681  [{u'category': u'negative', u'score': 0.699698...
    2460             6051600  [{u'category': u'negative', u'score': 0.699669...
    2461             6056521  [{u'category': u'negative', u'score': 0.699715...
    2462             6061444  [{u'category': u'negative', u'score': 0.699697...
    2463             6066369  [{u'category': u'negative', u'score': 0.699685...
    2464             6071296  [{u'category': u'negative', u'score': 0.699727...

    [2465 rows x 2 columns]
    ================================================================================ 
                NearestNeighbor  + LSI 
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = d5259a135918407b
        => Training scores: MAP = 1.000, ROC-AUC = 1.000, F1= 1.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/d5259a135918407b
         - method: NearestNeighbor
         - options: {'n_jobs': 1, 'radius': None, 'leaf_size': 30, 'algorithm': u'brute'}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/d5259a135918407b/predict
                 document_id                                             scores
    internal_id                                                                
    0                      0  [{u'category': u'positive', u'score': 0.909532...
    1                      1  [{u'category': u'negative', u'score': 0.362702...
    2                      4  [{u'category': u'positive', u'score': 0.985747...
    3                      9  [{u'category': u'positive', u'score': 1.0, u'i...
    4                     16  [{u'category': u'positive', u'score': 0.972183...
    5                     25  [{u'category': u'positive', u'score': 0.984547...
    6                     36  [{u'category': u'positive', u'score': 0.975514...
    7                     49  [{u'category': u'positive', u'score': 0.991521...
    8                     64  [{u'category': u'positive', u'score': 0.989404...
    9                     81  [{u'category': u'negative', u'score': 1.0, u'i...
    10                   100  [{u'category': u'positive', u'score': 0.995156...
    11                   121  [{u'category': u'negative', u'score': 0.360339...
    12                   144  [{u'category': u'negative', u'score': 0.347506...
    13                   169  [{u'category': u'negative', u'score': 0.372958...
    14                   196  [{u'category': u'negative', u'score': 0.986457...
    15                   225  [{u'category': u'negative', u'score': 0.904804...
    16                   256  [{u'category': u'negative', u'score': 0.154458...
    17                   289  [{u'category': u'negative', u'score': 0.249420...
    18                   324  [{u'category': u'negative', u'score': 0.627836...
    19                   361  [{u'category': u'negative', u'score': 0.687191...
    20                   400  [{u'category': u'negative', u'score': 0.908070...
    21                   441  [{u'category': u'negative', u'score': 0.732186...
    22                   484  [{u'category': u'negative', u'score': 0.406630...
    23                   529  [{u'category': u'negative', u'score': 0.398306...
    24                   576  [{u'category': u'negative', u'score': 0.687536...
    25                   625  [{u'category': u'negative', u'score': 0.281535...
    26                   676  [{u'category': u'negative', u'score': 0.290174...
    27                   729  [{u'category': u'negative', u'score': 0.533201...
    28                   784  [{u'category': u'negative', u'score': 0.164491...
    29                   841  [{u'category': u'negative', u'score': 0.243287...
    ...                  ...                                                ...
    2435             5929225  [{u'category': u'negative', u'score': 0.177198...
    2436             5934096  [{u'category': u'positive', u'score': 0.983284...
    2437             5938969  [{u'category': u'negative', u'score': 0.912200...
    2438             5943844  [{u'category': u'negative', u'score': 0.914988...
    2439             5948721  [{u'category': u'negative', u'score': 0.981323...
    2440             5953600  [{u'category': u'negative', u'score': 0.926161...
    2441             5958481  [{u'category': u'negative', u'score': 0.983089...
    2442             5963364  [{u'category': u'negative', u'score': 0.918271...
    2443             5968249  [{u'category': u'positive', u'score': 0.967903...
    2444             5973136  [{u'category': u'negative', u'score': 0.892253...
    2445             5978025  [{u'category': u'positive', u'score': 0.972603...
    2446             5982916  [{u'category': u'negative', u'score': 0.908955...
    2447             5987809  [{u'category': u'positive', u'score': 0.984794...
    2448             5992704  [{u'category': u'negative', u'score': 0.943020...
    2449             5997601  [{u'category': u'positive', u'score': 0.995435...
    2450             6002500  [{u'category': u'negative', u'score': 0.936484...
    2451             6007401  [{u'category': u'negative', u'score': 1.0, u'i...
    2452             6012304  [{u'category': u'negative', u'score': 0.885321...
    2453             6017209  [{u'category': u'negative', u'score': 0.954616...
    2454             6022116  [{u'category': u'negative', u'score': 0.836966...
    2455             6027025  [{u'category': u'negative', u'score': 0.960664...
    2456             6031936  [{u'category': u'positive', u'score': 0.997501...
    2457             6036849  [{u'category': u'negative', u'score': 0.903419...
    2458             6041764  [{u'category': u'positive', u'score': 0.985747...
    2459             6046681  [{u'category': u'negative', u'score': 0.927653...
    2460             6051600  [{u'category': u'negative', u'score': 0.653934...
    2461             6056521  [{u'category': u'negative', u'score': 0.569046...
    2462             6061444  [{u'category': u'negative', u'score': 0.631777...
    2463             6066369  [{u'category': u'negative', u'score': 0.566570...
    2464             6071296  [{u'category': u'negative', u'score': 0.628266...

    [2465 rows x 2 columns]

    5.a Delete the extracted features (and LSI decomposition)
     DELETE http://localhost:5001/api/v0/feature-extraction/7751e68100d04187




|


.. code-block:: python


    from __future__ import print_function

    from time import time, sleep
    import os.path
    from multiprocessing import Process
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the example dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url, params={'train_set_fields': ['document_id']}).json()


        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]
        # create a custom dataset definition for ingestion

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction (in the background)")

        # Make this call in a background process (there should be a better way of doing it)
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        p = Process(target=requests.post, args=(url,))
        p.start()
        sleep(5.0) # wait a bit for the processing to start

        print('\n1.c Monitor feature extraction progress')
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" GET", url)

        t0 = time()
        while True:
            res = requests.get(url)
            if res.status_code == 520:
                p.terminate()
                raise ValueError('Processing did not start')
            elif res.status_code == 200:
                break # processing finished
            data = res.json()
            print('     ... {}k/{}k files processed in {:.1f} min'.format(
                        data['n_samples_processed']//1000, data['n_samples']//1000, (time() - t0)/60.))
            sleep(15.0)

        p.terminate()  # just in case, should not be necessary


        print("\n1.d. check the parameters of the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(' GET', url)
        res = requests.get(url).json()

        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                          if "filenames" not in key]))
        # this step is not necessary anymore
        #method = BASE_URL + "/feature-extraction/{}/id-mapping/flat".format(dsid)
        #res = requests.get(method, data={'document_id': seed_document_id})
        #seed_internal_id = res.json()['internal_id']


        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Document categorization

        print("\n3.a. Train the categorization model")
        print("   {} positive, {} negative files".format(pd.DataFrame(input_ds['training_set']).groupby('category'), 0))

        for method, use_lsi in [('LinearSVC', False),
                                ('NearestNeighbor', True)]:

            print('='*80, '\n', ' '*10,
                  method, " + LSI" if use_lsi else ' ', '\n', '='*80)
            if use_lsi:
                # Categorization with the previously created LSI model
                parent_id = lsi_id
            else:
                # Categorization with original text features
                parent_id = dsid

            url = BASE_URL + '/categorization/'
            print(" POST", url)
            print(' Training...')

            res = requests.post(url,
                                json={'parent_id': parent_id,
                                      'data': input_ds['training_set'],
                                      'method': method,  # one of "LinearSVC", "LogisticRegression", 'xgboost'
                                      }).json()

            mid = res['id']
            print("     => model id = {}".format(mid))
            print('    => Training scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}, F1= {f1:.3f}'.format(**res))

            print("\n3.b. Check the parameters used in the categorization model")
            url = BASE_URL + '/categorization/{}'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                              if key not in ['index', 'category']]))

            print("\n3.c Categorize the complete dataset with this model")
            url = BASE_URL + '/categorization/{}/predict'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            if method == "NearestNeighbor":
                data = res['data']
            else:
                data = res['data']

            df = pd.DataFrame(data).set_index('internal_id')
            #if method == "NearestNeighbor":
            #    df = df[['document_id', 'nn_negative__distance', 'nn_negative__document_id',
            #          'nn_positive__distance', 'nn_positive__document_id', 'score']]

            print(df)

            #print("\n3.d Compute the categorization scores")
            #url = BASE_URL + '/metrics/categorization'
            #print(" GET", url)
            #res = requests.post(url, json={'y_true': ground_truth_y,
            #                              'y_pred': df.score.values.tolist(),
            #                             } ).json()


            #print('    => Test scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

        # 4. Cleaning
        print("\n5.a Delete the extracted features (and LSI decomposition)")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  59.471 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_categorization.py <REST_categorization.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_categorization.ipynb <REST_categorization.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
