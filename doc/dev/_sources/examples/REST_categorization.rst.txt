

.. _sphx_glr_examples_REST_categorization.py:


Categorization Example [REST API]
---------------------------------

An example to illustrate binary categorizaiton with FreeDiscovery





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 3a0b52372c924a04

    1.b Start feature extraction (in the background)
     POST http://localhost:5001/api/v0/feature-extraction/3a0b52372c924a04

    1.c Monitor feature extraction progress
     GET http://localhost:5001/api/v0/feature-extraction/3a0b52372c924a04

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/3a0b52372c924a04
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 1.0
         - min_df: 0.0
         - n_features: 100001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: None
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: True
         - use_idf: False

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 577b0b8fd48344bd
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Train the categorization model
       <pandas.core.groupby.DataFrameGroupBy object at 0x2baa2fc5fa58> positive, 0 negative files
    ================================================================================ 
                LinearSVC   
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 245e85539b0742d3
        => Training scores: MAP = 0.537, ROC-AUC = 0.500, F1= 0.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/245e85539b0742d3
         - method: LinearSVC
         - options: {'C': 1.0, 'class_weight': None, 'dual': True, 'fit_intercept': True, 'intercept_scaling': 1, 'loss': 'squared_hinge', 'max_iter': 1000, 'multi_class': 'ovr', 'penalty': 'l2', 'random_state': None, 'tol': 0.0001, 'verbose': 0}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/245e85539b0742d3/predict
                 document_id                                             scores
    internal_id                                                                
    0                      0  [{'category': 'negative', 'score': 0.699674245...
    1                      1  [{'category': 'negative', 'score': 0.699733764...
    2                      4  [{'category': 'negative', 'score': 0.699672695...
    3                      9  [{'category': 'negative', 'score': 0.699671712...
    4                     16  [{'category': 'negative', 'score': 0.699673303...
    5                     25  [{'category': 'negative', 'score': 0.699672639...
    6                     36  [{'category': 'negative', 'score': 0.699672529...
    7                     49  [{'category': 'negative', 'score': 0.699672671...
    8                     64  [{'category': 'negative', 'score': 0.699672613...
    9                     81  [{'category': 'negative', 'score': 0.699672670...
    10                   100  [{'category': 'negative', 'score': 0.699672422...
    11                   121  [{'category': 'negative', 'score': 0.699756331...
    12                   144  [{'category': 'negative', 'score': 0.699746009...
    13                   169  [{'category': 'negative', 'score': 0.699895045...
    14                   196  [{'category': 'negative', 'score': 0.699712862...
    15                   225  [{'category': 'negative', 'score': 0.699674556...
    16                   256  [{'category': 'negative', 'score': 0.699909350...
    17                   289  [{'category': 'negative', 'score': 0.699805338...
    18                   324  [{'category': 'negative', 'score': 0.699711766...
    19                   361  [{'category': 'negative', 'score': 0.699736009...
    20                   400  [{'category': 'negative', 'score': 0.699675482...
    21                   441  [{'category': 'negative', 'score': 0.699974053...
    22                   484  [{'category': 'negative', 'score': 0.699745454...
    23                   529  [{'category': 'negative', 'score': 0.699745162...
    24                   576  [{'category': 'negative', 'score': 0.699691164...
    25                   625  [{'category': 'negative', 'score': 0.700027229...
    26                   676  [{'category': 'negative', 'score': 0.699816835...
    27                   729  [{'category': 'negative', 'score': 0.699736208...
    28                   784  [{'category': 'negative', 'score': 0.699958611...
    29                   841  [{'category': 'negative', 'score': 0.699812295...
    ...                  ...                                                ...
    2435             5929225  [{'category': 'negative', 'score': 0.700276092...
    2436             5934096  [{'category': 'negative', 'score': 0.699673711...
    2437             5938969  [{'category': 'negative', 'score': 0.699673988...
    2438             5943844  [{'category': 'negative', 'score': 0.699672956...
    2439             5948721  [{'category': 'negative', 'score': 0.699673008...
    2440             5953600  [{'category': 'negative', 'score': 0.699673284...
    2441             5958481  [{'category': 'negative', 'score': 0.699672756...
    2442             5963364  [{'category': 'negative', 'score': 0.699673033...
    2443             5968249  [{'category': 'negative', 'score': 0.699673155...
    2444             5973136  [{'category': 'negative', 'score': 0.699673432...
    2445             5978025  [{'category': 'negative', 'score': 0.699672764...
    2446             5982916  [{'category': 'negative', 'score': 0.699673041...
    2447             5987809  [{'category': 'negative', 'score': 0.699672310...
    2448             5992704  [{'category': 'negative', 'score': 0.699672587...
    2449             5997601  [{'category': 'negative', 'score': 0.699672529...
    2450             6002500  [{'category': 'negative', 'score': 0.699672731...
    2451             6007401  [{'category': 'negative', 'score': 0.699679208...
    2452             6012304  [{'category': 'negative', 'score': 0.699679485...
    2453             6017209  [{'category': 'negative', 'score': 0.699675104...
    2454             6022116  [{'category': 'negative', 'score': 0.699675381...
    2455             6027025  [{'category': 'negative', 'score': 0.699675686...
    2456             6031936  [{'category': 'negative', 'score': 0.699672304...
    2457             6036849  [{'category': 'negative', 'score': 0.699675904...
    2458             6041764  [{'category': 'negative', 'score': 0.699672522...
    2459             6046681  [{'category': 'negative', 'score': 0.699703905...
    2460             6051600  [{'category': 'negative', 'score': 0.699675461...
    2461             6056521  [{'category': 'negative', 'score': 0.699721362...
    2462             6061444  [{'category': 'negative', 'score': 0.699703050...
    2463             6066369  [{'category': 'negative', 'score': 0.699691804...
    2464             6071296  [{'category': 'negative', 'score': 0.699733478...

    [2465 rows x 2 columns]
    ================================================================================ 
                NearestNeighbor  + LSI 
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = b48230abc9a244a8
        => Training scores: MAP = 1.000, ROC-AUC = 1.000, F1= 1.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/b48230abc9a244a8
         - method: NearestNeighbor
         - options: {'algorithm': 'brute', 'leaf_size': 30, 'n_jobs': 1, 'radius': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/b48230abc9a244a8/predict
                 document_id                                             scores
    internal_id                                                                
    0                      0  [{'category': 'positive', 'document_id': 0, 'i...
    1                      1  [{'category': 'negative', 'document_id': 1, 'i...
    2                      4  [{'category': 'negative', 'document_id': 4, 'i...
    3                      9  [{'category': 'positive', 'document_id': 9, 'i...
    4                     16  [{'category': 'positive', 'document_id': 16, '...
    5                     25  [{'category': 'positive', 'document_id': 25, '...
    6                     36  [{'category': 'positive', 'document_id': 36, '...
    7                     49  [{'category': 'positive', 'document_id': 49, '...
    8                     64  [{'category': 'positive', 'document_id': 64, '...
    9                     81  [{'category': 'negative', 'document_id': 81, '...
    10                   100  [{'category': 'positive', 'document_id': 100, ...
    11                   121  [{'category': 'negative', 'document_id': 121, ...
    12                   144  [{'category': 'negative', 'document_id': 144, ...
    13                   169  [{'category': 'negative', 'document_id': 169, ...
    14                   196  [{'category': 'negative', 'document_id': 196, ...
    15                   225  [{'category': 'negative', 'document_id': 225, ...
    16                   256  [{'category': 'negative', 'document_id': 256, ...
    17                   289  [{'category': 'negative', 'document_id': 289, ...
    18                   324  [{'category': 'negative', 'document_id': 324, ...
    19                   361  [{'category': 'negative', 'document_id': 361, ...
    20                   400  [{'category': 'negative', 'document_id': 400, ...
    21                   441  [{'category': 'negative', 'document_id': 441, ...
    22                   484  [{'category': 'negative', 'document_id': 484, ...
    23                   529  [{'category': 'negative', 'document_id': 529, ...
    24                   576  [{'category': 'negative', 'document_id': 576, ...
    25                   625  [{'category': 'negative', 'document_id': 625, ...
    26                   676  [{'category': 'negative', 'document_id': 676, ...
    27                   729  [{'category': 'negative', 'document_id': 729, ...
    28                   784  [{'category': 'negative', 'document_id': 784, ...
    29                   841  [{'category': 'negative', 'document_id': 841, ...
    ...                  ...                                                ...
    2435             5929225  [{'category': 'negative', 'document_id': 59292...
    2436             5934096  [{'category': 'positive', 'document_id': 59340...
    2437             5938969  [{'category': 'negative', 'document_id': 59389...
    2438             5943844  [{'category': 'negative', 'document_id': 59438...
    2439             5948721  [{'category': 'negative', 'document_id': 59487...
    2440             5953600  [{'category': 'negative', 'document_id': 59536...
    2441             5958481  [{'category': 'negative', 'document_id': 59584...
    2442             5963364  [{'category': 'negative', 'document_id': 59633...
    2443             5968249  [{'category': 'positive', 'document_id': 59682...
    2444             5973136  [{'category': 'negative', 'document_id': 59731...
    2445             5978025  [{'category': 'positive', 'document_id': 59780...
    2446             5982916  [{'category': 'negative', 'document_id': 59829...
    2447             5987809  [{'category': 'positive', 'document_id': 59878...
    2448             5992704  [{'category': 'negative', 'document_id': 59927...
    2449             5997601  [{'category': 'positive', 'document_id': 59976...
    2450             6002500  [{'category': 'negative', 'document_id': 60025...
    2451             6007401  [{'category': 'negative', 'document_id': 60074...
    2452             6012304  [{'category': 'negative', 'document_id': 60123...
    2453             6017209  [{'category': 'negative', 'document_id': 60172...
    2454             6022116  [{'category': 'negative', 'document_id': 60221...
    2455             6027025  [{'category': 'negative', 'document_id': 60270...
    2456             6031936  [{'category': 'positive', 'document_id': 60319...
    2457             6036849  [{'category': 'negative', 'document_id': 60368...
    2458             6041764  [{'category': 'positive', 'document_id': 60417...
    2459             6046681  [{'category': 'negative', 'document_id': 60466...
    2460             6051600  [{'category': 'negative', 'document_id': 60516...
    2461             6056521  [{'category': 'negative', 'document_id': 60565...
    2462             6061444  [{'category': 'negative', 'document_id': 60614...
    2463             6066369  [{'category': 'negative', 'document_id': 60663...
    2464             6071296  [{'category': 'negative', 'document_id': 60712...

    [2465 rows x 2 columns]

    5.a Delete the extracted features (and LSI decomposition)
     DELETE http://localhost:5001/api/v0/feature-extraction/3a0b52372c924a04




|


.. code-block:: python


    from __future__ import print_function

    from time import time, sleep
    import os.path
    from multiprocessing import Process
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the example dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()


        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]
        # create a custom dataset definition for ingestion

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction (in the background)")

        # Make this call in a background process (there should be a better way of doing it)
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        p = Process(target=requests.post, args=(url,))
        p.start()
        sleep(5.0) # wait a bit for the processing to start

        print('\n1.c Monitor feature extraction progress')
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" GET", url)

        t0 = time()
        while True:
            res = requests.get(url)
            if res.status_code == 520:
                p.terminate()
                raise ValueError('Processing did not start')
            elif res.status_code == 200:
                break # processing finished
            data = res.json()
            print('     ... {}k/{}k files processed in {:.1f} min'.format(
                        data['n_samples_processed']//1000, data['n_samples']//1000, (time() - t0)/60.))
            sleep(15.0)

        p.terminate()  # just in case, should not be necessary


        print("\n1.d. check the parameters of the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(' GET', url)
        res = requests.get(url).json()

        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                          if "filenames" not in key]))
        # this step is not necessary anymore
        #method = BASE_URL + "/feature-extraction/{}/id-mapping/flat".format(dsid)
        #res = requests.get(method, data={'document_id': seed_document_id})
        #seed_internal_id = res.json()['internal_id']


        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Document categorization

        print("\n3.a. Train the categorization model")
        print("   {} positive, {} negative files".format(pd.DataFrame(input_ds['training_set']).groupby('category'), 0))

        for method, use_lsi in [('LinearSVC', False),
                                ('NearestNeighbor', True)]:

            print('='*80, '\n', ' '*10,
                  method, " + LSI" if use_lsi else ' ', '\n', '='*80)
            if use_lsi:
                # Categorization with the previously created LSI model
                parent_id = lsi_id
            else:
                # Categorization with original text features
                parent_id = dsid

            url = BASE_URL + '/categorization/'
            print(" POST", url)
            print(' Training...')

            res = requests.post(url,
                                json={'parent_id': parent_id,
                                      'data': input_ds['training_set'],
                                      'method': method,  # one of "LinearSVC", "LogisticRegression", 'xgboost'
                                      }).json()

            mid = res['id']
            print("     => model id = {}".format(mid))
            print('    => Training scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}, F1= {f1:.3f}'.format(**res))

            print("\n3.b. Check the parameters used in the categorization model")
            url = BASE_URL + '/categorization/{}'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                              if key not in ['index', 'category']]))

            print("\n3.c Categorize the complete dataset with this model")
            url = BASE_URL + '/categorization/{}/predict'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            if method == "NearestNeighbor":
                data = res['data']
            else:
                data = res['data']

            df = pd.DataFrame(data).set_index('internal_id')
            #if method == "NearestNeighbor":
            #    df = df[['document_id', 'nn_negative__distance', 'nn_negative__document_id',
            #          'nn_positive__distance', 'nn_positive__document_id', 'score']]

            print(df)

            #print("\n3.d Compute the categorization scores")
            #url = BASE_URL + '/metrics/categorization'
            #print(" GET", url)
            #res = requests.post(url, json={'y_true': ground_truth_y,
            #                              'y_pred': df.score.values.tolist(),
            #                             } ).json()


            #print('    => Test scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

        # 4. Cleaning
        print("\n5.a Delete the extracted features (and LSI decomposition)")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  16.558 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_categorization.py <REST_categorization.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_categorization.ipynb <REST_categorization.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
