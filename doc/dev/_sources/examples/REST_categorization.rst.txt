

.. _sphx_glr_examples_REST_categorization.py:


Categorization Example [REST API]
---------------------------------

An example to illustrate binary categorizaiton with FreeDiscovery





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received [u'id', u'filenames']
       => dsid = 689ce849735249ae

    1.b Start feature extraction (in the background)
     POST http://localhost:5001/api/v0/feature-extraction/689ce849735249ae

    1.c Monitor feature extraction progress
     GET http://localhost:5001/api/v0/feature-extraction/689ce849735249ae

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/689ce849735249ae
         - binary: False
         - n_jobs: 1
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - use_hashing: True
         - min_df: 0.0
         - analyzer: word
         - n_samples: 2465
         - ngram_range: [1, 1]
         - max_df: 1.0
         - chunk_size: 5000
         - use_idf: False
         - stop_words: None
         - n_features: 100001
         - n_samples_processed: 2465
         - sublinear_tf: True
         - norm: None

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 20afecdeef204d07
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Train the categorization model
       5 relevant, 63 non-relevant files
    ================================================================================ 
                LinearSVC   
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = a0846b7e935f4a78
        => Training scores: MAP = 0.537, ROC-AUC = 0.500, F1= 0.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/a0846b7e935f4a78
         - y: [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         - method: LinearSVC
         - options: {'loss': 'squared_hinge', 'C': 1.0, 'verbose': 0, 'intercept_scaling': 1, 'fit_intercept': True, 'max_iter': 1000, 'penalty': 'l2', 'multi_class': 'ovr', 'random_state': None, 'dual': True, 'tol': 0.0001, 'class_weight': None}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/a0846b7e935f4a78/predict
                 document_id                                           scores
    internal_id                                                              
    0                      0  [{u'category': u'0', u'score': 0.699671834156}]
    1                      1   [{u'category': u'0', u'score': 0.69973135446}]
    2                      2  [{u'category': u'0', u'score': 0.699670283828}]
    3                      3  [{u'category': u'0', u'score': 0.699669300773}]
    4                      4  [{u'category': u'0', u'score': 0.699670892173}]
    5                      5  [{u'category': u'0', u'score': 0.699670227727}]
    6                      6  [{u'category': u'0', u'score': 0.699670118365}]
    7                      7  [{u'category': u'0', u'score': 0.699670260288}]
    8                      8  [{u'category': u'0', u'score': 0.699670201798}]
    9                      9  [{u'category': u'0', u'score': 0.699670258426}]
    10                    10   [{u'category': u'0', u'score': 0.69967001088}]
    11                    11  [{u'category': u'0', u'score': 0.699753922425}]
    12                    12  [{u'category': u'0', u'score': 0.699743599858}]
    13                    13  [{u'category': u'0', u'score': 0.699892645205}]
    14                    14  [{u'category': u'0', u'score': 0.699710451859}]
    15                    15  [{u'category': u'0', u'score': 0.699672144424}]
    16                    16  [{u'category': u'0', u'score': 0.699906946936}]
    17                    17  [{u'category': u'0', u'score': 0.699802931152}]
    18                    18   [{u'category': u'0', u'score': 0.69970935631}]
    19                    19  [{u'category': u'0', u'score': 0.699733600043}]
    20                    20  [{u'category': u'0', u'score': 0.699673071099}]
    21                    21  [{u'category': u'0', u'score': 0.699971654267}]
    22                    22  [{u'category': u'0', u'score': 0.699743044724}]
    23                    23  [{u'category': u'0', u'score': 0.699742752362}]
    24                    24  [{u'category': u'0', u'score': 0.699688752968}]
    25                    25  [{u'category': u'0', u'score': 0.700024829647}]
    26                    26   [{u'category': u'0', u'score': 0.69981442852}]
    27                    27  [{u'category': u'0', u'score': 0.699733799706}]
    28                    28  [{u'category': u'0', u'score': 0.699956209591}]
    29                    29  [{u'category': u'0', u'score': 0.699809888308}]
    ...                  ...                                              ...
    2435                2435  [{u'category': u'0', u'score': 0.700273707949}]
    2436                2436  [{u'category': u'0', u'score': 0.699671299875}]
    2437                2437  [{u'category': u'0', u'score': 0.699671576499}]
    2438                2438  [{u'category': u'0', u'score': 0.699670544907}]
    2439                2439  [{u'category': u'0', u'score': 0.699670596683}]
    2440                2440  [{u'category': u'0', u'score': 0.699670873307}]
    2441                2441  [{u'category': u'0', u'score': 0.699670345105}]
    2442                2442  [{u'category': u'0', u'score': 0.699670621729}]
    2443                2443  [{u'category': u'0', u'score': 0.699670743714}]
    2444                2444  [{u'category': u'0', u'score': 0.699671020338}]
    2445                2445  [{u'category': u'0', u'score': 0.699670352932}]
    2446                2446  [{u'category': u'0', u'score': 0.699670629556}]
    2447                2447  [{u'category': u'0', u'score': 0.699669899056}]
    2448                2448  [{u'category': u'0', u'score': 0.699670175681}]
    2449                2449   [{u'category': u'0', u'score': 0.69967011736}]
    2450                2450  [{u'category': u'0', u'score': 0.699670319618}]
    2451                2451  [{u'category': u'0', u'score': 0.699676797417}]
    2452                2452  [{u'category': u'0', u'score': 0.699677074038}]
    2453                2453  [{u'category': u'0', u'score': 0.699672692814}]
    2454                2454  [{u'category': u'0', u'score': 0.699672969437}]
    2455                2455  [{u'category': u'0', u'score': 0.699673274961}]
    2456                2456  [{u'category': u'0', u'score': 0.699669893085}]
    2457                2457  [{u'category': u'0', u'score': 0.699673492677}]
    2458                2458  [{u'category': u'0', u'score': 0.699670110803}]
    2459                2459  [{u'category': u'0', u'score': 0.699701495513}]
    2460                2460  [{u'category': u'0', u'score': 0.699673050238}]
    2461                2461  [{u'category': u'0', u'score': 0.699718952865}]
    2462                2462  [{u'category': u'0', u'score': 0.699700639132}]
    2463                2463  [{u'category': u'0', u'score': 0.699689393586}]
    2464                2464  [{u'category': u'0', u'score': 0.699731069801}]

    [2465 rows x 2 columns]
    ================================================================================ 
                NearestNeighbor  + LSI 
     ================================================================================
     POST http://localhost:5001/api/v0/categorization/
     Training...
         => model id = 007e29fc82884a44
        => Training scores: MAP = 1.000, ROC-AUC = 1.000, F1= 1.000

    3.b. Check the parameters used in the categorization model
     GET http://localhost:5001/api/v0/categorization/007e29fc82884a44
         - y: [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
         - method: NearestNeighbor
         - options: {'n_jobs': 1, 'radius': None, 'leaf_size': 30, 'algorithm': u'brute'}

    3.c Categorize the complete dataset with this model
     GET http://localhost:5001/api/v0/categorization/007e29fc82884a44/predict
                 document_id                                             scores
    internal_id                                                                
    0                      0  [{u'category': u'1', u'score': 0.901419309797,...
    1                      1  [{u'category': u'0', u'score': 0.33306993451, ...
    2                      2  [{u'category': u'1', u'score': 0.982746647437,...
    3                      3  [{u'category': u'1', u'score': 1.0, u'internal...
    4                      4  [{u'category': u'1', u'score': 0.971531916582,...
    5                      5  [{u'category': u'1', u'score': 0.983977051571,...
    6                      6  [{u'category': u'1', u'score': 0.975067656607,...
    7                      7  [{u'category': u'1', u'score': 0.989925775168,...
    8                      8  [{u'category': u'1', u'score': 0.985250691895,...
    9                      9  [{u'category': u'0', u'score': 1.0, u'internal...
    10                    10  [{u'category': u'1', u'score': 0.995320983154,...
    11                    11  [{u'category': u'0', u'score': 0.380455284164,...
    12                    12  [{u'category': u'0', u'score': 0.35852019507, ...
    13                    13  [{u'category': u'0', u'score': 0.303982790134,...
    14                    14  [{u'category': u'0', u'score': 0.987154585486,...
    15                    15  [{u'category': u'0', u'score': 0.912332675983,...
    16                    16  [{u'category': u'0', u'score': 0.186063649208,...
    17                    17  [{u'category': u'0', u'score': 0.269503367548,...
    18                    18  [{u'category': u'0', u'score': 0.661352553271,...
    19                    19  [{u'category': u'0', u'score': 0.679389803838,...
    20                    20  [{u'category': u'0', u'score': 0.916507346554,...
    21                    21  [{u'category': u'0', u'score': 0.731681411956,...
    22                    22  [{u'category': u'0', u'score': 0.39510386648, ...
    23                    23  [{u'category': u'0', u'score': 0.412558877305,...
    24                    24  [{u'category': u'0', u'score': 0.683997495738,...
    25                    25  [{u'category': u'0', u'score': 0.286038521213,...
    26                    26  [{u'category': u'0', u'score': 0.308006901329,...
    27                    27  [{u'category': u'0', u'score': 0.506139039079,...
    28                    28  [{u'category': u'0', u'score': 0.194839166497,...
    29                    29  [{u'category': u'0', u'score': 0.264894691022,...
    ...                  ...                                                ...
    2435                2435  [{u'category': u'0', u'score': 0.138445873169,...
    2436                2436  [{u'category': u'1', u'score': 0.980114253543,...
    2437                2437  [{u'category': u'0', u'score': 0.905709730609,...
    2438                2438  [{u'category': u'0', u'score': 0.912648692243,...
    2439                2439  [{u'category': u'0', u'score': 0.980146030662,...
    2440                2440  [{u'category': u'0', u'score': 0.922977343609,...
    2441                2441  [{u'category': u'0', u'score': 0.98114685801, ...
    2442                2442  [{u'category': u'0', u'score': 0.916848962339,...
    2443                2443  [{u'category': u'1', u'score': 0.969428813601,...
    2444                2444  [{u'category': u'0', u'score': 0.893245822822,...
    2445                2445  [{u'category': u'1', u'score': 0.960029195463,...
    2446                2446  [{u'category': u'0', u'score': 0.903144508772,...
    2447                2447  [{u'category': u'1', u'score': 0.980933732862,...
    2448                2448  [{u'category': u'0', u'score': 0.944020507606,...
    2449                2449  [{u'category': u'1', u'score': 0.994535910039,...
    2450                2450  [{u'category': u'0', u'score': 0.927601522137,...
    2451                2451  [{u'category': u'0', u'score': 1.0, u'internal...
    2452                2452  [{u'category': u'0', u'score': 0.889152102329,...
    2453                2453  [{u'category': u'0', u'score': 0.957709811872,...
    2454                2454  [{u'category': u'0', u'score': 0.838832298733,...
    2455                2455  [{u'category': u'0', u'score': 0.954235537316,...
    2456                2456  [{u'category': u'1', u'score': 0.99736167804, ...
    2457                2457  [{u'category': u'0', u'score': 0.894928293549,...
    2458                2458  [{u'category': u'1', u'score': 0.982038919969,...
    2459                2459  [{u'category': u'0', u'score': 0.926611305982,...
    2460                2460  [{u'category': u'0', u'score': 0.649899228244,...
    2461                2461  [{u'category': u'0', u'score': 0.652138324042,...
    2462                2462  [{u'category': u'0', u'score': 0.637617540117,...
    2463                2463  [{u'category': u'0', u'score': 0.552458069995,...
    2464                2464  [{u'category': u'0', u'score': 0.594490577074,...

    [2465 rows x 2 columns]

    5.a Delete the extracted features (and LSI decomposition)
     DELETE http://localhost:5001/api/v0/feature-extraction/689ce849735249ae




|


.. code-block:: python


    from __future__ import print_function

    from time import time, sleep
    from multiprocessing import Process
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the example dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        res = requests.get(url, json={'return_file_path': True}).json()

        # To use a custom dataset, simply specify the following variables
        seed_document_id = res['seed_document_id']
        seed_y = res['seed_y']
        ground_truth_y = res['ground_truth_y']

        # create a custom dataset definition for ingestion
        dataset_definition = []
        for document_id, fname in zip(res['document_id'], res['file_path']):
            dataset_definition.append({'document_id': document_id,
                                      'rendering_id': 0,
                                      'file_path': fname})

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction (in the background)")

        # Make this call in a background process (there should be a better way of doing it)
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        p = Process(target=requests.post, args=(url,))
        p.start()
        sleep(5.0) # wait a bit for the processing to start

        print('\n1.c Monitor feature extraction progress')
        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" GET", url)

        t0 = time()
        while True:
            res = requests.get(url)
            if res.status_code == 520:
                p.terminate()
                raise ValueError('Processing did not start')
            elif res.status_code == 200:
                break # processing finished
            data = res.json()
            print('     ... {}k/{}k files processed in {:.1f} min'.format(
                        data['n_samples_processed']//1000, data['n_samples']//1000, (time() - t0)/60.))
            sleep(15.0)

        p.terminate()  # just in case, should not be necessary


        print("\n1.d. check the parameters of the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(' GET', url)
        res = requests.get(url).json()

        print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                          if "filenames" not in key]))
        # this step is not necessary anymore
        #method = BASE_URL + "/feature-extraction/{}/id-mapping/flat".format(dsid)
        #res = requests.get(method, data={'document_id': seed_document_id})
        #seed_internal_id = res.json()['internal_id']


        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Document categorization

        print("\n3.a. Train the categorization model")
        print("   {} relevant, {} non-relevant files".format(seed_y.count(1), seed_y.count(0)))

        seed_index_nested = [{'document_id': internal_id, 'category': y} \
                                    for internal_id, y in zip(seed_document_id, seed_y)]

        for method, use_lsi in [('LinearSVC', False),
                                ('NearestNeighbor', True)]:

            print('='*80, '\n', ' '*10,
                  method, " + LSI" if use_lsi else ' ', '\n', '='*80)
            if use_lsi:
                # Categorization with the previously created LSI model
                parent_id = lsi_id
            else:
                # Categorization with original text features
                parent_id = dsid

            url = BASE_URL + '/categorization/'
            print(" POST", url)
            print(' Training...')

            res = requests.post(url,
                                json={'parent_id': parent_id,
                                      'data': seed_index_nested,
                                      'method': method,  # one of "LinearSVC", "LogisticRegression", 'xgboost'
                                      }).json()

            mid = res['id']
            print("     => model id = {}".format(mid))
            print('    => Training scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}, F1= {f1:.3f}'.format(**res))

            print("\n3.b. Check the parameters used in the categorization model")
            url = BASE_URL + '/categorization/{}'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                              if key not in ['index', 'category']]))

            print("\n3.c Categorize the complete dataset with this model")
            url = BASE_URL + '/categorization/{}/predict'.format(mid)
            print(" GET", url)
            res = requests.get(url).json()

            if method == "NearestNeighbor":
                data = res['data']
            else:
                data = res['data']

            df = pd.DataFrame(data).set_index('internal_id')
            #if method == "NearestNeighbor":
            #    df = df[['document_id', 'nn_negative__distance', 'nn_negative__document_id',
            #          'nn_positive__distance', 'nn_positive__document_id', 'score']]

            print(df)

            #print("\n3.d Compute the categorization scores")
            #url = BASE_URL + '/metrics/categorization'
            #print(" GET", url)
            #res = requests.post(url, json={'y_true': ground_truth_y,
            #                              'y_pred': df.score.values.tolist(),
            #                             } ).json()


            #print('    => Test scores: MAP = {average_precision:.3f}, ROC-AUC = {roc_auc:.3f}'.format(**res))

        # 4. Cleaning
        print("\n5.a Delete the extracted features (and LSI decomposition)")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  59.795 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_categorization.py <REST_categorization.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_categorization.ipynb <REST_categorization.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
