

.. _sphx_glr_examples_python_clustering.py:


Clustering Example [Python API]
-------------------------------

An example of clustering using the Python API





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load Dataset

    1. Feature extraction (non hashed)


    2. Computing LSI


    3. Document Clustering (LSI + K-Means)

        .. computed in 1.0s
       N_documents                                      cluster_names
    5          479        [tenet, normal, wed, nov, gmt, sensitivity]
    9          454  [shackleton, enron_development, tue, master, t...
    7          423          [berkeley, alias, haas, enron, edu, kean]
    1          303  [recipients, group, administrative, teneo, das...
    6          221      [price, energy, enrononline, ect, lon, power]
    2          150     [sanders, haedicke, normal, nov, tue, meeting]
    3          140             [tana, jones, enron, mon, normal, oct]
    4          127    [ect, hou, party, transaction, shall, floating]
    8          112  [nemec, doc, bump, townsend, attached, nemec_g...
    0           56    [rewrite, server, address, smtp, mail, virtual]

    4. Document Clustering (LSI + Ward Hierarchical Clustering)

        .. computed in 1.5s
       N_documents                                      cluster_names
    4         1031  [ect, shackleton, teneo, enron_development, sh...
    0          400  [tenet, normal, test, sensitivity, gmt, import...
    1          313     [dasovich, energy, alias, berkeley, haas, edu]
    9          210     [tana, jones, enron, advice, nicolay, trading]
    2          123  [nemec, doc, townsend, bump, nemec_gerald, sou...
    3          119  [eb3325, ricafrente, ricafrente_david, meet, n...
    6           91       [sanders, nov, normal, lunch, meeting, sent]
    5           64  [migration, outlook, team, mtg, normal, sensit...
    8           58     [haedicke, labanowski, tue, load, energy, nov]
    7           56    [rewrite, server, address, smtp, mail, virtual]




|


.. code-block:: python


    import pandas as pd
    from freediscovery.text import FeatureVectorizer
    from freediscovery.cluster import _ClusteringWrapper
    from freediscovery.lsi import _LSIWrapper
    from freediscovery.datasets import load_dataset
    from freediscovery.tests.run_suite import check_cache
    from time import time

    pd.options.display.float_format = '{:,.3f}'.format

    dataset_name = "treclegal09_2k_subset"
    cache_dir = check_cache()


    print("0. Load Dataset")

    md, training_set, dataset = load_dataset(dataset_name, cache_dir=cache_dir)


    print("\n1. Feature extraction (non hashed)\n")

    n_features = 30000
    fe = FeatureVectorizer(cache_dir=cache_dir)
    uuid = fe.preprocess(md['data_dir'],
                         n_features=n_features, use_hashing=False,
                         use_idf=True, stop_words='english')
    uuid, filenames = fe.transform()




    n_clusters = 10
    n_top_words = 6
    lsi_components = 50


    def repr_clustering(_labels, _terms):
        out = []
        for ridx, row in enumerate(_terms):
            out.append({'cluster_names': row, 'N_documents': (_labels == ridx).sum()})
        out = pd.DataFrame(out).sort_values('N_documents', ascending=False)
        return out

    print("\n2. Computing LSI\n")
    lsi = _LSIWrapper(cache_dir=cache_dir, parent_id=uuid)
    lsi_res, exp_var = lsi.fit_transform(n_components=lsi_components)  # TODO unused variables



    print("\n3. Document Clustering (LSI + K-Means)\n")

    cat = _ClusteringWrapper(cache_dir=cache_dir, parent_id=lsi.mid)

    t0 = time()
    labels, tree  = cat.k_means(n_clusters)
    terms = cat.compute_labels(n_top_words=n_top_words)
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(repr_clustering(labels, terms))


    print('\n4. Document Clustering (LSI + Ward Hierarchical Clustering)\n')


    t0 = time()
    labels, tree = cat.ward_hc(n_clusters,
                               n_neighbors=5   # this is the connectivity constraint
                               )
    terms = cat.compute_labels(n_top_words=n_top_words)
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(repr_clustering(labels, terms))

**Total running time of the script:** ( 0 minutes  9.717 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: python_clustering.py <python_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: python_clustering.ipynb <python_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
