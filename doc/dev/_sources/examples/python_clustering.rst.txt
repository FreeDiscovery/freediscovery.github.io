

.. _sphx_glr_examples_python_clustering.py:


Clustering Example [Python API]
-------------------------------

An example of clustering using the Python API





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load Dataset

    Warning: downloading dataset treclegal09_2k_subset (2.8 MB) !

    File /tmp/treclegal09_2k_subset.tar.gz downloaded!
    Archive extracted!

    1. Feature extraction (non hashed)


    2. Computing LSI


    3. Document Clustering (LSI + K-Means)

        .. computed in 2.3s
       N_documents                                      cluster_names
    5          476  [load, dasovich, shackleton, test, normal, hae...
    6          410      [nemec, enron, agreement, shall, doc, letter]
    0          352  [tenet, normal, test, gmt, sensitivity, import...
    7          306  [teneo, recipients, administrative, group, sha...
    1          204               [ect, hou, lon, forster, gtc, group]
    2          195  [energy, market, services, enrononline, power,...
    4          195     [tana, jones, migration, outlook, team, enron]
    9          174  [enron_development, trading, shackleton, marce...
    3           97       [sanders, normal, nov, lunch, meeting, sent]
    8           56    [rewrite, server, address, smtp, mail, virtual]

    4. Document Clustering (LSI + Ward Hierarchical Clustering)

        .. computed in 1.2s
       N_documents                                      cluster_names
    0         1025  [shackleton, enron_development, teneo, shall, ...
    1          479  [tenet, normal, test, gmt, sensitivity, import...
    2          330     [dasovich, energy, alias, berkeley, haas, edu]
    6          129       [tana, jones, enron, awais, shults, lambert]
    3          104  [nemec, doc, bump, townsend, attached, nemec_g...
    4          103         [ect, hou, kincannon, clair, stack, flynn]
    7          101        [sanders, nov, normal, meeting, lunch, tue]
    8           74  [ricafrente, ricafrente_david, eb3325, teneo, ...
    9           64  [migration, outlook, team, mtg, normal, sensit...
    5           56    [rewrite, server, address, smtp, mail, virtual]




|


.. code-block:: python


    import pandas as pd
    from freediscovery.text import FeatureVectorizer
    from freediscovery.cluster import _ClusteringWrapper
    from freediscovery.lsi import _LSIWrapper
    from freediscovery.datasets import load_dataset
    from freediscovery.tests.run_suite import check_cache
    from time import time

    pd.options.display.float_format = '{:,.3f}'.format

    dataset_name = "treclegal09_2k_subset"
    cache_dir = check_cache()


    print("0. Load Dataset")

    ds = load_dataset(dataset_name, cache_dir=cache_dir)


    print("\n1. Feature extraction (non hashed)\n")

    n_features = 30000
    fe = FeatureVectorizer(cache_dir=cache_dir)
    uuid = fe.preprocess(ds['data_dir'],
                         n_features=n_features, use_hashing=False,
                         use_idf=True, stop_words='english')
    uuid, filenames = fe.transform()




    n_clusters = 10
    n_top_words = 6
    lsi_components = 50


    def repr_clustering(_labels, _terms):
        out = []
        for ridx, row in enumerate(_terms):
            out.append({'cluster_names': row, 'N_documents': (_labels == ridx).sum()})
        out = pd.DataFrame(out).sort_values('N_documents', ascending=False)
        return out

    print("\n2. Computing LSI\n")
    lsi = _LSIWrapper(cache_dir=cache_dir, parent_id=uuid)
    lsi_res, exp_var = lsi.fit_transform(n_components=lsi_components)  # TODO unused variables



    print("\n3. Document Clustering (LSI + K-Means)\n")

    cat = _ClusteringWrapper(cache_dir=cache_dir, parent_id=lsi.mid)

    t0 = time()
    labels, tree  = cat.k_means(n_clusters)
    terms = cat.compute_labels(n_top_words=n_top_words)
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(repr_clustering(labels, terms))


    print('\n4. Document Clustering (LSI + Ward Hierarchical Clustering)\n')


    t0 = time()
    labels, tree = cat.ward_hc(n_clusters,
                               n_neighbors=5   # this is the connectivity constraint
                               )
    terms = cat.compute_labels(n_top_words=n_top_words)
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(repr_clustering(labels, terms))

**Total running time of the script:** ( 0 minutes  27.669 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: python_clustering.py <python_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: python_clustering.ipynb <python_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
