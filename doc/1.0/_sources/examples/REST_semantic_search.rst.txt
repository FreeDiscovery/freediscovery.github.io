

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 8bca870db6d842ef

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/8bca870db6d842ef

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 54ad6c6eb40f45e4
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.422
    21316        0.384
    1572516      0.372
    4116841      0.349
    2152089      0.346
    3545689      0.339
    674041       0.339
    1454436      0.327
    3225616      0.326
    1048576      0.319
    202500       0.312
    1550025      0.304
    1976836      0.303
    648025       0.300
    649636       0.300
    68644        0.295
    1274641      0.294
    3748096      0.294
    1276900      0.294
    1682209      0.291
    776161       0.291
    3243601      0.291
    69169        0.290
    1052676      0.289
    4923961      0.288
    102400       0.286
    2856100      0.286
    777924       0.282
    774400       0.281
    1684804      0.281
    ...            ...
    872356      -0.213
    5085025     -0.213
    243049      -0.215
    3663396     -0.215
    904401      -0.219
    385641      -0.220
    906304      -0.220
    142884      -0.221
    5531904     -0.221
    5541316     -0.221
    144400      -0.221
    1288225     -0.223
    3751969     -0.223
    4301476     -0.228
    3844        -0.228
    3312400     -0.232
    1038361     -0.235
    4389025     -0.235
    3196944     -0.235
    1085764     -0.236
    8464        -0.236
    5143824     -0.236
    8649        -0.236
    1040400     -0.237
    1083681     -0.244
    614656      -0.269
    1510441     -0.269
    495616      -0.273
    2268036     -0.324
    2271049     -0.327

    [2465 rows x 1 columns]
    0.421668888336

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/8bca870db6d842ef




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  11.012 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
