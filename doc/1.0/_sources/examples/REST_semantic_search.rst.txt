

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 401a1fa9245742d5

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/401a1fa9245742d5

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 36fa808134d442ce
      => SVD decomposition with 100 dimensions explaining 76.49 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.464
    21316        0.421
    1572516      0.378
    4116841      0.353
    2152089      0.350
    674041       0.343
    1454436      0.334
    1550025      0.334
    648025       0.330
    49729        0.329
    649636       0.329
    68644        0.322
    102400       0.319
    69169        0.318
    3545689      0.317
    4923961      0.314
    4765489      0.309
    48841        0.308
    202500       0.300
    5089536      0.300
    4380649      0.297
    2856100      0.295
    1976836      0.293
    8100         0.293
    7744         0.292
    558009       0.289
    1274641      0.281
    1276900      0.280
    4363921      0.280
    3748096      0.280
    ...            ...
    2226064     -0.212
    8649        -0.213
    1038361     -0.214
    304704      -0.215
    1607824     -0.216
    4214809     -0.217
    1085764     -0.217
    1040400     -0.217
    5349969     -0.218
    2280100     -0.218
    228484      -0.219
    114921      -0.220
    1311025     -0.220
    385641      -0.221
    904401      -0.221
    708964      -0.221
    1610361     -0.221
    906304      -0.222
    2050624     -0.224
    1763584     -0.225
    1083681     -0.227
    872356      -0.238
    243049      -0.241
    5368489     -0.244
    5143824     -0.252
    495616      -0.276
    2268036     -0.294
    2271049     -0.306
    1510441     -0.311
    614656      -0.311

    [2465 rows x 1 columns]
    0.463789772454

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/401a1fa9245742d5




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.753 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
