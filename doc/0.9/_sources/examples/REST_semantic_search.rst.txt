

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = ec290164fa954b8d

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/ec290164fa954b8d

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 7254c028ae3c4378
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    481636       0.462
    202500       0.444
    1976836      0.437
    3748096      0.434
    1274641      0.428
    4528384      0.428
    1276900      0.428
    770884       0.427
    1677025      0.427
    3651921      0.426
    3632836      0.421
    342225       0.418
    1227664      0.417
    923521       0.416
    929296       0.412
    4363921      0.406
    564001       0.406
    3667225      0.404
    6724         0.402
    407044       0.401
    6889         0.401
    776161       0.399
    1682209      0.399
    3636649      0.398
    3655744      0.397
    2217121      0.396
    4393216      0.396
    343396       0.396
    1234321      0.395
    3659569      0.395
    ...            ...
    1073296      0.150
    118336       0.150
    4782969      0.149
    5202961      0.149
    4704561      0.149
    92416        0.148
    124609       0.148
    10404        0.148
    125316       0.147
    1296         0.147
    5166529      0.147
    119025       0.146
    4481689      0.146
    42025        0.146
    3312400      0.145
    1083681      0.144
    1085764      0.144
    4239481      0.143
    42436        0.143
    5184729      0.143
    25281        0.143
    8281         0.143
    3249         0.141
    23409        0.141
    130321       0.140
    24964        0.139
    51076        0.139
    16384        0.137
    2025         0.136
    495616       0.136

    [2465 rows x 1 columns]
    0.461835895656

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/ec290164fa954b8d




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.445 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
