

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 569b79510ad244a8

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/569b79510ad244a8

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = a1a6de1229b247a5
      => SVD decomposition with 100 dimensions explaining 76.48 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.467
    21316        0.437
    4116841      0.426
    1572516      0.422
    2152089      0.420
    3545689      0.417
    1454436      0.413
    674041       0.403
    202500       0.393
    1550025      0.388
    1976836      0.387
    648025       0.386
    649636       0.386
    3748096      0.383
    1274641      0.383
    102400       0.383
    1276900      0.382
    68644        0.382
    69169        0.380
    4923961      0.379
    776161       0.377
    1682209      0.377
    2856100      0.376
    5089536      0.374
    3632836      0.372
    14641        0.369
    3225616      0.368
    774400       0.368
    777924       0.368
    1684804      0.367
    ...            ...
    2277081      0.177
    625681       0.177
    1527696      0.177
    8649         0.177
    1040400      0.177
    114921       0.177
    2280100      0.177
    904401       0.177
    1288225      0.176
    3751969      0.176
    906304       0.176
    4410000      0.176
    243049       0.175
    4214809      0.175
    1311025      0.172
    2226064      0.172
    3312400      0.170
    1085764      0.168
    1607824      0.166
    495616       0.166
    614656       0.165
    1510441      0.165
    1083681      0.165
    708964       0.164
    1610361      0.164
    872356       0.164
    1763584      0.163
    5143824      0.163
    2268036      0.156
    2271049      0.150

    [2465 rows x 1 columns]
    0.466673153746

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/569b79510ad244a8




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.531 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
