

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 71a75ce2ae9b457c

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/71a75ce2ae9b457c

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 417bc083139a4698
      => SVD decomposition with 100 dimensions explaining 76.48 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.470
    21316        0.443
    4116841      0.424
    2152089      0.421
    1572516      0.418
    3545689      0.414
    68644        0.414
    69169        0.414
    1454436      0.411
    4923961      0.410
    674041       0.403
    1550025      0.388
    649636       0.386
    648025       0.385
    102400       0.381
    525625       0.379
    202500       0.377
    3225616      0.375
    4363921      0.375
    6889         0.375
    1976836      0.373
    6724         0.371
    5089536      0.370
    776161       0.370
    1682209      0.370
    2856100      0.366
    1048576      0.366
    558009       0.365
    14641        0.364
    66564        0.363
    ...            ...
    898704       0.178
    1083681      0.178
    114921       0.178
    1784896      0.177
    304704       0.177
    1311025      0.177
    1288225      0.177
    3751969      0.177
    385641       0.177
    4214809      0.176
    594441       0.176
    3600         0.176
    1607824      0.176
    5085025      0.175
    4293184      0.174
    708964       0.174
    1610361      0.174
    906304       0.173
    904401       0.173
    2050624      0.172
    2226064      0.171
    243049       0.169
    1763584      0.168
    5143824      0.167
    495616       0.166
    872356       0.165
    614656       0.160
    1510441      0.160
    2268036      0.147
    2271049      0.144

    [2465 rows x 1 columns]
    0.469860702801

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/71a75ce2ae9b457c




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.890 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
