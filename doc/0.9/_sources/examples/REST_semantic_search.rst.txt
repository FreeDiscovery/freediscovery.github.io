

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = e9022c13f1944e77

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/e9022c13f1944e77

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 9ae72cbb16ce4883
      => SVD decomposition with 100 dimensions explaining 76.50 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.478
    21316        0.445
    4116841      0.433
    1454436      0.421
    2152089      0.420
    3545689      0.415
    68644        0.394
    1572516      0.393
    69169        0.392
    4923961      0.390
    3748096      0.386
    1276900      0.385
    1274641      0.385
    1550025      0.381
    648025       0.378
    649636       0.378
    3225616      0.376
    674041       0.375
    14641        0.374
    2217121      0.368
    102400       0.368
    525625       0.368
    4464769      0.367
    1048576      0.366
    3632836      0.366
    558009       0.365
    2414916      0.364
    202500       0.364
    224676       0.363
    4687225      0.362
    ...            ...
    1580049      0.177
    385641       0.177
    617796       0.177
    1515361      0.177
    624100       0.177
    1525225      0.177
    4293184      0.176
    122500       0.176
    625681       0.176
    1527696      0.176
    228484       0.176
    872356       0.176
    114921       0.171
    1311025      0.170
    10201        0.164
    1607824      0.164
    1763584      0.163
    10404        0.163
    3312400      0.163
    708964       0.162
    1610361      0.162
    2268036      0.162
    1085764      0.162
    4410000      0.161
    5143824      0.159
    1083681      0.159
    2271049      0.156
    495616       0.155
    614656       0.154
    1510441      0.154

    [2465 rows x 1 columns]
    0.478235305534

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/e9022c13f1944e77




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.779 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
