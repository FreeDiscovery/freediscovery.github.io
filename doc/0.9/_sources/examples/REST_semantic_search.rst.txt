

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 2fb0f85756534ce6

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/2fb0f85756534ce6

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 612b176131854480
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    481636       0.447
    770884       0.426
    1677025      0.426
    202500       0.426
    4528384      0.425
    776161       0.422
    1682209      0.422
    1976836      0.417
    3748096      0.417
    342225       0.413
    1274641      0.413
    1276900      0.412
    3651921      0.411
    1648656      0.408
    1227664      0.403
    1684804      0.401
    3632836      0.401
    739600       0.400
    4363921      0.400
    3541924      0.400
    777924       0.398
    3667225      0.398
    343396       0.396
    4116841      0.396
    1454436      0.395
    774400       0.395
    923521       0.395
    6724         0.395
    741321       0.395
    558009       0.394
    ...            ...
    1083681      0.154
    1600         0.153
    36100        0.153
    1296         0.153
    4410000      0.152
    4481689      0.152
    21904        0.152
    130321       0.152
    4915089      0.151
    4384836      0.151
    4566769      0.151
    25281        0.151
    10201        0.151
    67081        0.150
    10404        0.149
    67600        0.148
    5184729      0.147
    51076        0.146
    16384        0.145
    24964        0.144
    8281         0.144
    4704561      0.143
    4239481      0.142
    42025        0.141
    42436        0.141
    118336       0.140
    119025       0.140
    495616       0.139
    5166529      0.137
    2025         0.135

    [2465 rows x 1 columns]
    0.447433162904

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/2fb0f85756534ce6




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.778 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
