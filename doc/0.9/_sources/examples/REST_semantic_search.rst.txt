

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 485168f4f829465b

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/485168f4f829465b

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 719c259ba076479c
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.442
    481636       0.437
    3651921      0.428
    1227664      0.426
    202500       0.424
    3748096      0.419
    1276900      0.415
    929296       0.415
    1976836      0.415
    1274641      0.415
    923521       0.413
    21316        0.413
    1238769      0.412
    770884       0.408
    1677025      0.408
    3667225      0.405
    1648656      0.405
    1234321      0.402
    741321       0.401
    739600       0.400
    3655744      0.398
    342225       0.397
    3632836      0.397
    3678724      0.395
    1236544      0.395
    1229881      0.395
    4363921      0.394
    3659569      0.393
    674041       0.391
    1232100      0.390
    ...            ...
    92416        0.152
    8281         0.152
    70225        0.151
    10404        0.151
    5094049      0.151
    4928400      0.151
    4704561      0.150
    5040025      0.150
    16384        0.150
    3312400      0.150
    4410000      0.150
    130321       0.149
    1083681      0.149
    1371241      0.149
    42025        0.148
    69696        0.148
    118336       0.148
    103041       0.148
    3952144      0.148
    4782969      0.148
    10201        0.148
    5184729      0.147
    23409        0.147
    4389025      0.146
    25281        0.146
    495616       0.146
    5166529      0.145
    51076        0.144
    8649         0.142
    8464         0.142

    [2465 rows x 1 columns]
    0.441595629102

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/485168f4f829465b




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  8.756 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
