

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 92afaa2b837746d1

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/92afaa2b837746d1

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 059ae521c43546ca
      => SVD decomposition with 100 dimensions explaining 99.79 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    481636       0.474
    202500       0.449
    3748096      0.446
    1976836      0.442
    1274641      0.440
    1276900      0.439
    770884       0.430
    1677025      0.430
    1648656      0.428
    776161       0.425
    1682209      0.425
    739600       0.423
    923521       0.421
    929296       0.418
    741321       0.415
    1684804      0.414
    266256       0.413
    777924       0.412
    342225       0.412
    774400       0.409
    4363921      0.407
    1572516      0.406
    6724         0.403
    4528384      0.403
    3651921      0.402
    6889         0.401
    674041       0.398
    4393216      0.396
    1646089      0.396
    3632836      0.396
    ...            ...
    729          0.150
    1073296      0.149
    23409        0.149
    5202961      0.149
    36100        0.148
    25281        0.147
    103041       0.147
    124609       0.147
    118336       0.146
    4481689      0.146
    4566769      0.145
    103684       0.145
    125316       0.145
    51076        0.144
    5166529      0.144
    119025       0.143
    3312400      0.142
    4239481      0.142
    8281         0.142
    1083681      0.142
    1085764      0.142
    4704561      0.142
    495616       0.140
    130321       0.140
    5184729      0.139
    42025        0.138
    42436        0.137
    16384        0.136
    2025         0.135
    24964        0.135

    [2465 rows x 1 columns]
    0.473851918174

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/92afaa2b837746d1




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.417 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
