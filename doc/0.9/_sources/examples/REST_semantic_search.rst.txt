

.. _sphx_glr_examples_REST_semantic_search.py:


Semantic Search Example [REST API]
----------------------------------

An example of Semantic Search





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the test dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 2a9c5d6c988d4aaf

    1.b Start feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/2a9c5d6c988d4aaf

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = e1c3f5ec3ade4d13
      => SVD decomposition with 100 dimensions explaining 76.47 % variabilty of the data

    3.a. Perform the semantic search
     POST http://localhost:5001/api/v0/search/
                 score
    document_id       
    4528384      0.468
    4116841      0.441
    21316        0.429
    1454436      0.422
    2152089      0.421
    3545689      0.417
    1550025      0.416
    649636       0.413
    648025       0.412
    3748096      0.404
    1276900      0.402
    3225616      0.401
    1274641      0.401
    1572516      0.397
    1048576      0.389
    4363921      0.387
    68644        0.387
    4923961      0.386
    69169        0.386
    202500       0.384
    1976836      0.383
    3632836      0.379
    6724         0.378
    4532641      0.377
    674041       0.377
    4393216      0.374
    21609        0.373
    8836         0.373
    3243601      0.372
    1052676      0.371
    ...            ...
    570025       0.179
    142884       0.179
    144400       0.179
    5531904      0.179
    5541316      0.179
    304704       0.178
    455625       0.178
    467856       0.178
    4214809      0.178
    4571044      0.177
    1607824      0.177
    708964       0.177
    1610361      0.177
    122500       0.177
    1085764      0.177
    2050624      0.175
    2226064      0.174
    385641       0.174
    114921       0.174
    1083681      0.173
    243049       0.172
    1311025      0.171
    872356       0.166
    5143824      0.165
    614656       0.162
    1510441      0.162
    1763584      0.158
    495616       0.155
    2268036      0.154
    2271049      0.147

    [2465 rows x 1 columns]
    0.467829371023

    4. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/2a9c5d6c988d4aaf




|


.. code-block:: python


    from __future__ import print_function

    import os.path
    import requests
    import pandas as pd

    pd.options.display.float_format = '{:,.3f}'.format
    pd.options.display.expand_frame_repr = False

    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    if __name__ == '__main__':

        print(" 0. Load the test dataset")
        url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
        print(" GET", url)
        input_ds = requests.get(url).json()

        # create a custom dataset definition for ingestion
        data_dir = input_ds['metadata']['data_dir']
        dataset_definition = [{'document_id': row['document_id'],
                               'file_path': os.path.join(data_dir, row['file_path'])} \
                                       for row in input_ds['dataset']]

        # 1. Feature extraction

        print("\n1.a Load dataset and initalize feature extraction")
        url = BASE_URL + '/feature-extraction'
        print(" POST", url)
        res = requests.post(url, json={'dataset_definition': dataset_definition,
                                       'use_hashing': True}).json()

        dsid = res['id']
        print("   => received {}".format(list(res.keys())))
        print("   => dsid = {}".format(dsid))

        print("\n1.b Start feature extraction")

        url = BASE_URL+'/feature-extraction/{}'.format(dsid)
        print(" POST", url)
        requests.post(url)

        # 3. Document categorization with LSI (used for Nearest Neighbors method)

        print("\n2. Calculate LSI")

        url = BASE_URL + '/lsi/'
        print("POST", url)

        n_components = 100
        res = requests.post(url,
                            json={'n_components': n_components,
                                  'parent_id': dsid
                                  }).json()

        lsi_id = res['id']
        print('  => LSI model id = {}'.format(lsi_id))
        print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                                n_components, res['explained_variance']*100))


        # 3. Semantic search

        print("\n3.a. Perform the semantic search")


        query = """There are some conflicts with the draft date, so we will probably need to
                    have it on a different date."""

        url = BASE_URL + '/search/'
        print(" POST", url)

        res = requests.post(url,
                            json={'parent_id': lsi_id,
                                  'query': query
                                  }).json()

        data = res['data']

        df = pd.DataFrame(data).set_index('document_id')
        print(df)

        print(df.score.max())


        # 4. Cleaning
        print("\n4. Delete the extracted features")
        url = BASE_URL + '/feature-extraction/{}'.format(dsid)
        print(" DELETE", url)
        requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.602 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_semantic_search.py <REST_semantic_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_semantic_search.ipynb <REST_semantic_search.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
