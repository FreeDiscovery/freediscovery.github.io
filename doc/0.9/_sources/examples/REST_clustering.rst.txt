

.. _sphx_glr_examples_REST_clustering.py:


Clustering Example [REST API]
-----------------------------

Cluster documents into clusters





.. rst-class:: sphx-glr-script-out

 Out::

    0. Load the example dataset
     GET http://localhost:5001/api/v0/example-dataset/treclegal09_2k_subset

    1.a Load dataset and initalize feature extraction
     POST http://localhost:5001/api/v0/feature-extraction
       => received ['filenames', 'id']
       => dsid = 5a447c805c934f63

    1.b Run feature extraction
     POST http://localhost:5001/api/v0/feature-extraction/5a447c805c934f63

    1.d. check the parameters of the extracted features
     GET http://localhost:5001/api/v0/feature-extraction/5a447c805c934f63
         - analyzer: word
         - binary: False
         - chunk_size: 5000
         - data_dir: ../freediscovery_shared/treclegal09_2k_subset/data/jobRun_4/XML_EXPORT_CONTENT/text_9
         - max_df: 0.75
         - min_df: 4.0
         - n_features: 30001
         - n_jobs: 1
         - n_samples: 2465
         - n_samples_processed: 2465
         - ngram_range: [1, 1]
         - norm: l2
         - stop_words: None
         - sublinear_tf: True
         - use_hashing: False
         - use_idf: True

    2. Calculate LSI
    POST http://localhost:5001/api/v0/lsi/
      => LSI model id = 1da67fc97b3041bb
      => SVD decomposition with 100 dimensions explaining 53.28 % variabilty of the data

    3.a. Document clustering (LSI + K-means)
     POST http://localhost:5001/api/v0/clustering/k-mean/
         => model id = e9c9fd90cd27487f

    3.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/k-mean/e9c9fd90cd27487f
        .. computed in 1.6s
       cluster_id               cluster_label  cluster_similarity  cluster_size  n_documents
    0           0      market berkeley energy               0.398           299          299
    1           1      rewrite server address               1.000            56           56
    2           2  fri enron_development calo               0.353           288          288
    3           3             thu dupre tenet               0.378           221          221
    4           4   teneo nov shackleton_sara               0.374           254          254
    5           5             mon ect marcelo               0.352           277          277
    6           6        ect agreement master               0.329           524          524
    7           7     haedicke enron dasovich               0.368           258          258
    8           8             sanders wed oct               0.426           187          187
    9           9      migration outlook team               0.521           101          101

    4.a. Document clustering (LSI + Birch clustering)
     POST http://localhost:5001/api/v0/clustering/birch/
         => model id = 714d23b24e6649f4

    4.b. Computing cluster labels
     GET http://localhost:5001/api/v0/clustering/birch/714d23b24e6649f4
        .. computed in 2.7s
                                                 children  cluster_depth  cluster_id                    cluster_label  cluster_similarity  cluster_size  n_documents
    0                             [1, 13, 17, 19, 34, 36]              0           0                     test ect oct               0.294          2465         2465
    1                [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]              1           1                   ect jones tana               0.333           509          509
    2                                                  []              2           2          dasovich bruno gaillard               0.553            62           62
    3                                                  []              2           3                 cini isda freyre               0.554            33           33
    4                                                  []              2           4                     ect hou tana               0.509            60           60
    5                                                  []              2           5    enron_development hendry cone               0.457            88           88
    6                                                  []              2           6          conference legal budget               0.488            35           35
    7                                                  []              2           7                tana jones advice               0.510            54           54
    8                                                  []              2           8                   lon master ect               0.424            53           53
    9                                                  []              2           9  recipients administrative group               0.531            32           32
    10                                                 []              2          10                   master gtc eta               0.459            43           43
    11                                                 []              2          11                  meet eb3325 mon               0.474            20           20
    12                                                 []              2          12                 jones tana enron               0.544            29           29
    13                                       [14, 15, 16]              1          13                    load oct test               0.494            80           80
    14                                                 []              2          14                     wed load oct               0.559            20           20
    15                                                 []              2          15                     thu oct load               0.648             8            8
    16                                                 []              2          16                    load fri test               0.521            52           52
    17                                               [18]              1          17           rewrite server address               0.697            91           91
    18                                                 []              2          18           rewrite server address               0.697            91           91
    19  [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 3...              1          19               tenet haedicke oct               0.328           656          656
    20                                                 []              2          20             sampling awais sager               0.413            79           79
    21                                                 []              2          21                    fri tenet oct               0.498            34           34
    22                                                 []              2          22              meeting dupre tenet               0.491            27           27
    23                                                 []              2          23                  hyvl bump enron               0.504            45           45
    24                                                 []              2          24        transmission power energy               0.600            35           35
    25                                                 []              2          25      haedicke labanowski marcelo               0.519            82           82
    26                                                 []              2          26                  wed lunch tenet               0.484            42           42
    27                                                 []              2          27  tue ricafrente ricafrente_david               0.500            31           31
    28                                                 []              2          28                    mon tenet tue               0.418            63           63
    29                                                 []              2          29        kincannon marcelo tozzini               0.502            40           40
    30                                                 []              2          30            lunch energy services               0.502            59           59
    31                                                 []              2          31                 flynn smud tenet               0.447            53           53
    32                                                 []              2          32                meeting tenet mon               0.549            24           24
    33                                                 []              2          33                    thu tenet oct               0.514            42           42
    34                                               [35]              1          34                 nemec doc gallup               0.558            70           70
    35                                                 []              2          35                 nemec doc gallup               0.558            70           70
    36  [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 4...              1          36            sanders nov migration               0.306          1059         1059
    37                                                 []              2          37          transaction party price               0.453           141          141
    38                                                 []              2          38        enron_development ect hou               0.502            52           52
    39                                                 []              2          39             kean load shackleton               0.472            45           45
    40                                                 []              2          40           deseret tiger etringer               0.438            87           87
    41                                                 []              2          41            dupre catalytica serc               0.528            34           34
    42                                                 []              2          42          project attorney murray               0.463            32           32
    43                                                 []              2          43             shall alias berkeley               0.430           126          126
    44                                                 []              2          44         wed nov ricafrente_david               0.439            52           52
    45                                                 []              2          45                  sanders nov tue               0.567            75           75
    46                                                 []              2          46     enrononline forster canadian               0.444            57           57
    47                                                 []              2          47          ruppert exxon gillaspie               0.531            47           47
    48                                                 []              2          48          mon davidson shackleton               0.424            55           55
    49                                                 []              2          49                  pier usvi gpier               0.530            39           39
    50                                                 []              2          50           migration outlook team               0.472            82           82
    51                                                 []              2          51                  eb3325 meet nov               0.500            41           41
    52                                                 []              2          52            enron message milbank               0.463            49           49
    53                                                 []              2          53                  class power otc               0.540            29           29
    54                                                 []              2          54                 dead horse teneo               0.506            16           16

    4.a. Optimal sampling (LSI + Birch clustering)
     GET http://localhost:5001/api/v0/clustering/birch/714d23b24e6649f4
        .. computed in 0.6s
        cluster_id  cluster_similarity  cluster_size                                          documents
    0            0               0.453           141  [{'document_id': 73441, 'similarity': 0.452959...
    1            1               0.430           126  [{'document_id': 1577536, 'similarity': 0.4296...
    2            2               0.697            91  [{'document_id': 5041, 'similarity': 0.6969925...
    3            3               0.457            88  [{'document_id': 4165681, 'similarity': 0.4569...
    4            4               0.438            87  [{'document_id': 17424, 'similarity': 0.438411...
    5            5               0.519            82  [{'document_id': 2518569, 'similarity': 0.5193...
    6            6               0.472            82  [{'document_id': 5326864, 'similarity': 0.4722...
    7            7               0.413            79  [{'document_id': 879844, 'similarity': 0.41336...
    8            8               0.567            75  [{'document_id': 3968064, 'similarity': 0.5671...
    9            9               0.558            70  [{'document_id': 749956, 'similarity': 0.55825...
    10          10               0.418            63  [{'document_id': 3080025, 'similarity': 0.4178...
    11          11               0.553            62  [{'document_id': 558009, 'similarity': 0.55294...
    12          12               0.509            60  [{'document_id': 4892944, 'similarity': 0.5091...
    13          13               0.502            59  [{'document_id': 576081, 'similarity': 0.50239...
    14          14               0.444            57  [{'document_id': 3709476, 'similarity': 0.4443...
    15          15               0.424            55  [{'document_id': 32400, 'similarity': 0.424073...
    16          16               0.510            54  [{'document_id': 241081, 'similarity': 0.51034...
    17          17               0.424            53  [{'document_id': 3610000, 'similarity': 0.4236...
    18          18               0.447            53  [{'document_id': 128164, 'similarity': 0.44712...
    19          19               0.521            52  [{'document_id': 370881, 'similarity': 0.52055...
    20          20               0.502            52  [{'document_id': 77284, 'similarity': 0.501938...
    21          21               0.439            52  [{'document_id': 2337841, 'similarity': 0.4392...
    22          22               0.463            49  [{'document_id': 1336336, 'similarity': 0.4625...
    23          23               0.531            47  [{'document_id': 1651225, 'similarity': 0.5306...
    24          24               0.504            45  [{'document_id': 6056521, 'similarity': 0.5040...
    25          25               0.472            45  [{'document_id': 137641, 'similarity': 0.47237...
    26          26               0.459            43  [{'document_id': 1098304, 'similarity': 0.4587...
    27          27               0.484            42  [{'document_id': 2304324, 'similarity': 0.4837...
    28          28               0.514            42  [{'document_id': 2328676, 'similarity': 0.5141...
    29          29               0.500            41  [{'document_id': 3034564, 'similarity': 0.5004...
    30          30               0.502            40  [{'document_id': 1311025, 'similarity': 0.5019...
    31          31               0.530            39  [{'document_id': 3496900, 'similarity': 0.5298...
    32          32               0.488            35  [{'document_id': 470596, 'similarity': 0.48790...
    33          33               0.600            35  [{'document_id': 556516, 'similarity': 0.59991...
    34          34               0.498            34  [{'document_id': 5308416, 'similarity': 0.4983...
    35          35               0.528            34  [{'document_id': 4937284, 'similarity': 0.5279...
    36          36               0.554            33  [{'document_id': 48841, 'similarity': 0.554321...
    37          37               0.531            32  [{'document_id': 2149156, 'similarity': 0.5312...

    5. Delete the extracted features
     DELETE http://localhost:5001/api/v0/feature-extraction/5a447c805c934f63




|


.. code-block:: python


    import os.path
    import numpy as np
    import pandas as pd
    from time import time
    import requests

    pd.options.display.float_format = '{:,.3f}'.format


    dataset_name = "treclegal09_2k_subset"     # see list of available datasets

    BASE_URL = "http://localhost:5001/api/v0"  # FreeDiscovery server URL

    print(" 0. Load the example dataset")
    url = BASE_URL + '/example-dataset/{}'.format(dataset_name)
    print(" GET", url)
    input_ds = requests.get(url).json()

    # To use a custom dataset, simply specify the following variables
    data_dir = input_ds['metadata']['data_dir']
    dataset_definition = [{'document_id': row['document_id'],
                           'file_path': os.path.join(data_dir, row['file_path'])} \
                                   for row in input_ds['dataset']]

    # # 1. Feature extraction (non hashed)

    print("\n1.a Load dataset and initalize feature extraction")
    url = BASE_URL + '/feature-extraction'
    print(" POST", url)
    fe_opts = {'dataset_definition': dataset_definition,
               'use_idf': 1, 'n_features': 30001,
               'min_df': 4, 'max_df': 0.75 # filter out unfrequent / too frequent words
               }
    res = requests.post(url, json=fe_opts).json()

    dsid = res['id']
    print("   => received {}".format(list(res.keys())))
    print("   => dsid = {}".format(dsid))


    print("\n1.b Run feature extraction")
    # progress status is available for the hashed version only
    url = BASE_URL+'/feature-extraction/{}'.format(dsid)
    print(" POST", url)
    res = requests.post(url)

    print("\n1.d. check the parameters of the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(' GET', url)
    res = requests.get(url).json()

    print('\n'.join(['     - {}: {}'.format(key, val) for key, val in res.items() \
                                                      if "filenames" not in key]))

    print("\n2. Calculate LSI")

    url = BASE_URL + '/lsi/'
    print("POST", url)

    n_components = 100
    res = requests.post(url,
                        json={'n_components': n_components,
                              'parent_id': dsid
                              }).json()

    lsi_id = res['id']
    print('  => LSI model id = {}'.format(lsi_id))
    print('  => SVD decomposition with {} dimensions explaining {:.2f} % variabilty of the data'.format(
                            n_components, res['explained_variance']*100))

    # # 3. Document Clustering (LSI + K-Means)

    print("\n3.a. Document clustering (LSI + K-means)")

    url = BASE_URL + '/clustering/k-mean/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': 10,
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n3.b. Computing cluster labels")
    url = BASE_URL + '/clustering/k-mean/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()


    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    print(pd.DataFrame(data))


    # # 4. Document Clustering (LSI + Birch Clustering)

    print("\n4.a. Document clustering (LSI + Birch clustering)")

    url = BASE_URL + '/clustering/birch/'
    print(" POST", url)
    t0 = time()
    res = requests.post(url,
                        json={'parent_id': lsi_id,
                              'n_clusters': -1,
                              #'min_similarity': 0.95,
                              'branching_factor': 20 
                              }).json()

    mid = res['id']
    print("     => model id = {}".format(mid))

    print("\n4.b. Computing cluster labels")
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'n_top_words': 3
                             }).json()
    t1 = time()

    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']
    for row in data:
        row['n_documents'] = len(row.pop('documents'))

    print(pd.DataFrame(data))

    # # 4. Optimal sampling (LSI + Birch Clustering)

    print("\n4.a. Optimal sampling (LSI + Birch clustering)")

    t0 = time()
    url = BASE_URL + '/clustering/birch/{}'.format(mid)
    print(" GET", url)
    res = requests.get(url,
                       json={'return_optimal_sampling': True,
                             'sampling_min_coverage': 0.9
                             }).json()
    t1 = time()
    print('    .. computed in {:.1f}s'.format(t1 - t0))
    data = res['data']

    print(pd.DataFrame(data))

    # 4. Cleaning
    print("\n5. Delete the extracted features")
    url = BASE_URL + '/feature-extraction/{}'.format(dsid)
    print(" DELETE", url)
    requests.delete(url)

**Total running time of the script:** ( 0 minutes  9.716 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: REST_clustering.py <REST_clustering.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: REST_clustering.ipynb <REST_clustering.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
